# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pjsua2')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pjsua2')
    _pjsua2 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pjsua2', [dirname(__file__)])
        except ImportError:
            import _pjsua2
            return _pjsua2
        if fp is not None:
            try:
                _mod = imp.load_module('_pjsua2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pjsua2 = swig_import_helper()
    del swig_import_helper
else:
    import _pjsua2
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


PJ_SUCCESS = _pjsua2.PJ_SUCCESS
PJ_TRUE = _pjsua2.PJ_TRUE
PJ_FALSE = _pjsua2.PJ_FALSE
PJ_O_RDONLY = _pjsua2.PJ_O_RDONLY
PJ_O_WRONLY = _pjsua2.PJ_O_WRONLY
PJ_O_RDWR = _pjsua2.PJ_O_RDWR
PJ_O_APPEND = _pjsua2.PJ_O_APPEND
PJ_LOG_HAS_DAY_NAME = _pjsua2.PJ_LOG_HAS_DAY_NAME
PJ_LOG_HAS_YEAR = _pjsua2.PJ_LOG_HAS_YEAR
PJ_LOG_HAS_MONTH = _pjsua2.PJ_LOG_HAS_MONTH
PJ_LOG_HAS_DAY_OF_MON = _pjsua2.PJ_LOG_HAS_DAY_OF_MON
PJ_LOG_HAS_TIME = _pjsua2.PJ_LOG_HAS_TIME
PJ_LOG_HAS_MICRO_SEC = _pjsua2.PJ_LOG_HAS_MICRO_SEC
PJ_LOG_HAS_SENDER = _pjsua2.PJ_LOG_HAS_SENDER
PJ_LOG_HAS_NEWLINE = _pjsua2.PJ_LOG_HAS_NEWLINE
PJ_LOG_HAS_CR = _pjsua2.PJ_LOG_HAS_CR
PJ_LOG_HAS_SPACE = _pjsua2.PJ_LOG_HAS_SPACE
PJ_LOG_HAS_COLOR = _pjsua2.PJ_LOG_HAS_COLOR
PJ_LOG_HAS_LEVEL_TEXT = _pjsua2.PJ_LOG_HAS_LEVEL_TEXT
PJ_LOG_HAS_THREAD_ID = _pjsua2.PJ_LOG_HAS_THREAD_ID
PJ_LOG_HAS_THREAD_SWC = _pjsua2.PJ_LOG_HAS_THREAD_SWC
PJ_LOG_HAS_INDENT = _pjsua2.PJ_LOG_HAS_INDENT
PJ_QOS_TYPE_BEST_EFFORT = _pjsua2.PJ_QOS_TYPE_BEST_EFFORT
PJ_QOS_TYPE_BACKGROUND = _pjsua2.PJ_QOS_TYPE_BACKGROUND
PJ_QOS_TYPE_VIDEO = _pjsua2.PJ_QOS_TYPE_VIDEO
PJ_QOS_TYPE_VOICE = _pjsua2.PJ_QOS_TYPE_VOICE
PJ_QOS_TYPE_CONTROL = _pjsua2.PJ_QOS_TYPE_CONTROL
PJ_QOS_TYPE_SIGNALLING = _pjsua2.PJ_QOS_TYPE_SIGNALLING
PJ_QOS_PARAM_HAS_DSCP = _pjsua2.PJ_QOS_PARAM_HAS_DSCP
PJ_QOS_PARAM_HAS_SO_PRIO = _pjsua2.PJ_QOS_PARAM_HAS_SO_PRIO
PJ_QOS_PARAM_HAS_WMM = _pjsua2.PJ_QOS_PARAM_HAS_WMM
PJ_QOS_WMM_PRIO_BULK_EFFORT = _pjsua2.PJ_QOS_WMM_PRIO_BULK_EFFORT
PJ_QOS_WMM_PRIO_BULK = _pjsua2.PJ_QOS_WMM_PRIO_BULK
PJ_QOS_WMM_PRIO_VIDEO = _pjsua2.PJ_QOS_WMM_PRIO_VIDEO
PJ_QOS_WMM_PRIO_VOICE = _pjsua2.PJ_QOS_WMM_PRIO_VOICE
class pj_qos_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pj_qos_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pj_qos_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flags"] = _pjsua2.pj_qos_params_flags_set
    __swig_getmethods__["flags"] = _pjsua2.pj_qos_params_flags_get
    if _newclass:
        flags = _swig_property(_pjsua2.pj_qos_params_flags_get, _pjsua2.pj_qos_params_flags_set)
    __swig_setmethods__["dscp_val"] = _pjsua2.pj_qos_params_dscp_val_set
    __swig_getmethods__["dscp_val"] = _pjsua2.pj_qos_params_dscp_val_get
    if _newclass:
        dscp_val = _swig_property(_pjsua2.pj_qos_params_dscp_val_get, _pjsua2.pj_qos_params_dscp_val_set)
    __swig_setmethods__["so_prio"] = _pjsua2.pj_qos_params_so_prio_set
    __swig_getmethods__["so_prio"] = _pjsua2.pj_qos_params_so_prio_get
    if _newclass:
        so_prio = _swig_property(_pjsua2.pj_qos_params_so_prio_get, _pjsua2.pj_qos_params_so_prio_set)
    __swig_setmethods__["wmm_prio"] = _pjsua2.pj_qos_params_wmm_prio_set
    __swig_getmethods__["wmm_prio"] = _pjsua2.pj_qos_params_wmm_prio_get
    if _newclass:
        wmm_prio = _swig_property(_pjsua2.pj_qos_params_wmm_prio_get, _pjsua2.pj_qos_params_wmm_prio_set)

    def __init__(self):
        this = _pjsua2.new_pj_qos_params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_pj_qos_params
    __del__ = lambda self: None
pj_qos_params_swigregister = _pjsua2.pj_qos_params_swigregister
pj_qos_params_swigregister(pj_qos_params)

PJ_TLS_UNKNOWN_CIPHER = _pjsua2.PJ_TLS_UNKNOWN_CIPHER
PJ_TLS_NULL_WITH_NULL_NULL = _pjsua2.PJ_TLS_NULL_WITH_NULL_NULL
PJ_TLS_RSA_WITH_NULL_MD5 = _pjsua2.PJ_TLS_RSA_WITH_NULL_MD5
PJ_TLS_RSA_WITH_NULL_SHA = _pjsua2.PJ_TLS_RSA_WITH_NULL_SHA
PJ_TLS_RSA_WITH_NULL_SHA256 = _pjsua2.PJ_TLS_RSA_WITH_NULL_SHA256
PJ_TLS_RSA_WITH_RC4_128_MD5 = _pjsua2.PJ_TLS_RSA_WITH_RC4_128_MD5
PJ_TLS_RSA_WITH_RC4_128_SHA = _pjsua2.PJ_TLS_RSA_WITH_RC4_128_SHA
PJ_TLS_RSA_WITH_3DES_EDE_CBC_SHA = _pjsua2.PJ_TLS_RSA_WITH_3DES_EDE_CBC_SHA
PJ_TLS_RSA_WITH_AES_128_CBC_SHA = _pjsua2.PJ_TLS_RSA_WITH_AES_128_CBC_SHA
PJ_TLS_RSA_WITH_AES_256_CBC_SHA = _pjsua2.PJ_TLS_RSA_WITH_AES_256_CBC_SHA
PJ_TLS_RSA_WITH_AES_128_CBC_SHA256 = _pjsua2.PJ_TLS_RSA_WITH_AES_128_CBC_SHA256
PJ_TLS_RSA_WITH_AES_256_CBC_SHA256 = _pjsua2.PJ_TLS_RSA_WITH_AES_256_CBC_SHA256
PJ_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = _pjsua2.PJ_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA
PJ_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = _pjsua2.PJ_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA
PJ_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = _pjsua2.PJ_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
PJ_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = _pjsua2.PJ_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA = _pjsua2.PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA
PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA = _pjsua2.PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA
PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA = _pjsua2.PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA
PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA = _pjsua2.PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA
PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA = _pjsua2.PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA
PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA = _pjsua2.PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA
PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA = _pjsua2.PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA
PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA = _pjsua2.PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA
PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA256 = _pjsua2.PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA256
PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA256 = _pjsua2.PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA256
PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = _pjsua2.PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = _pjsua2.PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA256 = _pjsua2.PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA256
PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA256 = _pjsua2.PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA256
PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = _pjsua2.PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = _pjsua2.PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
PJ_TLS_DH_anon_WITH_RC4_128_MD5 = _pjsua2.PJ_TLS_DH_anon_WITH_RC4_128_MD5
PJ_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA = _pjsua2.PJ_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA
PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA = _pjsua2.PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA
PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA = _pjsua2.PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA
PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA256 = _pjsua2.PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA256
PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA256 = _pjsua2.PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA256
PJ_TLS_RSA_EXPORT_WITH_RC4_40_MD5 = _pjsua2.PJ_TLS_RSA_EXPORT_WITH_RC4_40_MD5
PJ_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = _pjsua2.PJ_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5
PJ_TLS_RSA_WITH_IDEA_CBC_SHA = _pjsua2.PJ_TLS_RSA_WITH_IDEA_CBC_SHA
PJ_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA = _pjsua2.PJ_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA
PJ_TLS_RSA_WITH_DES_CBC_SHA = _pjsua2.PJ_TLS_RSA_WITH_DES_CBC_SHA
PJ_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA = _pjsua2.PJ_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA
PJ_TLS_DH_DSS_WITH_DES_CBC_SHA = _pjsua2.PJ_TLS_DH_DSS_WITH_DES_CBC_SHA
PJ_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA = _pjsua2.PJ_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA
PJ_TLS_DH_RSA_WITH_DES_CBC_SHA = _pjsua2.PJ_TLS_DH_RSA_WITH_DES_CBC_SHA
PJ_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = _pjsua2.PJ_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA
PJ_TLS_DHE_DSS_WITH_DES_CBC_SHA = _pjsua2.PJ_TLS_DHE_DSS_WITH_DES_CBC_SHA
PJ_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA = _pjsua2.PJ_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA
PJ_TLS_DHE_RSA_WITH_DES_CBC_SHA = _pjsua2.PJ_TLS_DHE_RSA_WITH_DES_CBC_SHA
PJ_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 = _pjsua2.PJ_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5
PJ_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA = _pjsua2.PJ_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA
PJ_TLS_DH_anon_WITH_DES_CBC_SHA = _pjsua2.PJ_TLS_DH_anon_WITH_DES_CBC_SHA
PJ_SSL_FORTEZZA_KEA_WITH_NULL_SHA = _pjsua2.PJ_SSL_FORTEZZA_KEA_WITH_NULL_SHA
PJ_SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA = _pjsua2.PJ_SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA
PJ_SSL_FORTEZZA_KEA_WITH_RC4_128_SHA = _pjsua2.PJ_SSL_FORTEZZA_KEA_WITH_RC4_128_SHA
PJ_SSL_CK_RC4_128_WITH_MD5 = _pjsua2.PJ_SSL_CK_RC4_128_WITH_MD5
PJ_SSL_CK_RC4_128_EXPORT40_WITH_MD5 = _pjsua2.PJ_SSL_CK_RC4_128_EXPORT40_WITH_MD5
PJ_SSL_CK_RC2_128_CBC_WITH_MD5 = _pjsua2.PJ_SSL_CK_RC2_128_CBC_WITH_MD5
PJ_SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5 = _pjsua2.PJ_SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5
PJ_SSL_CK_IDEA_128_CBC_WITH_MD5 = _pjsua2.PJ_SSL_CK_IDEA_128_CBC_WITH_MD5
PJ_SSL_CK_DES_64_CBC_WITH_MD5 = _pjsua2.PJ_SSL_CK_DES_64_CBC_WITH_MD5
PJ_SSL_CK_DES_192_EDE3_CBC_WITH_MD5 = _pjsua2.PJ_SSL_CK_DES_192_EDE3_CBC_WITH_MD5
PJ_SSL_SOCK_PROTO_DEFAULT = _pjsua2.PJ_SSL_SOCK_PROTO_DEFAULT
PJ_SSL_SOCK_PROTO_SSL2 = _pjsua2.PJ_SSL_SOCK_PROTO_SSL2
PJ_SSL_SOCK_PROTO_SSL3 = _pjsua2.PJ_SSL_SOCK_PROTO_SSL3
PJ_SSL_SOCK_PROTO_TLS1 = _pjsua2.PJ_SSL_SOCK_PROTO_TLS1
PJ_SSL_SOCK_PROTO_TLS1_1 = _pjsua2.PJ_SSL_SOCK_PROTO_TLS1_1
PJ_SSL_SOCK_PROTO_TLS1_2 = _pjsua2.PJ_SSL_SOCK_PROTO_TLS1_2
PJ_SSL_SOCK_PROTO_SSL23 = _pjsua2.PJ_SSL_SOCK_PROTO_SSL23
PJ_SSL_SOCK_PROTO_ALL = _pjsua2.PJ_SSL_SOCK_PROTO_ALL
PJ_SSL_SOCK_PROTO_DTLS1 = _pjsua2.PJ_SSL_SOCK_PROTO_DTLS1
PJ_SSL_CERT_NAME_UNKNOWN = _pjsua2.PJ_SSL_CERT_NAME_UNKNOWN
PJ_SSL_CERT_NAME_RFC822 = _pjsua2.PJ_SSL_CERT_NAME_RFC822
PJ_SSL_CERT_NAME_DNS = _pjsua2.PJ_SSL_CERT_NAME_DNS
PJ_SSL_CERT_NAME_URI = _pjsua2.PJ_SSL_CERT_NAME_URI
PJ_SSL_CERT_NAME_IP = _pjsua2.PJ_SSL_CERT_NAME_IP
PJ_SSL_CERT_ESUCCESS = _pjsua2.PJ_SSL_CERT_ESUCCESS
PJ_SSL_CERT_EISSUER_NOT_FOUND = _pjsua2.PJ_SSL_CERT_EISSUER_NOT_FOUND
PJ_SSL_CERT_EUNTRUSTED = _pjsua2.PJ_SSL_CERT_EUNTRUSTED
PJ_SSL_CERT_EVALIDITY_PERIOD = _pjsua2.PJ_SSL_CERT_EVALIDITY_PERIOD
PJ_SSL_CERT_EINVALID_FORMAT = _pjsua2.PJ_SSL_CERT_EINVALID_FORMAT
PJ_SSL_CERT_EINVALID_PURPOSE = _pjsua2.PJ_SSL_CERT_EINVALID_PURPOSE
PJ_SSL_CERT_EISSUER_MISMATCH = _pjsua2.PJ_SSL_CERT_EISSUER_MISMATCH
PJ_SSL_CERT_ECRL_FAILURE = _pjsua2.PJ_SSL_CERT_ECRL_FAILURE
PJ_SSL_CERT_EREVOKED = _pjsua2.PJ_SSL_CERT_EREVOKED
PJ_SSL_CERT_ECHAIN_TOO_LONG = _pjsua2.PJ_SSL_CERT_ECHAIN_TOO_LONG
PJ_SSL_CERT_EIDENTITY_NOT_MATCH = _pjsua2.PJ_SSL_CERT_EIDENTITY_NOT_MATCH
PJ_SSL_CERT_EUNKNOWN = _pjsua2.PJ_SSL_CERT_EUNKNOWN
PJ_STUN_NAT_TYPE_UNKNOWN = _pjsua2.PJ_STUN_NAT_TYPE_UNKNOWN
PJ_STUN_NAT_TYPE_ERR_UNKNOWN = _pjsua2.PJ_STUN_NAT_TYPE_ERR_UNKNOWN
PJ_STUN_NAT_TYPE_OPEN = _pjsua2.PJ_STUN_NAT_TYPE_OPEN
PJ_STUN_NAT_TYPE_BLOCKED = _pjsua2.PJ_STUN_NAT_TYPE_BLOCKED
PJ_STUN_NAT_TYPE_SYMMETRIC_UDP = _pjsua2.PJ_STUN_NAT_TYPE_SYMMETRIC_UDP
PJ_STUN_NAT_TYPE_FULL_CONE = _pjsua2.PJ_STUN_NAT_TYPE_FULL_CONE
PJ_STUN_NAT_TYPE_SYMMETRIC = _pjsua2.PJ_STUN_NAT_TYPE_SYMMETRIC
PJ_STUN_NAT_TYPE_RESTRICTED = _pjsua2.PJ_STUN_NAT_TYPE_RESTRICTED
PJ_STUN_NAT_TYPE_PORT_RESTRICTED = _pjsua2.PJ_STUN_NAT_TYPE_PORT_RESTRICTED
PJ_TURN_TP_UDP = _pjsua2.PJ_TURN_TP_UDP
PJ_TURN_TP_TCP = _pjsua2.PJ_TURN_TP_TCP
PJ_TURN_TP_TLS = _pjsua2.PJ_TURN_TP_TLS
PJMEDIA_ECHO_DEFAULT = _pjsua2.PJMEDIA_ECHO_DEFAULT
PJMEDIA_ECHO_SPEEX = _pjsua2.PJMEDIA_ECHO_SPEEX
PJMEDIA_ECHO_SIMPLE = _pjsua2.PJMEDIA_ECHO_SIMPLE
PJMEDIA_ECHO_WEBRTC = _pjsua2.PJMEDIA_ECHO_WEBRTC
PJMEDIA_ECHO_ALGO_MASK = _pjsua2.PJMEDIA_ECHO_ALGO_MASK
PJMEDIA_ECHO_NO_LOCK = _pjsua2.PJMEDIA_ECHO_NO_LOCK
PJMEDIA_ECHO_USE_SIMPLE_FIFO = _pjsua2.PJMEDIA_ECHO_USE_SIMPLE_FIFO
PJMEDIA_ECHO_USE_SW_ECHO = _pjsua2.PJMEDIA_ECHO_USE_SW_ECHO
PJMEDIA_ECHO_USE_NOISE_SUPPRESSOR = _pjsua2.PJMEDIA_ECHO_USE_NOISE_SUPPRESSOR
PJMEDIA_ECHO_AGGRESSIVENESS_DEFAULT = _pjsua2.PJMEDIA_ECHO_AGGRESSIVENESS_DEFAULT
PJMEDIA_ECHO_AGGRESSIVENESS_CONSERVATIVE = _pjsua2.PJMEDIA_ECHO_AGGRESSIVENESS_CONSERVATIVE
PJMEDIA_ECHO_AGGRESSIVENESS_MODERATE = _pjsua2.PJMEDIA_ECHO_AGGRESSIVENESS_MODERATE
PJMEDIA_ECHO_AGGRESSIVENESS_AGGRESSIVE = _pjsua2.PJMEDIA_ECHO_AGGRESSIVENESS_AGGRESSIVE
PJMEDIA_ECHO_AGGRESSIVENESS_MASK = _pjsua2.PJMEDIA_ECHO_AGGRESSIVENESS_MASK
PJMEDIA_EVENT_NONE = _pjsua2.PJMEDIA_EVENT_NONE
PJMEDIA_EVENT_FMT_CHANGED = _pjsua2.PJMEDIA_EVENT_FMT_CHANGED
PJMEDIA_EVENT_WND_CLOSING = _pjsua2.PJMEDIA_EVENT_WND_CLOSING
PJMEDIA_EVENT_WND_CLOSED = _pjsua2.PJMEDIA_EVENT_WND_CLOSED
PJMEDIA_EVENT_WND_RESIZED = _pjsua2.PJMEDIA_EVENT_WND_RESIZED
PJMEDIA_EVENT_MOUSE_BTN_DOWN = _pjsua2.PJMEDIA_EVENT_MOUSE_BTN_DOWN
PJMEDIA_EVENT_KEYFRAME_FOUND = _pjsua2.PJMEDIA_EVENT_KEYFRAME_FOUND
PJMEDIA_EVENT_KEYFRAME_MISSING = _pjsua2.PJMEDIA_EVENT_KEYFRAME_MISSING
PJMEDIA_EVENT_ORIENT_CHANGED = _pjsua2.PJMEDIA_EVENT_ORIENT_CHANGED
PJMEDIA_EVENT_RX_RTCP_FB = _pjsua2.PJMEDIA_EVENT_RX_RTCP_FB
PJMEDIA_EVENT_AUD_DEV_ERROR = _pjsua2.PJMEDIA_EVENT_AUD_DEV_ERROR
PJMEDIA_EVENT_VID_DEV_ERROR = _pjsua2.PJMEDIA_EVENT_VID_DEV_ERROR
PJMEDIA_EVENT_MEDIA_TP_ERR = _pjsua2.PJMEDIA_EVENT_MEDIA_TP_ERR
PJMEDIA_SRTP_DISABLED = _pjsua2.PJMEDIA_SRTP_DISABLED
PJMEDIA_SRTP_OPTIONAL = _pjsua2.PJMEDIA_SRTP_OPTIONAL
PJMEDIA_SRTP_MANDATORY = _pjsua2.PJMEDIA_SRTP_MANDATORY
PJMEDIA_SRTP_NO_ENCRYPTION = _pjsua2.PJMEDIA_SRTP_NO_ENCRYPTION
PJMEDIA_SRTP_NO_AUTHENTICATION = _pjsua2.PJMEDIA_SRTP_NO_AUTHENTICATION
PJMEDIA_SRTP_KEYING_SDES = _pjsua2.PJMEDIA_SRTP_KEYING_SDES
PJMEDIA_SRTP_KEYING_DTLS_SRTP = _pjsua2.PJMEDIA_SRTP_KEYING_DTLS_SRTP
PJMEDIA_SRTP_KEYINGS_COUNT = _pjsua2.PJMEDIA_SRTP_KEYINGS_COUNT
PJMEDIA_VID_STREAM_RC_NONE = _pjsua2.PJMEDIA_VID_STREAM_RC_NONE
PJMEDIA_VID_STREAM_RC_SIMPLE_BLOCKING = _pjsua2.PJMEDIA_VID_STREAM_RC_SIMPLE_BLOCKING
PJMEDIA_VID_DEFAULT_CAPTURE_DEV = _pjsua2.PJMEDIA_VID_DEFAULT_CAPTURE_DEV
PJMEDIA_VID_DEFAULT_RENDER_DEV = _pjsua2.PJMEDIA_VID_DEFAULT_RENDER_DEV
PJMEDIA_VID_INVALID_DEV = _pjsua2.PJMEDIA_VID_INVALID_DEV
PJMEDIA_VID_DEV_CAP_FORMAT = _pjsua2.PJMEDIA_VID_DEV_CAP_FORMAT
PJMEDIA_VID_DEV_CAP_INPUT_SCALE = _pjsua2.PJMEDIA_VID_DEV_CAP_INPUT_SCALE
PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW = _pjsua2.PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW
PJMEDIA_VID_DEV_CAP_OUTPUT_RESIZE = _pjsua2.PJMEDIA_VID_DEV_CAP_OUTPUT_RESIZE
PJMEDIA_VID_DEV_CAP_OUTPUT_POSITION = _pjsua2.PJMEDIA_VID_DEV_CAP_OUTPUT_POSITION
PJMEDIA_VID_DEV_CAP_OUTPUT_HIDE = _pjsua2.PJMEDIA_VID_DEV_CAP_OUTPUT_HIDE
PJMEDIA_VID_DEV_CAP_INPUT_PREVIEW = _pjsua2.PJMEDIA_VID_DEV_CAP_INPUT_PREVIEW
PJMEDIA_VID_DEV_CAP_ORIENTATION = _pjsua2.PJMEDIA_VID_DEV_CAP_ORIENTATION
PJMEDIA_VID_DEV_CAP_SWITCH = _pjsua2.PJMEDIA_VID_DEV_CAP_SWITCH
PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW_FLAGS = _pjsua2.PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW_FLAGS
PJMEDIA_VID_DEV_CAP_MAX = _pjsua2.PJMEDIA_VID_DEV_CAP_MAX
PJMEDIA_AUD_DEV_ROUTE_DEFAULT = _pjsua2.PJMEDIA_AUD_DEV_ROUTE_DEFAULT
PJMEDIA_AUD_DEV_ROUTE_LOUDSPEAKER = _pjsua2.PJMEDIA_AUD_DEV_ROUTE_LOUDSPEAKER
PJMEDIA_AUD_DEV_ROUTE_EARPIECE = _pjsua2.PJMEDIA_AUD_DEV_ROUTE_EARPIECE
PJMEDIA_AUD_DEV_ROUTE_BLUETOOTH = _pjsua2.PJMEDIA_AUD_DEV_ROUTE_BLUETOOTH
PJMEDIA_AUD_DEV_ROUTE_CUSTOM = _pjsua2.PJMEDIA_AUD_DEV_ROUTE_CUSTOM
PJMEDIA_AUD_DEV_CAP_EXT_FORMAT = _pjsua2.PJMEDIA_AUD_DEV_CAP_EXT_FORMAT
PJMEDIA_AUD_DEV_CAP_INPUT_LATENCY = _pjsua2.PJMEDIA_AUD_DEV_CAP_INPUT_LATENCY
PJMEDIA_AUD_DEV_CAP_OUTPUT_LATENCY = _pjsua2.PJMEDIA_AUD_DEV_CAP_OUTPUT_LATENCY
PJMEDIA_AUD_DEV_CAP_INPUT_VOLUME_SETTING = _pjsua2.PJMEDIA_AUD_DEV_CAP_INPUT_VOLUME_SETTING
PJMEDIA_AUD_DEV_CAP_OUTPUT_VOLUME_SETTING = _pjsua2.PJMEDIA_AUD_DEV_CAP_OUTPUT_VOLUME_SETTING
PJMEDIA_AUD_DEV_CAP_INPUT_SIGNAL_METER = _pjsua2.PJMEDIA_AUD_DEV_CAP_INPUT_SIGNAL_METER
PJMEDIA_AUD_DEV_CAP_OUTPUT_SIGNAL_METER = _pjsua2.PJMEDIA_AUD_DEV_CAP_OUTPUT_SIGNAL_METER
PJMEDIA_AUD_DEV_CAP_INPUT_ROUTE = _pjsua2.PJMEDIA_AUD_DEV_CAP_INPUT_ROUTE
PJMEDIA_AUD_DEV_CAP_INPUT_SOURCE = _pjsua2.PJMEDIA_AUD_DEV_CAP_INPUT_SOURCE
PJMEDIA_AUD_DEV_CAP_OUTPUT_ROUTE = _pjsua2.PJMEDIA_AUD_DEV_CAP_OUTPUT_ROUTE
PJMEDIA_AUD_DEV_CAP_EC = _pjsua2.PJMEDIA_AUD_DEV_CAP_EC
PJMEDIA_AUD_DEV_CAP_EC_TAIL = _pjsua2.PJMEDIA_AUD_DEV_CAP_EC_TAIL
PJMEDIA_AUD_DEV_CAP_VAD = _pjsua2.PJMEDIA_AUD_DEV_CAP_VAD
PJMEDIA_AUD_DEV_CAP_CNG = _pjsua2.PJMEDIA_AUD_DEV_CAP_CNG
PJMEDIA_AUD_DEV_CAP_PLC = _pjsua2.PJMEDIA_AUD_DEV_CAP_PLC
PJMEDIA_AUD_DEV_CAP_MAX = _pjsua2.PJMEDIA_AUD_DEV_CAP_MAX
PJMEDIA_FILE_WRITE_PCM = _pjsua2.PJMEDIA_FILE_WRITE_PCM
PJMEDIA_FILE_WRITE_ALAW = _pjsua2.PJMEDIA_FILE_WRITE_ALAW
PJMEDIA_FILE_WRITE_ULAW = _pjsua2.PJMEDIA_FILE_WRITE_ULAW
PJMEDIA_FILE_NO_LOOP = _pjsua2.PJMEDIA_FILE_NO_LOOP
class pjmedia_tone_digit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pjmedia_tone_digit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pjmedia_tone_digit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["digit"] = _pjsua2.pjmedia_tone_digit_digit_set
    __swig_getmethods__["digit"] = _pjsua2.pjmedia_tone_digit_digit_get
    if _newclass:
        digit = _swig_property(_pjsua2.pjmedia_tone_digit_digit_get, _pjsua2.pjmedia_tone_digit_digit_set)
    __swig_setmethods__["on_msec"] = _pjsua2.pjmedia_tone_digit_on_msec_set
    __swig_getmethods__["on_msec"] = _pjsua2.pjmedia_tone_digit_on_msec_get
    if _newclass:
        on_msec = _swig_property(_pjsua2.pjmedia_tone_digit_on_msec_get, _pjsua2.pjmedia_tone_digit_on_msec_set)
    __swig_setmethods__["off_msec"] = _pjsua2.pjmedia_tone_digit_off_msec_set
    __swig_getmethods__["off_msec"] = _pjsua2.pjmedia_tone_digit_off_msec_get
    if _newclass:
        off_msec = _swig_property(_pjsua2.pjmedia_tone_digit_off_msec_get, _pjsua2.pjmedia_tone_digit_off_msec_set)
    __swig_setmethods__["volume"] = _pjsua2.pjmedia_tone_digit_volume_set
    __swig_getmethods__["volume"] = _pjsua2.pjmedia_tone_digit_volume_get
    if _newclass:
        volume = _swig_property(_pjsua2.pjmedia_tone_digit_volume_get, _pjsua2.pjmedia_tone_digit_volume_set)

    def __init__(self):
        this = _pjsua2.new_pjmedia_tone_digit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_pjmedia_tone_digit
    __del__ = lambda self: None
pjmedia_tone_digit_swigregister = _pjsua2.pjmedia_tone_digit_swigregister
pjmedia_tone_digit_swigregister(pjmedia_tone_digit)

class pjmedia_tone_digit_map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pjmedia_tone_digit_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pjmedia_tone_digit_map, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _pjsua2.pjmedia_tone_digit_map_count_set
    __swig_getmethods__["count"] = _pjsua2.pjmedia_tone_digit_map_count_get
    if _newclass:
        count = _swig_property(_pjsua2.pjmedia_tone_digit_map_count_get, _pjsua2.pjmedia_tone_digit_map_count_set)

    def __init__(self):
        this = _pjsua2.new_pjmedia_tone_digit_map()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_pjmedia_tone_digit_map
    __del__ = lambda self: None
pjmedia_tone_digit_map_swigregister = _pjsua2.pjmedia_tone_digit_map_swigregister
pjmedia_tone_digit_map_swigregister(pjmedia_tone_digit_map)

class pjmedia_tone_desc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pjmedia_tone_desc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pjmedia_tone_desc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["freq1"] = _pjsua2.pjmedia_tone_desc_freq1_set
    __swig_getmethods__["freq1"] = _pjsua2.pjmedia_tone_desc_freq1_get
    if _newclass:
        freq1 = _swig_property(_pjsua2.pjmedia_tone_desc_freq1_get, _pjsua2.pjmedia_tone_desc_freq1_set)
    __swig_setmethods__["freq2"] = _pjsua2.pjmedia_tone_desc_freq2_set
    __swig_getmethods__["freq2"] = _pjsua2.pjmedia_tone_desc_freq2_get
    if _newclass:
        freq2 = _swig_property(_pjsua2.pjmedia_tone_desc_freq2_get, _pjsua2.pjmedia_tone_desc_freq2_set)
    __swig_setmethods__["on_msec"] = _pjsua2.pjmedia_tone_desc_on_msec_set
    __swig_getmethods__["on_msec"] = _pjsua2.pjmedia_tone_desc_on_msec_get
    if _newclass:
        on_msec = _swig_property(_pjsua2.pjmedia_tone_desc_on_msec_get, _pjsua2.pjmedia_tone_desc_on_msec_set)
    __swig_setmethods__["off_msec"] = _pjsua2.pjmedia_tone_desc_off_msec_set
    __swig_getmethods__["off_msec"] = _pjsua2.pjmedia_tone_desc_off_msec_get
    if _newclass:
        off_msec = _swig_property(_pjsua2.pjmedia_tone_desc_off_msec_get, _pjsua2.pjmedia_tone_desc_off_msec_set)
    __swig_setmethods__["volume"] = _pjsua2.pjmedia_tone_desc_volume_set
    __swig_getmethods__["volume"] = _pjsua2.pjmedia_tone_desc_volume_get
    if _newclass:
        volume = _swig_property(_pjsua2.pjmedia_tone_desc_volume_get, _pjsua2.pjmedia_tone_desc_volume_set)
    __swig_setmethods__["flags"] = _pjsua2.pjmedia_tone_desc_flags_set
    __swig_getmethods__["flags"] = _pjsua2.pjmedia_tone_desc_flags_get
    if _newclass:
        flags = _swig_property(_pjsua2.pjmedia_tone_desc_flags_get, _pjsua2.pjmedia_tone_desc_flags_set)

    def __init__(self):
        this = _pjsua2.new_pjmedia_tone_desc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_pjmedia_tone_desc
    __del__ = lambda self: None
pjmedia_tone_desc_swigregister = _pjsua2.pjmedia_tone_desc_swigregister
pjmedia_tone_desc_swigregister(pjmedia_tone_desc)

PJMEDIA_TYPE_NONE = _pjsua2.PJMEDIA_TYPE_NONE
PJMEDIA_TYPE_AUDIO = _pjsua2.PJMEDIA_TYPE_AUDIO
PJMEDIA_TYPE_VIDEO = _pjsua2.PJMEDIA_TYPE_VIDEO
PJMEDIA_TYPE_APPLICATION = _pjsua2.PJMEDIA_TYPE_APPLICATION
PJMEDIA_TYPE_UNKNOWN = _pjsua2.PJMEDIA_TYPE_UNKNOWN
PJMEDIA_DIR_NONE = _pjsua2.PJMEDIA_DIR_NONE
PJMEDIA_DIR_ENCODING = _pjsua2.PJMEDIA_DIR_ENCODING
PJMEDIA_DIR_CAPTURE = _pjsua2.PJMEDIA_DIR_CAPTURE
PJMEDIA_DIR_DECODING = _pjsua2.PJMEDIA_DIR_DECODING
PJMEDIA_DIR_PLAYBACK = _pjsua2.PJMEDIA_DIR_PLAYBACK
PJMEDIA_DIR_RENDER = _pjsua2.PJMEDIA_DIR_RENDER
PJMEDIA_DIR_ENCODING_DECODING = _pjsua2.PJMEDIA_DIR_ENCODING_DECODING
PJMEDIA_DIR_CAPTURE_PLAYBACK = _pjsua2.PJMEDIA_DIR_CAPTURE_PLAYBACK
PJMEDIA_DIR_CAPTURE_RENDER = _pjsua2.PJMEDIA_DIR_CAPTURE_RENDER
PJMEDIA_TP_PROTO_NONE = _pjsua2.PJMEDIA_TP_PROTO_NONE
PJMEDIA_TP_PROTO_UNKNOWN = _pjsua2.PJMEDIA_TP_PROTO_UNKNOWN
PJMEDIA_TP_PROTO_UDP = _pjsua2.PJMEDIA_TP_PROTO_UDP
PJMEDIA_TP_PROTO_RTP = _pjsua2.PJMEDIA_TP_PROTO_RTP
PJMEDIA_TP_PROTO_DTLS = _pjsua2.PJMEDIA_TP_PROTO_DTLS
PJMEDIA_TP_PROFILE_RTCP_FB = _pjsua2.PJMEDIA_TP_PROFILE_RTCP_FB
PJMEDIA_TP_PROFILE_SRTP = _pjsua2.PJMEDIA_TP_PROFILE_SRTP
PJMEDIA_TP_PROFILE_AVP = _pjsua2.PJMEDIA_TP_PROFILE_AVP
PJMEDIA_TP_PROTO_RTP_AVP = _pjsua2.PJMEDIA_TP_PROTO_RTP_AVP
PJMEDIA_TP_PROTO_RTP_SAVP = _pjsua2.PJMEDIA_TP_PROTO_RTP_SAVP
PJMEDIA_TP_PROTO_DTLS_SRTP = _pjsua2.PJMEDIA_TP_PROTO_DTLS_SRTP
PJMEDIA_TP_PROTO_RTP_AVPF = _pjsua2.PJMEDIA_TP_PROTO_RTP_AVPF
PJMEDIA_TP_PROTO_RTP_SAVPF = _pjsua2.PJMEDIA_TP_PROTO_RTP_SAVPF
PJMEDIA_TP_PROTO_DTLS_SRTPF = _pjsua2.PJMEDIA_TP_PROTO_DTLS_SRTPF
PJMEDIA_ORIENT_UNKNOWN = _pjsua2.PJMEDIA_ORIENT_UNKNOWN
PJMEDIA_ORIENT_NATURAL = _pjsua2.PJMEDIA_ORIENT_NATURAL
PJMEDIA_ORIENT_ROTATE_90DEG = _pjsua2.PJMEDIA_ORIENT_ROTATE_90DEG
PJMEDIA_ORIENT_ROTATE_180DEG = _pjsua2.PJMEDIA_ORIENT_ROTATE_180DEG
PJMEDIA_ORIENT_ROTATE_270DEG = _pjsua2.PJMEDIA_ORIENT_ROTATE_270DEG
PJMEDIA_FORMAT_L16 = _pjsua2.PJMEDIA_FORMAT_L16
PJMEDIA_FORMAT_PCM = _pjsua2.PJMEDIA_FORMAT_PCM
PJMEDIA_FORMAT_PCMA = _pjsua2.PJMEDIA_FORMAT_PCMA
PJMEDIA_FORMAT_ALAW = _pjsua2.PJMEDIA_FORMAT_ALAW
PJMEDIA_FORMAT_PCMU = _pjsua2.PJMEDIA_FORMAT_PCMU
PJMEDIA_FORMAT_ULAW = _pjsua2.PJMEDIA_FORMAT_ULAW
PJMEDIA_FORMAT_AMR = _pjsua2.PJMEDIA_FORMAT_AMR
PJMEDIA_FORMAT_G729 = _pjsua2.PJMEDIA_FORMAT_G729
PJMEDIA_FORMAT_ILBC = _pjsua2.PJMEDIA_FORMAT_ILBC
PJMEDIA_FORMAT_RGB24 = _pjsua2.PJMEDIA_FORMAT_RGB24
PJMEDIA_FORMAT_RGBA = _pjsua2.PJMEDIA_FORMAT_RGBA
PJMEDIA_FORMAT_BGRA = _pjsua2.PJMEDIA_FORMAT_BGRA
PJMEDIA_FORMAT_RGB32 = _pjsua2.PJMEDIA_FORMAT_RGB32
PJMEDIA_FORMAT_DIB = _pjsua2.PJMEDIA_FORMAT_DIB
PJMEDIA_FORMAT_GBRP = _pjsua2.PJMEDIA_FORMAT_GBRP
PJMEDIA_FORMAT_AYUV = _pjsua2.PJMEDIA_FORMAT_AYUV
PJMEDIA_FORMAT_YUY2 = _pjsua2.PJMEDIA_FORMAT_YUY2
PJMEDIA_FORMAT_UYVY = _pjsua2.PJMEDIA_FORMAT_UYVY
PJMEDIA_FORMAT_YVYU = _pjsua2.PJMEDIA_FORMAT_YVYU
PJMEDIA_FORMAT_I420 = _pjsua2.PJMEDIA_FORMAT_I420
PJMEDIA_FORMAT_IYUV = _pjsua2.PJMEDIA_FORMAT_IYUV
PJMEDIA_FORMAT_YV12 = _pjsua2.PJMEDIA_FORMAT_YV12
PJMEDIA_FORMAT_NV21 = _pjsua2.PJMEDIA_FORMAT_NV21
PJMEDIA_FORMAT_I422 = _pjsua2.PJMEDIA_FORMAT_I422
PJMEDIA_FORMAT_I420JPEG = _pjsua2.PJMEDIA_FORMAT_I420JPEG
PJMEDIA_FORMAT_I422JPEG = _pjsua2.PJMEDIA_FORMAT_I422JPEG
PJMEDIA_FORMAT_H261 = _pjsua2.PJMEDIA_FORMAT_H261
PJMEDIA_FORMAT_H263 = _pjsua2.PJMEDIA_FORMAT_H263
PJMEDIA_FORMAT_H263P = _pjsua2.PJMEDIA_FORMAT_H263P
PJMEDIA_FORMAT_H264 = _pjsua2.PJMEDIA_FORMAT_H264
PJMEDIA_FORMAT_MJPEG = _pjsua2.PJMEDIA_FORMAT_MJPEG
PJMEDIA_FORMAT_MPEG1VIDEO = _pjsua2.PJMEDIA_FORMAT_MPEG1VIDEO
PJMEDIA_FORMAT_MPEG2VIDEO = _pjsua2.PJMEDIA_FORMAT_MPEG2VIDEO
PJMEDIA_FORMAT_MPEG4 = _pjsua2.PJMEDIA_FORMAT_MPEG4
PJMEDIA_VID_PACKING_UNKNOWN = _pjsua2.PJMEDIA_VID_PACKING_UNKNOWN
PJMEDIA_VID_PACKING_PACKETS = _pjsua2.PJMEDIA_VID_PACKING_PACKETS
PJMEDIA_VID_PACKING_WHOLE = _pjsua2.PJMEDIA_VID_PACKING_WHOLE
PJMEDIA_RTCP_FB_ACK = _pjsua2.PJMEDIA_RTCP_FB_ACK
PJMEDIA_RTCP_FB_NACK = _pjsua2.PJMEDIA_RTCP_FB_NACK
PJMEDIA_RTCP_FB_TRR_INT = _pjsua2.PJMEDIA_RTCP_FB_TRR_INT
PJMEDIA_RTCP_FB_OTHER = _pjsua2.PJMEDIA_RTCP_FB_OTHER
PJSIP_CRED_DATA_PLAIN_PASSWD = _pjsua2.PJSIP_CRED_DATA_PLAIN_PASSWD
PJSIP_CRED_DATA_DIGEST = _pjsua2.PJSIP_CRED_DATA_DIGEST
PJSIP_CRED_DATA_EXT_AKA = _pjsua2.PJSIP_CRED_DATA_EXT_AKA
PJSIP_DIALOG_CAP_UNSUPPORTED = _pjsua2.PJSIP_DIALOG_CAP_UNSUPPORTED
PJSIP_DIALOG_CAP_SUPPORTED = _pjsua2.PJSIP_DIALOG_CAP_SUPPORTED
PJSIP_DIALOG_CAP_UNKNOWN = _pjsua2.PJSIP_DIALOG_CAP_UNKNOWN
PJSIP_EVENT_UNKNOWN = _pjsua2.PJSIP_EVENT_UNKNOWN
PJSIP_EVENT_TIMER = _pjsua2.PJSIP_EVENT_TIMER
PJSIP_EVENT_TX_MSG = _pjsua2.PJSIP_EVENT_TX_MSG
PJSIP_EVENT_RX_MSG = _pjsua2.PJSIP_EVENT_RX_MSG
PJSIP_EVENT_TRANSPORT_ERROR = _pjsua2.PJSIP_EVENT_TRANSPORT_ERROR
PJSIP_EVENT_TSX_STATE = _pjsua2.PJSIP_EVENT_TSX_STATE
PJSIP_EVENT_USER = _pjsua2.PJSIP_EVENT_USER
PJSIP_SC_NULL = _pjsua2.PJSIP_SC_NULL
PJSIP_SC_TRYING = _pjsua2.PJSIP_SC_TRYING
PJSIP_SC_RINGING = _pjsua2.PJSIP_SC_RINGING
PJSIP_SC_CALL_BEING_FORWARDED = _pjsua2.PJSIP_SC_CALL_BEING_FORWARDED
PJSIP_SC_QUEUED = _pjsua2.PJSIP_SC_QUEUED
PJSIP_SC_PROGRESS = _pjsua2.PJSIP_SC_PROGRESS
PJSIP_SC_OK = _pjsua2.PJSIP_SC_OK
PJSIP_SC_ACCEPTED = _pjsua2.PJSIP_SC_ACCEPTED
PJSIP_SC_MULTIPLE_CHOICES = _pjsua2.PJSIP_SC_MULTIPLE_CHOICES
PJSIP_SC_MOVED_PERMANENTLY = _pjsua2.PJSIP_SC_MOVED_PERMANENTLY
PJSIP_SC_MOVED_TEMPORARILY = _pjsua2.PJSIP_SC_MOVED_TEMPORARILY
PJSIP_SC_USE_PROXY = _pjsua2.PJSIP_SC_USE_PROXY
PJSIP_SC_ALTERNATIVE_SERVICE = _pjsua2.PJSIP_SC_ALTERNATIVE_SERVICE
PJSIP_SC_BAD_REQUEST = _pjsua2.PJSIP_SC_BAD_REQUEST
PJSIP_SC_UNAUTHORIZED = _pjsua2.PJSIP_SC_UNAUTHORIZED
PJSIP_SC_PAYMENT_REQUIRED = _pjsua2.PJSIP_SC_PAYMENT_REQUIRED
PJSIP_SC_FORBIDDEN = _pjsua2.PJSIP_SC_FORBIDDEN
PJSIP_SC_NOT_FOUND = _pjsua2.PJSIP_SC_NOT_FOUND
PJSIP_SC_METHOD_NOT_ALLOWED = _pjsua2.PJSIP_SC_METHOD_NOT_ALLOWED
PJSIP_SC_NOT_ACCEPTABLE = _pjsua2.PJSIP_SC_NOT_ACCEPTABLE
PJSIP_SC_PROXY_AUTHENTICATION_REQUIRED = _pjsua2.PJSIP_SC_PROXY_AUTHENTICATION_REQUIRED
PJSIP_SC_REQUEST_TIMEOUT = _pjsua2.PJSIP_SC_REQUEST_TIMEOUT
PJSIP_SC_GONE = _pjsua2.PJSIP_SC_GONE
PJSIP_SC_REQUEST_ENTITY_TOO_LARGE = _pjsua2.PJSIP_SC_REQUEST_ENTITY_TOO_LARGE
PJSIP_SC_REQUEST_URI_TOO_LONG = _pjsua2.PJSIP_SC_REQUEST_URI_TOO_LONG
PJSIP_SC_UNSUPPORTED_MEDIA_TYPE = _pjsua2.PJSIP_SC_UNSUPPORTED_MEDIA_TYPE
PJSIP_SC_UNSUPPORTED_URI_SCHEME = _pjsua2.PJSIP_SC_UNSUPPORTED_URI_SCHEME
PJSIP_SC_BAD_EXTENSION = _pjsua2.PJSIP_SC_BAD_EXTENSION
PJSIP_SC_EXTENSION_REQUIRED = _pjsua2.PJSIP_SC_EXTENSION_REQUIRED
PJSIP_SC_SESSION_TIMER_TOO_SMALL = _pjsua2.PJSIP_SC_SESSION_TIMER_TOO_SMALL
PJSIP_SC_INTERVAL_TOO_BRIEF = _pjsua2.PJSIP_SC_INTERVAL_TOO_BRIEF
PJSIP_SC_TEMPORARILY_UNAVAILABLE = _pjsua2.PJSIP_SC_TEMPORARILY_UNAVAILABLE
PJSIP_SC_CALL_TSX_DOES_NOT_EXIST = _pjsua2.PJSIP_SC_CALL_TSX_DOES_NOT_EXIST
PJSIP_SC_LOOP_DETECTED = _pjsua2.PJSIP_SC_LOOP_DETECTED
PJSIP_SC_TOO_MANY_HOPS = _pjsua2.PJSIP_SC_TOO_MANY_HOPS
PJSIP_SC_ADDRESS_INCOMPLETE = _pjsua2.PJSIP_SC_ADDRESS_INCOMPLETE
PJSIP_AC_AMBIGUOUS = _pjsua2.PJSIP_AC_AMBIGUOUS
PJSIP_SC_BUSY_HERE = _pjsua2.PJSIP_SC_BUSY_HERE
PJSIP_SC_REQUEST_TERMINATED = _pjsua2.PJSIP_SC_REQUEST_TERMINATED
PJSIP_SC_NOT_ACCEPTABLE_HERE = _pjsua2.PJSIP_SC_NOT_ACCEPTABLE_HERE
PJSIP_SC_BAD_EVENT = _pjsua2.PJSIP_SC_BAD_EVENT
PJSIP_SC_REQUEST_UPDATED = _pjsua2.PJSIP_SC_REQUEST_UPDATED
PJSIP_SC_REQUEST_PENDING = _pjsua2.PJSIP_SC_REQUEST_PENDING
PJSIP_SC_UNDECIPHERABLE = _pjsua2.PJSIP_SC_UNDECIPHERABLE
PJSIP_SC_INTERNAL_SERVER_ERROR = _pjsua2.PJSIP_SC_INTERNAL_SERVER_ERROR
PJSIP_SC_NOT_IMPLEMENTED = _pjsua2.PJSIP_SC_NOT_IMPLEMENTED
PJSIP_SC_BAD_GATEWAY = _pjsua2.PJSIP_SC_BAD_GATEWAY
PJSIP_SC_SERVICE_UNAVAILABLE = _pjsua2.PJSIP_SC_SERVICE_UNAVAILABLE
PJSIP_SC_SERVER_TIMEOUT = _pjsua2.PJSIP_SC_SERVER_TIMEOUT
PJSIP_SC_VERSION_NOT_SUPPORTED = _pjsua2.PJSIP_SC_VERSION_NOT_SUPPORTED
PJSIP_SC_MESSAGE_TOO_LARGE = _pjsua2.PJSIP_SC_MESSAGE_TOO_LARGE
PJSIP_SC_PRECONDITION_FAILURE = _pjsua2.PJSIP_SC_PRECONDITION_FAILURE
PJSIP_SC_BUSY_EVERYWHERE = _pjsua2.PJSIP_SC_BUSY_EVERYWHERE
PJSIP_SC_DECLINE = _pjsua2.PJSIP_SC_DECLINE
PJSIP_SC_DOES_NOT_EXIST_ANYWHERE = _pjsua2.PJSIP_SC_DOES_NOT_EXIST_ANYWHERE
PJSIP_SC_NOT_ACCEPTABLE_ANYWHERE = _pjsua2.PJSIP_SC_NOT_ACCEPTABLE_ANYWHERE
PJSIP_SC_TSX_TIMEOUT = _pjsua2.PJSIP_SC_TSX_TIMEOUT
PJSIP_SC_TSX_TRANSPORT_ERROR = _pjsua2.PJSIP_SC_TSX_TRANSPORT_ERROR
PJSIP_SC__force_32bit = _pjsua2.PJSIP_SC__force_32bit
PJSIP_H_ACCEPT = _pjsua2.PJSIP_H_ACCEPT
PJSIP_H_ACCEPT_ENCODING_UNIMP = _pjsua2.PJSIP_H_ACCEPT_ENCODING_UNIMP
PJSIP_H_ACCEPT_LANGUAGE_UNIMP = _pjsua2.PJSIP_H_ACCEPT_LANGUAGE_UNIMP
PJSIP_H_ALERT_INFO_UNIMP = _pjsua2.PJSIP_H_ALERT_INFO_UNIMP
PJSIP_H_ALLOW = _pjsua2.PJSIP_H_ALLOW
PJSIP_H_AUTHENTICATION_INFO_UNIMP = _pjsua2.PJSIP_H_AUTHENTICATION_INFO_UNIMP
PJSIP_H_AUTHORIZATION = _pjsua2.PJSIP_H_AUTHORIZATION
PJSIP_H_CALL_ID = _pjsua2.PJSIP_H_CALL_ID
PJSIP_H_CALL_INFO_UNIMP = _pjsua2.PJSIP_H_CALL_INFO_UNIMP
PJSIP_H_CONTACT = _pjsua2.PJSIP_H_CONTACT
PJSIP_H_CONTENT_DISPOSITION_UNIMP = _pjsua2.PJSIP_H_CONTENT_DISPOSITION_UNIMP
PJSIP_H_CONTENT_ENCODING_UNIMP = _pjsua2.PJSIP_H_CONTENT_ENCODING_UNIMP
PJSIP_H_CONTENT_LANGUAGE_UNIMP = _pjsua2.PJSIP_H_CONTENT_LANGUAGE_UNIMP
PJSIP_H_CONTENT_LENGTH = _pjsua2.PJSIP_H_CONTENT_LENGTH
PJSIP_H_CONTENT_TYPE = _pjsua2.PJSIP_H_CONTENT_TYPE
PJSIP_H_CSEQ = _pjsua2.PJSIP_H_CSEQ
PJSIP_H_DATE_UNIMP = _pjsua2.PJSIP_H_DATE_UNIMP
PJSIP_H_ERROR_INFO_UNIMP = _pjsua2.PJSIP_H_ERROR_INFO_UNIMP
PJSIP_H_EXPIRES = _pjsua2.PJSIP_H_EXPIRES
PJSIP_H_FROM = _pjsua2.PJSIP_H_FROM
PJSIP_H_IN_REPLY_TO_UNIMP = _pjsua2.PJSIP_H_IN_REPLY_TO_UNIMP
PJSIP_H_MAX_FORWARDS = _pjsua2.PJSIP_H_MAX_FORWARDS
PJSIP_H_MIME_VERSION_UNIMP = _pjsua2.PJSIP_H_MIME_VERSION_UNIMP
PJSIP_H_MIN_EXPIRES = _pjsua2.PJSIP_H_MIN_EXPIRES
PJSIP_H_ORGANIZATION_UNIMP = _pjsua2.PJSIP_H_ORGANIZATION_UNIMP
PJSIP_H_PRIORITY_UNIMP = _pjsua2.PJSIP_H_PRIORITY_UNIMP
PJSIP_H_PROXY_AUTHENTICATE = _pjsua2.PJSIP_H_PROXY_AUTHENTICATE
PJSIP_H_PROXY_AUTHORIZATION = _pjsua2.PJSIP_H_PROXY_AUTHORIZATION
PJSIP_H_PROXY_REQUIRE_UNIMP = _pjsua2.PJSIP_H_PROXY_REQUIRE_UNIMP
PJSIP_H_RECORD_ROUTE = _pjsua2.PJSIP_H_RECORD_ROUTE
PJSIP_H_REPLY_TO_UNIMP = _pjsua2.PJSIP_H_REPLY_TO_UNIMP
PJSIP_H_REQUIRE = _pjsua2.PJSIP_H_REQUIRE
PJSIP_H_RETRY_AFTER = _pjsua2.PJSIP_H_RETRY_AFTER
PJSIP_H_ROUTE = _pjsua2.PJSIP_H_ROUTE
PJSIP_H_SERVER_UNIMP = _pjsua2.PJSIP_H_SERVER_UNIMP
PJSIP_H_SUBJECT_UNIMP = _pjsua2.PJSIP_H_SUBJECT_UNIMP
PJSIP_H_SUPPORTED = _pjsua2.PJSIP_H_SUPPORTED
PJSIP_H_TIMESTAMP_UNIMP = _pjsua2.PJSIP_H_TIMESTAMP_UNIMP
PJSIP_H_TO = _pjsua2.PJSIP_H_TO
PJSIP_H_UNSUPPORTED = _pjsua2.PJSIP_H_UNSUPPORTED
PJSIP_H_USER_AGENT_UNIMP = _pjsua2.PJSIP_H_USER_AGENT_UNIMP
PJSIP_H_VIA = _pjsua2.PJSIP_H_VIA
PJSIP_H_WARNING_UNIMP = _pjsua2.PJSIP_H_WARNING_UNIMP
PJSIP_H_WWW_AUTHENTICATE = _pjsua2.PJSIP_H_WWW_AUTHENTICATE
PJSIP_H_OTHER = _pjsua2.PJSIP_H_OTHER
PJSIP_TRANSPORT_UNSPECIFIED = _pjsua2.PJSIP_TRANSPORT_UNSPECIFIED
PJSIP_TRANSPORT_UDP = _pjsua2.PJSIP_TRANSPORT_UDP
PJSIP_TRANSPORT_TCP = _pjsua2.PJSIP_TRANSPORT_TCP
PJSIP_TRANSPORT_TLS = _pjsua2.PJSIP_TRANSPORT_TLS
PJSIP_TRANSPORT_SCTP = _pjsua2.PJSIP_TRANSPORT_SCTP
PJSIP_TRANSPORT_LOOP = _pjsua2.PJSIP_TRANSPORT_LOOP
PJSIP_TRANSPORT_LOOP_DGRAM = _pjsua2.PJSIP_TRANSPORT_LOOP_DGRAM
PJSIP_TRANSPORT_START_OTHER = _pjsua2.PJSIP_TRANSPORT_START_OTHER
PJSIP_TRANSPORT_IPV6 = _pjsua2.PJSIP_TRANSPORT_IPV6
PJSIP_TRANSPORT_UDP6 = _pjsua2.PJSIP_TRANSPORT_UDP6
PJSIP_TRANSPORT_TCP6 = _pjsua2.PJSIP_TRANSPORT_TCP6
PJSIP_TRANSPORT_TLS6 = _pjsua2.PJSIP_TRANSPORT_TLS6
PJSIP_TRANSPORT_RELIABLE = _pjsua2.PJSIP_TRANSPORT_RELIABLE
PJSIP_TRANSPORT_SECURE = _pjsua2.PJSIP_TRANSPORT_SECURE
PJSIP_TRANSPORT_DATAGRAM = _pjsua2.PJSIP_TRANSPORT_DATAGRAM
PJSIP_TP_STATE_CONNECTED = _pjsua2.PJSIP_TP_STATE_CONNECTED
PJSIP_TP_STATE_DISCONNECTED = _pjsua2.PJSIP_TP_STATE_DISCONNECTED
PJSIP_TP_STATE_SHUTDOWN = _pjsua2.PJSIP_TP_STATE_SHUTDOWN
PJSIP_TP_STATE_DESTROY = _pjsua2.PJSIP_TP_STATE_DESTROY
PJSIP_SSL_UNSPECIFIED_METHOD = _pjsua2.PJSIP_SSL_UNSPECIFIED_METHOD
PJSIP_SSLV2_METHOD = _pjsua2.PJSIP_SSLV2_METHOD
PJSIP_SSLV3_METHOD = _pjsua2.PJSIP_SSLV3_METHOD
PJSIP_TLSV1_METHOD = _pjsua2.PJSIP_TLSV1_METHOD
PJSIP_TLSV1_1_METHOD = _pjsua2.PJSIP_TLSV1_1_METHOD
PJSIP_TLSV1_2_METHOD = _pjsua2.PJSIP_TLSV1_2_METHOD
PJSIP_SSLV23_METHOD = _pjsua2.PJSIP_SSLV23_METHOD
PJSIP_TSX_STATE_NULL = _pjsua2.PJSIP_TSX_STATE_NULL
PJSIP_TSX_STATE_CALLING = _pjsua2.PJSIP_TSX_STATE_CALLING
PJSIP_TSX_STATE_TRYING = _pjsua2.PJSIP_TSX_STATE_TRYING
PJSIP_TSX_STATE_PROCEEDING = _pjsua2.PJSIP_TSX_STATE_PROCEEDING
PJSIP_TSX_STATE_COMPLETED = _pjsua2.PJSIP_TSX_STATE_COMPLETED
PJSIP_TSX_STATE_CONFIRMED = _pjsua2.PJSIP_TSX_STATE_CONFIRMED
PJSIP_TSX_STATE_TERMINATED = _pjsua2.PJSIP_TSX_STATE_TERMINATED
PJSIP_TSX_STATE_DESTROYED = _pjsua2.PJSIP_TSX_STATE_DESTROYED
PJSIP_TSX_STATE_MAX = _pjsua2.PJSIP_TSX_STATE_MAX
PJSIP_ROLE_UAC = _pjsua2.PJSIP_ROLE_UAC
PJSIP_ROLE_UAS = _pjsua2.PJSIP_ROLE_UAS
PJSIP_UAC_ROLE = _pjsua2.PJSIP_UAC_ROLE
PJSIP_UAS_ROLE = _pjsua2.PJSIP_UAS_ROLE
PJSIP_REDIRECT_REJECT = _pjsua2.PJSIP_REDIRECT_REJECT
PJSIP_REDIRECT_ACCEPT = _pjsua2.PJSIP_REDIRECT_ACCEPT
PJSIP_REDIRECT_ACCEPT_REPLACE = _pjsua2.PJSIP_REDIRECT_ACCEPT_REPLACE
PJSIP_REDIRECT_PENDING = _pjsua2.PJSIP_REDIRECT_PENDING
PJSIP_REDIRECT_STOP = _pjsua2.PJSIP_REDIRECT_STOP
PJRPID_ACTIVITY_UNKNOWN = _pjsua2.PJRPID_ACTIVITY_UNKNOWN
PJRPID_ACTIVITY_AWAY = _pjsua2.PJRPID_ACTIVITY_AWAY
PJRPID_ACTIVITY_BUSY = _pjsua2.PJRPID_ACTIVITY_BUSY
PJSIP_EVSUB_STATE_NULL = _pjsua2.PJSIP_EVSUB_STATE_NULL
PJSIP_EVSUB_STATE_SENT = _pjsua2.PJSIP_EVSUB_STATE_SENT
PJSIP_EVSUB_STATE_ACCEPTED = _pjsua2.PJSIP_EVSUB_STATE_ACCEPTED
PJSIP_EVSUB_STATE_PENDING = _pjsua2.PJSIP_EVSUB_STATE_PENDING
PJSIP_EVSUB_STATE_ACTIVE = _pjsua2.PJSIP_EVSUB_STATE_ACTIVE
PJSIP_EVSUB_STATE_TERMINATED = _pjsua2.PJSIP_EVSUB_STATE_TERMINATED
PJSIP_EVSUB_STATE_UNKNOWN = _pjsua2.PJSIP_EVSUB_STATE_UNKNOWN
PJSIP_INV_STATE_NULL = _pjsua2.PJSIP_INV_STATE_NULL
PJSIP_INV_STATE_CALLING = _pjsua2.PJSIP_INV_STATE_CALLING
PJSIP_INV_STATE_INCOMING = _pjsua2.PJSIP_INV_STATE_INCOMING
PJSIP_INV_STATE_EARLY = _pjsua2.PJSIP_INV_STATE_EARLY
PJSIP_INV_STATE_CONNECTING = _pjsua2.PJSIP_INV_STATE_CONNECTING
PJSIP_INV_STATE_CONFIRMED = _pjsua2.PJSIP_INV_STATE_CONFIRMED
PJSIP_INV_STATE_DISCONNECTED = _pjsua2.PJSIP_INV_STATE_DISCONNECTED
PJSUA_INVALID_ID = _pjsua2.PJSUA_INVALID_ID
PJSUA_STATE_NULL = _pjsua2.PJSUA_STATE_NULL
PJSUA_STATE_CREATED = _pjsua2.PJSUA_STATE_CREATED
PJSUA_STATE_INIT = _pjsua2.PJSUA_STATE_INIT
PJSUA_STATE_STARTING = _pjsua2.PJSUA_STATE_STARTING
PJSUA_STATE_RUNNING = _pjsua2.PJSUA_STATE_RUNNING
PJSUA_STATE_CLOSING = _pjsua2.PJSUA_STATE_CLOSING
PJSUA_STUN_USE_DEFAULT = _pjsua2.PJSUA_STUN_USE_DEFAULT
PJSUA_STUN_USE_DISABLED = _pjsua2.PJSUA_STUN_USE_DISABLED
PJSUA_STUN_RETRY_ON_FAILURE = _pjsua2.PJSUA_STUN_RETRY_ON_FAILURE
PJSUA_CALL_HOLD_TYPE_RFC3264 = _pjsua2.PJSUA_CALL_HOLD_TYPE_RFC3264
PJSUA_CALL_HOLD_TYPE_RFC2543 = _pjsua2.PJSUA_CALL_HOLD_TYPE_RFC2543
PJSUA_DESTROY_NO_RX_MSG = _pjsua2.PJSUA_DESTROY_NO_RX_MSG
PJSUA_DESTROY_NO_TX_MSG = _pjsua2.PJSUA_DESTROY_NO_TX_MSG
PJSUA_DESTROY_NO_NETWORK = _pjsua2.PJSUA_DESTROY_NO_NETWORK
PJSUA_100REL_NOT_USED = _pjsua2.PJSUA_100REL_NOT_USED
PJSUA_100REL_MANDATORY = _pjsua2.PJSUA_100REL_MANDATORY
PJSUA_100REL_OPTIONAL = _pjsua2.PJSUA_100REL_OPTIONAL
PJSUA_SIP_TIMER_INACTIVE = _pjsua2.PJSUA_SIP_TIMER_INACTIVE
PJSUA_SIP_TIMER_OPTIONAL = _pjsua2.PJSUA_SIP_TIMER_OPTIONAL
PJSUA_SIP_TIMER_REQUIRED = _pjsua2.PJSUA_SIP_TIMER_REQUIRED
PJSUA_SIP_TIMER_ALWAYS = _pjsua2.PJSUA_SIP_TIMER_ALWAYS
PJSUA_IPV6_DISABLED = _pjsua2.PJSUA_IPV6_DISABLED
PJSUA_IPV6_ENABLED = _pjsua2.PJSUA_IPV6_ENABLED
PJSUA_NAT64_DISABLED = _pjsua2.PJSUA_NAT64_DISABLED
PJSUA_NAT64_ENABLED = _pjsua2.PJSUA_NAT64_ENABLED
PJSUA_BUDDY_STATUS_UNKNOWN = _pjsua2.PJSUA_BUDDY_STATUS_UNKNOWN
PJSUA_BUDDY_STATUS_ONLINE = _pjsua2.PJSUA_BUDDY_STATUS_ONLINE
PJSUA_BUDDY_STATUS_OFFLINE = _pjsua2.PJSUA_BUDDY_STATUS_OFFLINE
PJSUA_CALL_MEDIA_NONE = _pjsua2.PJSUA_CALL_MEDIA_NONE
PJSUA_CALL_MEDIA_ACTIVE = _pjsua2.PJSUA_CALL_MEDIA_ACTIVE
PJSUA_CALL_MEDIA_LOCAL_HOLD = _pjsua2.PJSUA_CALL_MEDIA_LOCAL_HOLD
PJSUA_CALL_MEDIA_REMOTE_HOLD = _pjsua2.PJSUA_CALL_MEDIA_REMOTE_HOLD
PJSUA_CALL_MEDIA_ERROR = _pjsua2.PJSUA_CALL_MEDIA_ERROR
PJSUA_MED_TP_NULL = _pjsua2.PJSUA_MED_TP_NULL
PJSUA_MED_TP_CREATING = _pjsua2.PJSUA_MED_TP_CREATING
PJSUA_MED_TP_IDLE = _pjsua2.PJSUA_MED_TP_IDLE
PJSUA_MED_TP_INIT = _pjsua2.PJSUA_MED_TP_INIT
PJSUA_MED_TP_RUNNING = _pjsua2.PJSUA_MED_TP_RUNNING
PJSUA_MED_TP_DISABLED = _pjsua2.PJSUA_MED_TP_DISABLED
PJSUA_CALL_VID_STRM_NO_OP = _pjsua2.PJSUA_CALL_VID_STRM_NO_OP
PJSUA_CALL_VID_STRM_ADD = _pjsua2.PJSUA_CALL_VID_STRM_ADD
PJSUA_CALL_VID_STRM_REMOVE = _pjsua2.PJSUA_CALL_VID_STRM_REMOVE
PJSUA_CALL_VID_STRM_CHANGE_DIR = _pjsua2.PJSUA_CALL_VID_STRM_CHANGE_DIR
PJSUA_CALL_VID_STRM_CHANGE_CAP_DEV = _pjsua2.PJSUA_CALL_VID_STRM_CHANGE_CAP_DEV
PJSUA_CALL_VID_STRM_START_TRANSMIT = _pjsua2.PJSUA_CALL_VID_STRM_START_TRANSMIT
PJSUA_CALL_VID_STRM_STOP_TRANSMIT = _pjsua2.PJSUA_CALL_VID_STRM_STOP_TRANSMIT
PJSUA_CALL_VID_STRM_SEND_KEYFRAME = _pjsua2.PJSUA_CALL_VID_STRM_SEND_KEYFRAME
PJSUA_VID_REQ_KEYFRAME_SIP_INFO = _pjsua2.PJSUA_VID_REQ_KEYFRAME_SIP_INFO
PJSUA_VID_REQ_KEYFRAME_RTCP_PLI = _pjsua2.PJSUA_VID_REQ_KEYFRAME_RTCP_PLI
PJSUA_CALL_UNHOLD = _pjsua2.PJSUA_CALL_UNHOLD
PJSUA_CALL_UPDATE_CONTACT = _pjsua2.PJSUA_CALL_UPDATE_CONTACT
PJSUA_CALL_INCLUDE_DISABLED_MEDIA = _pjsua2.PJSUA_CALL_INCLUDE_DISABLED_MEDIA
PJSUA_CALL_NO_SDP_OFFER = _pjsua2.PJSUA_CALL_NO_SDP_OFFER
PJSUA_CALL_REINIT_MEDIA = _pjsua2.PJSUA_CALL_REINIT_MEDIA
PJSUA_CALL_UPDATE_VIA = _pjsua2.PJSUA_CALL_UPDATE_VIA
PJSUA_CALL_UPDATE_TARGET = _pjsua2.PJSUA_CALL_UPDATE_TARGET
PJSUA_MED_TP_CLOSE_MEMBER = _pjsua2.PJSUA_MED_TP_CLOSE_MEMBER
PJSUA_SND_DEFAULT_CAPTURE_DEV = _pjsua2.PJSUA_SND_DEFAULT_CAPTURE_DEV
PJSUA_SND_DEFAULT_PLAYBACK_DEV = _pjsua2.PJSUA_SND_DEFAULT_PLAYBACK_DEV
PJSUA_SND_NO_DEV = _pjsua2.PJSUA_SND_NO_DEV
PJSUA_SND_NULL_DEV = _pjsua2.PJSUA_SND_NULL_DEV
PJSUA_SND_DEV_SPEAKER_ONLY = _pjsua2.PJSUA_SND_DEV_SPEAKER_ONLY
PJSUA_SND_DEV_NO_IMMEDIATE_OPEN = _pjsua2.PJSUA_SND_DEV_NO_IMMEDIATE_OPEN
PJSUA_IP_CHANGE_OP_NULL = _pjsua2.PJSUA_IP_CHANGE_OP_NULL
PJSUA_IP_CHANGE_OP_RESTART_LIS = _pjsua2.PJSUA_IP_CHANGE_OP_RESTART_LIS
PJSUA_IP_CHANGE_OP_ACC_SHUTDOWN_TP = _pjsua2.PJSUA_IP_CHANGE_OP_ACC_SHUTDOWN_TP
PJSUA_IP_CHANGE_OP_ACC_UPDATE_CONTACT = _pjsua2.PJSUA_IP_CHANGE_OP_ACC_UPDATE_CONTACT
PJSUA_IP_CHANGE_OP_ACC_HANGUP_CALLS = _pjsua2.PJSUA_IP_CHANGE_OP_ACC_HANGUP_CALLS
PJSUA_IP_CHANGE_OP_ACC_REINVITE_CALLS = _pjsua2.PJSUA_IP_CHANGE_OP_ACC_REINVITE_CALLS
PJSUA_IP_CHANGE_OP_COMPLETED = _pjsua2.PJSUA_IP_CHANGE_OP_COMPLETED
PJSUA_DTMF_METHOD_RFC2833 = _pjsua2.PJSUA_DTMF_METHOD_RFC2833
PJSUA_DTMF_METHOD_SIP_INFO = _pjsua2.PJSUA_DTMF_METHOD_SIP_INFO
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pjsua2.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pjsua2.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pjsua2.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pjsua2.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pjsua2.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pjsua2.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pjsua2.SwigPyIterator_copy(self)

    def next(self):
        return _pjsua2.SwigPyIterator_next(self)

    def __next__(self):
        return _pjsua2.SwigPyIterator___next__(self)

    def previous(self):
        return _pjsua2.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pjsua2.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pjsua2.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pjsua2.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pjsua2.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pjsua2.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pjsua2.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pjsua2.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pjsua2.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.StringVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.StringVector___bool__(self)

    def __len__(self):
        return _pjsua2.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.StringVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.StringVector_pop(self)

    def append(self, x):
        return _pjsua2.StringVector_append(self, x)

    def empty(self):
        return _pjsua2.StringVector_empty(self)

    def size(self):
        return _pjsua2.StringVector_size(self)

    def swap(self, v):
        return _pjsua2.StringVector_swap(self, v)

    def begin(self):
        return _pjsua2.StringVector_begin(self)

    def end(self):
        return _pjsua2.StringVector_end(self)

    def rbegin(self):
        return _pjsua2.StringVector_rbegin(self)

    def rend(self):
        return _pjsua2.StringVector_rend(self)

    def clear(self):
        return _pjsua2.StringVector_clear(self)

    def get_allocator(self):
        return _pjsua2.StringVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.StringVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.StringVector_push_back(self, x)

    def front(self):
        return _pjsua2.StringVector_front(self)

    def back(self):
        return _pjsua2.StringVector_back(self)

    def assign(self, n, x):
        return _pjsua2.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.StringVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.StringVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.StringVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.StringVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _pjsua2.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.IntVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.IntVector___bool__(self)

    def __len__(self):
        return _pjsua2.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.IntVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.IntVector_pop(self)

    def append(self, x):
        return _pjsua2.IntVector_append(self, x)

    def empty(self):
        return _pjsua2.IntVector_empty(self)

    def size(self):
        return _pjsua2.IntVector_size(self)

    def swap(self, v):
        return _pjsua2.IntVector_swap(self, v)

    def begin(self):
        return _pjsua2.IntVector_begin(self)

    def end(self):
        return _pjsua2.IntVector_end(self)

    def rbegin(self):
        return _pjsua2.IntVector_rbegin(self)

    def rend(self):
        return _pjsua2.IntVector_rend(self)

    def clear(self):
        return _pjsua2.IntVector_clear(self)

    def get_allocator(self):
        return _pjsua2.IntVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.IntVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.IntVector_push_back(self, x)

    def front(self):
        return _pjsua2.IntVector_front(self)

    def back(self):
        return _pjsua2.IntVector_back(self)

    def assign(self, n, x):
        return _pjsua2.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.IntVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.IntVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.IntVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.IntVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _pjsua2.IntVector_swigregister
IntVector_swigregister(IntVector)

INVALID_ID = _pjsua2.INVALID_ID
SUCCESS = _pjsua2.SUCCESS
class Error(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Error, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _pjsua2.Error_status_set
    __swig_getmethods__["status"] = _pjsua2.Error_status_get
    __swig_setmethods__["title"] = _pjsua2.Error_title_set
    __swig_getmethods__["title"] = _pjsua2.Error_title_get
    __swig_setmethods__["reason"] = _pjsua2.Error_reason_set
    __swig_getmethods__["reason"] = _pjsua2.Error_reason_get
    __swig_setmethods__["srcFile"] = _pjsua2.Error_srcFile_set
    __swig_getmethods__["srcFile"] = _pjsua2.Error_srcFile_get
    __swig_setmethods__["srcLine"] = _pjsua2.Error_srcLine_set
    __swig_getmethods__["srcLine"] = _pjsua2.Error_srcLine_get

    def info(self, multi_line=False):
        return _pjsua2.Error_info(self, multi_line)

    def __init__(self, *args):
        this = _pjsua2.new_Error(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_Error
    __del__ = lambda self: None
Error_swigregister = _pjsua2.Error_swigregister
Error_swigregister(Error)

class Version(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Version, name)
    __repr__ = _swig_repr
    __swig_setmethods__["major"] = _pjsua2.Version_major_set
    __swig_getmethods__["major"] = _pjsua2.Version_major_get
    if _newclass:
        major = _swig_property(_pjsua2.Version_major_get, _pjsua2.Version_major_set)
    __swig_setmethods__["minor"] = _pjsua2.Version_minor_set
    __swig_getmethods__["minor"] = _pjsua2.Version_minor_get
    if _newclass:
        minor = _swig_property(_pjsua2.Version_minor_get, _pjsua2.Version_minor_set)
    __swig_setmethods__["rev"] = _pjsua2.Version_rev_set
    __swig_getmethods__["rev"] = _pjsua2.Version_rev_get
    if _newclass:
        rev = _swig_property(_pjsua2.Version_rev_get, _pjsua2.Version_rev_set)
    __swig_setmethods__["suffix"] = _pjsua2.Version_suffix_set
    __swig_getmethods__["suffix"] = _pjsua2.Version_suffix_get
    if _newclass:
        suffix = _swig_property(_pjsua2.Version_suffix_get, _pjsua2.Version_suffix_set)
    __swig_setmethods__["full"] = _pjsua2.Version_full_set
    __swig_getmethods__["full"] = _pjsua2.Version_full_get
    if _newclass:
        full = _swig_property(_pjsua2.Version_full_get, _pjsua2.Version_full_set)
    __swig_setmethods__["numeric"] = _pjsua2.Version_numeric_set
    __swig_getmethods__["numeric"] = _pjsua2.Version_numeric_get
    if _newclass:
        numeric = _swig_property(_pjsua2.Version_numeric_get, _pjsua2.Version_numeric_set)

    def __init__(self):
        this = _pjsua2.new_Version()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_Version
    __del__ = lambda self: None
Version_swigregister = _pjsua2.Version_swigregister
Version_swigregister(Version)

class TimeVal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeVal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeVal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sec"] = _pjsua2.TimeVal_sec_set
    __swig_getmethods__["sec"] = _pjsua2.TimeVal_sec_get
    if _newclass:
        sec = _swig_property(_pjsua2.TimeVal_sec_get, _pjsua2.TimeVal_sec_set)
    __swig_setmethods__["msec"] = _pjsua2.TimeVal_msec_set
    __swig_getmethods__["msec"] = _pjsua2.TimeVal_msec_get
    if _newclass:
        msec = _swig_property(_pjsua2.TimeVal_msec_get, _pjsua2.TimeVal_msec_set)

    def __init__(self):
        this = _pjsua2.new_TimeVal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_TimeVal
    __del__ = lambda self: None
TimeVal_swigregister = _pjsua2.TimeVal_swigregister
TimeVal_swigregister(TimeVal)

class PersistentObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PersistentObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PersistentObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pjsua2.delete_PersistentObject
    __del__ = lambda self: None

    def readObject(self, node):
        return _pjsua2.PersistentObject_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.PersistentObject_writeObject(self, node)
PersistentObject_swigregister = _pjsua2.PersistentObject_swigregister
PersistentObject_swigregister(PersistentObject)

class PersistentDocument(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PersistentDocument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PersistentDocument, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pjsua2.delete_PersistentDocument
    __del__ = lambda self: None

    def loadFile(self, filename):
        return _pjsua2.PersistentDocument_loadFile(self, filename)

    def loadString(self, input):
        return _pjsua2.PersistentDocument_loadString(self, input)

    def saveFile(self, filename):
        return _pjsua2.PersistentDocument_saveFile(self, filename)

    def saveString(self):
        return _pjsua2.PersistentDocument_saveString(self)

    def getRootContainer(self):
        return _pjsua2.PersistentDocument_getRootContainer(self)

    def hasUnread(self):
        return _pjsua2.PersistentDocument_hasUnread(self)

    def unreadName(self):
        return _pjsua2.PersistentDocument_unreadName(self)

    def readInt(self, *args):
        return _pjsua2.PersistentDocument_readInt(self, *args)

    def readNumber(self, *args):
        return _pjsua2.PersistentDocument_readNumber(self, *args)

    def readBool(self, *args):
        return _pjsua2.PersistentDocument_readBool(self, *args)

    def readString(self, *args):
        return _pjsua2.PersistentDocument_readString(self, *args)

    def readStringVector(self, *args):
        return _pjsua2.PersistentDocument_readStringVector(self, *args)

    def readObject(self, obj):
        return _pjsua2.PersistentDocument_readObject(self, obj)

    def readContainer(self, *args):
        return _pjsua2.PersistentDocument_readContainer(self, *args)

    def readArray(self, *args):
        return _pjsua2.PersistentDocument_readArray(self, *args)

    def writeNumber(self, name, num):
        return _pjsua2.PersistentDocument_writeNumber(self, name, num)

    def writeInt(self, name, num):
        return _pjsua2.PersistentDocument_writeInt(self, name, num)

    def writeBool(self, name, value):
        return _pjsua2.PersistentDocument_writeBool(self, name, value)

    def writeString(self, name, value):
        return _pjsua2.PersistentDocument_writeString(self, name, value)

    def writeStringVector(self, name, arr):
        return _pjsua2.PersistentDocument_writeStringVector(self, name, arr)

    def writeObject(self, obj):
        return _pjsua2.PersistentDocument_writeObject(self, obj)

    def writeNewContainer(self, name):
        return _pjsua2.PersistentDocument_writeNewContainer(self, name)

    def writeNewArray(self, name):
        return _pjsua2.PersistentDocument_writeNewArray(self, name)
PersistentDocument_swigregister = _pjsua2.PersistentDocument_swigregister
PersistentDocument_swigregister(PersistentDocument)

class ContainerNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContainerNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContainerNode, name)
    __repr__ = _swig_repr

    def hasUnread(self):
        return _pjsua2.ContainerNode_hasUnread(self)

    def unreadName(self):
        return _pjsua2.ContainerNode_unreadName(self)

    def readInt(self, *args):
        return _pjsua2.ContainerNode_readInt(self, *args)

    def readNumber(self, *args):
        return _pjsua2.ContainerNode_readNumber(self, *args)

    def readBool(self, *args):
        return _pjsua2.ContainerNode_readBool(self, *args)

    def readString(self, *args):
        return _pjsua2.ContainerNode_readString(self, *args)

    def readStringVector(self, *args):
        return _pjsua2.ContainerNode_readStringVector(self, *args)

    def readObject(self, obj):
        return _pjsua2.ContainerNode_readObject(self, obj)

    def readContainer(self, *args):
        return _pjsua2.ContainerNode_readContainer(self, *args)

    def readArray(self, *args):
        return _pjsua2.ContainerNode_readArray(self, *args)

    def writeNumber(self, name, num):
        return _pjsua2.ContainerNode_writeNumber(self, name, num)

    def writeInt(self, name, num):
        return _pjsua2.ContainerNode_writeInt(self, name, num)

    def writeBool(self, name, value):
        return _pjsua2.ContainerNode_writeBool(self, name, value)

    def writeString(self, name, value):
        return _pjsua2.ContainerNode_writeString(self, name, value)

    def writeStringVector(self, name, arr):
        return _pjsua2.ContainerNode_writeStringVector(self, name, arr)

    def writeObject(self, obj):
        return _pjsua2.ContainerNode_writeObject(self, obj)

    def writeNewContainer(self, name):
        return _pjsua2.ContainerNode_writeNewContainer(self, name)

    def writeNewArray(self, name):
        return _pjsua2.ContainerNode_writeNewArray(self, name)

    def __init__(self):
        this = _pjsua2.new_ContainerNode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_ContainerNode
    __del__ = lambda self: None
ContainerNode_swigregister = _pjsua2.ContainerNode_swigregister
ContainerNode_swigregister(ContainerNode)

class AuthCredInfo(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuthCredInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuthCredInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scheme"] = _pjsua2.AuthCredInfo_scheme_set
    __swig_getmethods__["scheme"] = _pjsua2.AuthCredInfo_scheme_get
    if _newclass:
        scheme = _swig_property(_pjsua2.AuthCredInfo_scheme_get, _pjsua2.AuthCredInfo_scheme_set)
    __swig_setmethods__["realm"] = _pjsua2.AuthCredInfo_realm_set
    __swig_getmethods__["realm"] = _pjsua2.AuthCredInfo_realm_get
    if _newclass:
        realm = _swig_property(_pjsua2.AuthCredInfo_realm_get, _pjsua2.AuthCredInfo_realm_set)
    __swig_setmethods__["username"] = _pjsua2.AuthCredInfo_username_set
    __swig_getmethods__["username"] = _pjsua2.AuthCredInfo_username_get
    if _newclass:
        username = _swig_property(_pjsua2.AuthCredInfo_username_get, _pjsua2.AuthCredInfo_username_set)
    __swig_setmethods__["dataType"] = _pjsua2.AuthCredInfo_dataType_set
    __swig_getmethods__["dataType"] = _pjsua2.AuthCredInfo_dataType_get
    if _newclass:
        dataType = _swig_property(_pjsua2.AuthCredInfo_dataType_get, _pjsua2.AuthCredInfo_dataType_set)
    __swig_setmethods__["data"] = _pjsua2.AuthCredInfo_data_set
    __swig_getmethods__["data"] = _pjsua2.AuthCredInfo_data_get
    if _newclass:
        data = _swig_property(_pjsua2.AuthCredInfo_data_get, _pjsua2.AuthCredInfo_data_set)
    __swig_setmethods__["akaK"] = _pjsua2.AuthCredInfo_akaK_set
    __swig_getmethods__["akaK"] = _pjsua2.AuthCredInfo_akaK_get
    if _newclass:
        akaK = _swig_property(_pjsua2.AuthCredInfo_akaK_get, _pjsua2.AuthCredInfo_akaK_set)
    __swig_setmethods__["akaOp"] = _pjsua2.AuthCredInfo_akaOp_set
    __swig_getmethods__["akaOp"] = _pjsua2.AuthCredInfo_akaOp_get
    if _newclass:
        akaOp = _swig_property(_pjsua2.AuthCredInfo_akaOp_get, _pjsua2.AuthCredInfo_akaOp_set)
    __swig_setmethods__["akaAmf"] = _pjsua2.AuthCredInfo_akaAmf_set
    __swig_getmethods__["akaAmf"] = _pjsua2.AuthCredInfo_akaAmf_get
    if _newclass:
        akaAmf = _swig_property(_pjsua2.AuthCredInfo_akaAmf_get, _pjsua2.AuthCredInfo_akaAmf_set)

    def __init__(self, *args):
        this = _pjsua2.new_AuthCredInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def readObject(self, node):
        return _pjsua2.AuthCredInfo_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.AuthCredInfo_writeObject(self, node)
    __swig_destroy__ = _pjsua2.delete_AuthCredInfo
    __del__ = lambda self: None
AuthCredInfo_swigregister = _pjsua2.AuthCredInfo_swigregister
AuthCredInfo_swigregister(AuthCredInfo)

class TlsConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TlsConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TlsConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CaListFile"] = _pjsua2.TlsConfig_CaListFile_set
    __swig_getmethods__["CaListFile"] = _pjsua2.TlsConfig_CaListFile_get
    if _newclass:
        CaListFile = _swig_property(_pjsua2.TlsConfig_CaListFile_get, _pjsua2.TlsConfig_CaListFile_set)
    __swig_setmethods__["certFile"] = _pjsua2.TlsConfig_certFile_set
    __swig_getmethods__["certFile"] = _pjsua2.TlsConfig_certFile_get
    if _newclass:
        certFile = _swig_property(_pjsua2.TlsConfig_certFile_get, _pjsua2.TlsConfig_certFile_set)
    __swig_setmethods__["privKeyFile"] = _pjsua2.TlsConfig_privKeyFile_set
    __swig_getmethods__["privKeyFile"] = _pjsua2.TlsConfig_privKeyFile_get
    if _newclass:
        privKeyFile = _swig_property(_pjsua2.TlsConfig_privKeyFile_get, _pjsua2.TlsConfig_privKeyFile_set)
    __swig_setmethods__["password"] = _pjsua2.TlsConfig_password_set
    __swig_getmethods__["password"] = _pjsua2.TlsConfig_password_get
    if _newclass:
        password = _swig_property(_pjsua2.TlsConfig_password_get, _pjsua2.TlsConfig_password_set)
    __swig_setmethods__["CaBuf"] = _pjsua2.TlsConfig_CaBuf_set
    __swig_getmethods__["CaBuf"] = _pjsua2.TlsConfig_CaBuf_get
    if _newclass:
        CaBuf = _swig_property(_pjsua2.TlsConfig_CaBuf_get, _pjsua2.TlsConfig_CaBuf_set)
    __swig_setmethods__["certBuf"] = _pjsua2.TlsConfig_certBuf_set
    __swig_getmethods__["certBuf"] = _pjsua2.TlsConfig_certBuf_get
    if _newclass:
        certBuf = _swig_property(_pjsua2.TlsConfig_certBuf_get, _pjsua2.TlsConfig_certBuf_set)
    __swig_setmethods__["privKeyBuf"] = _pjsua2.TlsConfig_privKeyBuf_set
    __swig_getmethods__["privKeyBuf"] = _pjsua2.TlsConfig_privKeyBuf_get
    if _newclass:
        privKeyBuf = _swig_property(_pjsua2.TlsConfig_privKeyBuf_get, _pjsua2.TlsConfig_privKeyBuf_set)
    __swig_setmethods__["method"] = _pjsua2.TlsConfig_method_set
    __swig_getmethods__["method"] = _pjsua2.TlsConfig_method_get
    if _newclass:
        method = _swig_property(_pjsua2.TlsConfig_method_get, _pjsua2.TlsConfig_method_set)
    __swig_setmethods__["proto"] = _pjsua2.TlsConfig_proto_set
    __swig_getmethods__["proto"] = _pjsua2.TlsConfig_proto_get
    if _newclass:
        proto = _swig_property(_pjsua2.TlsConfig_proto_get, _pjsua2.TlsConfig_proto_set)
    __swig_setmethods__["ciphers"] = _pjsua2.TlsConfig_ciphers_set
    __swig_getmethods__["ciphers"] = _pjsua2.TlsConfig_ciphers_get
    if _newclass:
        ciphers = _swig_property(_pjsua2.TlsConfig_ciphers_get, _pjsua2.TlsConfig_ciphers_set)
    __swig_setmethods__["verifyServer"] = _pjsua2.TlsConfig_verifyServer_set
    __swig_getmethods__["verifyServer"] = _pjsua2.TlsConfig_verifyServer_get
    if _newclass:
        verifyServer = _swig_property(_pjsua2.TlsConfig_verifyServer_get, _pjsua2.TlsConfig_verifyServer_set)
    __swig_setmethods__["verifyClient"] = _pjsua2.TlsConfig_verifyClient_set
    __swig_getmethods__["verifyClient"] = _pjsua2.TlsConfig_verifyClient_get
    if _newclass:
        verifyClient = _swig_property(_pjsua2.TlsConfig_verifyClient_get, _pjsua2.TlsConfig_verifyClient_set)
    __swig_setmethods__["requireClientCert"] = _pjsua2.TlsConfig_requireClientCert_set
    __swig_getmethods__["requireClientCert"] = _pjsua2.TlsConfig_requireClientCert_get
    if _newclass:
        requireClientCert = _swig_property(_pjsua2.TlsConfig_requireClientCert_get, _pjsua2.TlsConfig_requireClientCert_set)
    __swig_setmethods__["msecTimeout"] = _pjsua2.TlsConfig_msecTimeout_set
    __swig_getmethods__["msecTimeout"] = _pjsua2.TlsConfig_msecTimeout_get
    if _newclass:
        msecTimeout = _swig_property(_pjsua2.TlsConfig_msecTimeout_get, _pjsua2.TlsConfig_msecTimeout_set)
    __swig_setmethods__["qosType"] = _pjsua2.TlsConfig_qosType_set
    __swig_getmethods__["qosType"] = _pjsua2.TlsConfig_qosType_get
    if _newclass:
        qosType = _swig_property(_pjsua2.TlsConfig_qosType_get, _pjsua2.TlsConfig_qosType_set)
    __swig_setmethods__["qosParams"] = _pjsua2.TlsConfig_qosParams_set
    __swig_getmethods__["qosParams"] = _pjsua2.TlsConfig_qosParams_get
    if _newclass:
        qosParams = _swig_property(_pjsua2.TlsConfig_qosParams_get, _pjsua2.TlsConfig_qosParams_set)
    __swig_setmethods__["qosIgnoreError"] = _pjsua2.TlsConfig_qosIgnoreError_set
    __swig_getmethods__["qosIgnoreError"] = _pjsua2.TlsConfig_qosIgnoreError_get
    if _newclass:
        qosIgnoreError = _swig_property(_pjsua2.TlsConfig_qosIgnoreError_get, _pjsua2.TlsConfig_qosIgnoreError_set)

    def __init__(self):
        this = _pjsua2.new_TlsConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def readObject(self, node):
        return _pjsua2.TlsConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.TlsConfig_writeObject(self, node)
    __swig_destroy__ = _pjsua2.delete_TlsConfig
    __del__ = lambda self: None
TlsConfig_swigregister = _pjsua2.TlsConfig_swigregister
TlsConfig_swigregister(TlsConfig)

class TransportConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransportConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransportConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port"] = _pjsua2.TransportConfig_port_set
    __swig_getmethods__["port"] = _pjsua2.TransportConfig_port_get
    if _newclass:
        port = _swig_property(_pjsua2.TransportConfig_port_get, _pjsua2.TransportConfig_port_set)
    __swig_setmethods__["portRange"] = _pjsua2.TransportConfig_portRange_set
    __swig_getmethods__["portRange"] = _pjsua2.TransportConfig_portRange_get
    if _newclass:
        portRange = _swig_property(_pjsua2.TransportConfig_portRange_get, _pjsua2.TransportConfig_portRange_set)
    __swig_setmethods__["publicAddress"] = _pjsua2.TransportConfig_publicAddress_set
    __swig_getmethods__["publicAddress"] = _pjsua2.TransportConfig_publicAddress_get
    if _newclass:
        publicAddress = _swig_property(_pjsua2.TransportConfig_publicAddress_get, _pjsua2.TransportConfig_publicAddress_set)
    __swig_setmethods__["boundAddress"] = _pjsua2.TransportConfig_boundAddress_set
    __swig_getmethods__["boundAddress"] = _pjsua2.TransportConfig_boundAddress_get
    if _newclass:
        boundAddress = _swig_property(_pjsua2.TransportConfig_boundAddress_get, _pjsua2.TransportConfig_boundAddress_set)
    __swig_setmethods__["tlsConfig"] = _pjsua2.TransportConfig_tlsConfig_set
    __swig_getmethods__["tlsConfig"] = _pjsua2.TransportConfig_tlsConfig_get
    if _newclass:
        tlsConfig = _swig_property(_pjsua2.TransportConfig_tlsConfig_get, _pjsua2.TransportConfig_tlsConfig_set)
    __swig_setmethods__["qosType"] = _pjsua2.TransportConfig_qosType_set
    __swig_getmethods__["qosType"] = _pjsua2.TransportConfig_qosType_get
    if _newclass:
        qosType = _swig_property(_pjsua2.TransportConfig_qosType_get, _pjsua2.TransportConfig_qosType_set)
    __swig_setmethods__["qosParams"] = _pjsua2.TransportConfig_qosParams_set
    __swig_getmethods__["qosParams"] = _pjsua2.TransportConfig_qosParams_get
    if _newclass:
        qosParams = _swig_property(_pjsua2.TransportConfig_qosParams_get, _pjsua2.TransportConfig_qosParams_set)

    def __init__(self):
        this = _pjsua2.new_TransportConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def readObject(self, node):
        return _pjsua2.TransportConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.TransportConfig_writeObject(self, node)
    __swig_destroy__ = _pjsua2.delete_TransportConfig
    __del__ = lambda self: None
TransportConfig_swigregister = _pjsua2.TransportConfig_swigregister
TransportConfig_swigregister(TransportConfig)

class TransportInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransportInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransportInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _pjsua2.TransportInfo_id_set
    __swig_getmethods__["id"] = _pjsua2.TransportInfo_id_get
    if _newclass:
        id = _swig_property(_pjsua2.TransportInfo_id_get, _pjsua2.TransportInfo_id_set)
    __swig_setmethods__["type"] = _pjsua2.TransportInfo_type_set
    __swig_getmethods__["type"] = _pjsua2.TransportInfo_type_get
    if _newclass:
        type = _swig_property(_pjsua2.TransportInfo_type_get, _pjsua2.TransportInfo_type_set)
    __swig_setmethods__["typeName"] = _pjsua2.TransportInfo_typeName_set
    __swig_getmethods__["typeName"] = _pjsua2.TransportInfo_typeName_get
    if _newclass:
        typeName = _swig_property(_pjsua2.TransportInfo_typeName_get, _pjsua2.TransportInfo_typeName_set)
    __swig_setmethods__["info"] = _pjsua2.TransportInfo_info_set
    __swig_getmethods__["info"] = _pjsua2.TransportInfo_info_get
    if _newclass:
        info = _swig_property(_pjsua2.TransportInfo_info_get, _pjsua2.TransportInfo_info_set)
    __swig_setmethods__["flags"] = _pjsua2.TransportInfo_flags_set
    __swig_getmethods__["flags"] = _pjsua2.TransportInfo_flags_get
    if _newclass:
        flags = _swig_property(_pjsua2.TransportInfo_flags_get, _pjsua2.TransportInfo_flags_set)
    __swig_setmethods__["localAddress"] = _pjsua2.TransportInfo_localAddress_set
    __swig_getmethods__["localAddress"] = _pjsua2.TransportInfo_localAddress_get
    if _newclass:
        localAddress = _swig_property(_pjsua2.TransportInfo_localAddress_get, _pjsua2.TransportInfo_localAddress_set)
    __swig_setmethods__["localName"] = _pjsua2.TransportInfo_localName_set
    __swig_getmethods__["localName"] = _pjsua2.TransportInfo_localName_get
    if _newclass:
        localName = _swig_property(_pjsua2.TransportInfo_localName_get, _pjsua2.TransportInfo_localName_set)
    __swig_setmethods__["usageCount"] = _pjsua2.TransportInfo_usageCount_set
    __swig_getmethods__["usageCount"] = _pjsua2.TransportInfo_usageCount_get
    if _newclass:
        usageCount = _swig_property(_pjsua2.TransportInfo_usageCount_get, _pjsua2.TransportInfo_usageCount_set)

    def __init__(self):
        this = _pjsua2.new_TransportInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_TransportInfo
    __del__ = lambda self: None
TransportInfo_swigregister = _pjsua2.TransportInfo_swigregister
TransportInfo_swigregister(TransportInfo)

class SipRxData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipRxData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipRxData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["info"] = _pjsua2.SipRxData_info_set
    __swig_getmethods__["info"] = _pjsua2.SipRxData_info_get
    if _newclass:
        info = _swig_property(_pjsua2.SipRxData_info_get, _pjsua2.SipRxData_info_set)
    __swig_setmethods__["wholeMsg"] = _pjsua2.SipRxData_wholeMsg_set
    __swig_getmethods__["wholeMsg"] = _pjsua2.SipRxData_wholeMsg_get
    if _newclass:
        wholeMsg = _swig_property(_pjsua2.SipRxData_wholeMsg_get, _pjsua2.SipRxData_wholeMsg_set)
    __swig_setmethods__["srcAddress"] = _pjsua2.SipRxData_srcAddress_set
    __swig_getmethods__["srcAddress"] = _pjsua2.SipRxData_srcAddress_get
    if _newclass:
        srcAddress = _swig_property(_pjsua2.SipRxData_srcAddress_get, _pjsua2.SipRxData_srcAddress_set)
    __swig_setmethods__["pjRxData"] = _pjsua2.SipRxData_pjRxData_set
    __swig_getmethods__["pjRxData"] = _pjsua2.SipRxData_pjRxData_get
    if _newclass:
        pjRxData = _swig_property(_pjsua2.SipRxData_pjRxData_get, _pjsua2.SipRxData_pjRxData_set)

    def __init__(self):
        this = _pjsua2.new_SipRxData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_SipRxData
    __del__ = lambda self: None
SipRxData_swigregister = _pjsua2.SipRxData_swigregister
SipRxData_swigregister(SipRxData)

class SipTxData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipTxData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipTxData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["info"] = _pjsua2.SipTxData_info_set
    __swig_getmethods__["info"] = _pjsua2.SipTxData_info_get
    if _newclass:
        info = _swig_property(_pjsua2.SipTxData_info_get, _pjsua2.SipTxData_info_set)
    __swig_setmethods__["wholeMsg"] = _pjsua2.SipTxData_wholeMsg_set
    __swig_getmethods__["wholeMsg"] = _pjsua2.SipTxData_wholeMsg_get
    if _newclass:
        wholeMsg = _swig_property(_pjsua2.SipTxData_wholeMsg_get, _pjsua2.SipTxData_wholeMsg_set)
    __swig_setmethods__["dstAddress"] = _pjsua2.SipTxData_dstAddress_set
    __swig_getmethods__["dstAddress"] = _pjsua2.SipTxData_dstAddress_get
    if _newclass:
        dstAddress = _swig_property(_pjsua2.SipTxData_dstAddress_get, _pjsua2.SipTxData_dstAddress_set)
    __swig_setmethods__["pjTxData"] = _pjsua2.SipTxData_pjTxData_set
    __swig_getmethods__["pjTxData"] = _pjsua2.SipTxData_pjTxData_get
    if _newclass:
        pjTxData = _swig_property(_pjsua2.SipTxData_pjTxData_get, _pjsua2.SipTxData_pjTxData_set)

    def __init__(self):
        this = _pjsua2.new_SipTxData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_SipTxData
    __del__ = lambda self: None
SipTxData_swigregister = _pjsua2.SipTxData_swigregister
SipTxData_swigregister(SipTxData)

class SipTransaction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipTransaction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipTransaction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["role"] = _pjsua2.SipTransaction_role_set
    __swig_getmethods__["role"] = _pjsua2.SipTransaction_role_get
    if _newclass:
        role = _swig_property(_pjsua2.SipTransaction_role_get, _pjsua2.SipTransaction_role_set)
    __swig_setmethods__["method"] = _pjsua2.SipTransaction_method_set
    __swig_getmethods__["method"] = _pjsua2.SipTransaction_method_get
    if _newclass:
        method = _swig_property(_pjsua2.SipTransaction_method_get, _pjsua2.SipTransaction_method_set)
    __swig_setmethods__["statusCode"] = _pjsua2.SipTransaction_statusCode_set
    __swig_getmethods__["statusCode"] = _pjsua2.SipTransaction_statusCode_get
    if _newclass:
        statusCode = _swig_property(_pjsua2.SipTransaction_statusCode_get, _pjsua2.SipTransaction_statusCode_set)
    __swig_setmethods__["statusText"] = _pjsua2.SipTransaction_statusText_set
    __swig_getmethods__["statusText"] = _pjsua2.SipTransaction_statusText_get
    if _newclass:
        statusText = _swig_property(_pjsua2.SipTransaction_statusText_get, _pjsua2.SipTransaction_statusText_set)
    __swig_setmethods__["state"] = _pjsua2.SipTransaction_state_set
    __swig_getmethods__["state"] = _pjsua2.SipTransaction_state_get
    if _newclass:
        state = _swig_property(_pjsua2.SipTransaction_state_get, _pjsua2.SipTransaction_state_set)
    __swig_setmethods__["lastTx"] = _pjsua2.SipTransaction_lastTx_set
    __swig_getmethods__["lastTx"] = _pjsua2.SipTransaction_lastTx_get
    if _newclass:
        lastTx = _swig_property(_pjsua2.SipTransaction_lastTx_get, _pjsua2.SipTransaction_lastTx_set)
    __swig_setmethods__["pjTransaction"] = _pjsua2.SipTransaction_pjTransaction_set
    __swig_getmethods__["pjTransaction"] = _pjsua2.SipTransaction_pjTransaction_get
    if _newclass:
        pjTransaction = _swig_property(_pjsua2.SipTransaction_pjTransaction_get, _pjsua2.SipTransaction_pjTransaction_set)

    def __init__(self):
        this = _pjsua2.new_SipTransaction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_SipTransaction
    __del__ = lambda self: None
SipTransaction_swigregister = _pjsua2.SipTransaction_swigregister
SipTransaction_swigregister(SipTransaction)

class TimerEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimerEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimerEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entry"] = _pjsua2.TimerEvent_entry_set
    __swig_getmethods__["entry"] = _pjsua2.TimerEvent_entry_get
    if _newclass:
        entry = _swig_property(_pjsua2.TimerEvent_entry_get, _pjsua2.TimerEvent_entry_set)

    def __init__(self):
        this = _pjsua2.new_TimerEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_TimerEvent
    __del__ = lambda self: None
TimerEvent_swigregister = _pjsua2.TimerEvent_swigregister
TimerEvent_swigregister(TimerEvent)

class TsxStateEventSrc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TsxStateEventSrc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TsxStateEventSrc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rdata"] = _pjsua2.TsxStateEventSrc_rdata_set
    __swig_getmethods__["rdata"] = _pjsua2.TsxStateEventSrc_rdata_get
    if _newclass:
        rdata = _swig_property(_pjsua2.TsxStateEventSrc_rdata_get, _pjsua2.TsxStateEventSrc_rdata_set)
    __swig_setmethods__["tdata"] = _pjsua2.TsxStateEventSrc_tdata_set
    __swig_getmethods__["tdata"] = _pjsua2.TsxStateEventSrc_tdata_get
    if _newclass:
        tdata = _swig_property(_pjsua2.TsxStateEventSrc_tdata_get, _pjsua2.TsxStateEventSrc_tdata_set)
    __swig_setmethods__["timer"] = _pjsua2.TsxStateEventSrc_timer_set
    __swig_getmethods__["timer"] = _pjsua2.TsxStateEventSrc_timer_get
    if _newclass:
        timer = _swig_property(_pjsua2.TsxStateEventSrc_timer_get, _pjsua2.TsxStateEventSrc_timer_set)
    __swig_setmethods__["status"] = _pjsua2.TsxStateEventSrc_status_set
    __swig_getmethods__["status"] = _pjsua2.TsxStateEventSrc_status_get
    if _newclass:
        status = _swig_property(_pjsua2.TsxStateEventSrc_status_get, _pjsua2.TsxStateEventSrc_status_set)
    __swig_setmethods__["data"] = _pjsua2.TsxStateEventSrc_data_set
    __swig_getmethods__["data"] = _pjsua2.TsxStateEventSrc_data_get
    if _newclass:
        data = _swig_property(_pjsua2.TsxStateEventSrc_data_get, _pjsua2.TsxStateEventSrc_data_set)

    def __init__(self):
        this = _pjsua2.new_TsxStateEventSrc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_TsxStateEventSrc
    __del__ = lambda self: None
TsxStateEventSrc_swigregister = _pjsua2.TsxStateEventSrc_swigregister
TsxStateEventSrc_swigregister(TsxStateEventSrc)

class TsxStateEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TsxStateEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TsxStateEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["src"] = _pjsua2.TsxStateEvent_src_set
    __swig_getmethods__["src"] = _pjsua2.TsxStateEvent_src_get
    if _newclass:
        src = _swig_property(_pjsua2.TsxStateEvent_src_get, _pjsua2.TsxStateEvent_src_set)
    __swig_setmethods__["tsx"] = _pjsua2.TsxStateEvent_tsx_set
    __swig_getmethods__["tsx"] = _pjsua2.TsxStateEvent_tsx_get
    if _newclass:
        tsx = _swig_property(_pjsua2.TsxStateEvent_tsx_get, _pjsua2.TsxStateEvent_tsx_set)
    __swig_setmethods__["prevState"] = _pjsua2.TsxStateEvent_prevState_set
    __swig_getmethods__["prevState"] = _pjsua2.TsxStateEvent_prevState_get
    if _newclass:
        prevState = _swig_property(_pjsua2.TsxStateEvent_prevState_get, _pjsua2.TsxStateEvent_prevState_set)
    __swig_setmethods__["type"] = _pjsua2.TsxStateEvent_type_set
    __swig_getmethods__["type"] = _pjsua2.TsxStateEvent_type_get
    if _newclass:
        type = _swig_property(_pjsua2.TsxStateEvent_type_get, _pjsua2.TsxStateEvent_type_set)

    def __init__(self):
        this = _pjsua2.new_TsxStateEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_TsxStateEvent
    __del__ = lambda self: None
TsxStateEvent_swigregister = _pjsua2.TsxStateEvent_swigregister
TsxStateEvent_swigregister(TsxStateEvent)

class TxMsgEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TxMsgEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TxMsgEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tdata"] = _pjsua2.TxMsgEvent_tdata_set
    __swig_getmethods__["tdata"] = _pjsua2.TxMsgEvent_tdata_get
    if _newclass:
        tdata = _swig_property(_pjsua2.TxMsgEvent_tdata_get, _pjsua2.TxMsgEvent_tdata_set)

    def __init__(self):
        this = _pjsua2.new_TxMsgEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_TxMsgEvent
    __del__ = lambda self: None
TxMsgEvent_swigregister = _pjsua2.TxMsgEvent_swigregister
TxMsgEvent_swigregister(TxMsgEvent)

class TxErrorEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TxErrorEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TxErrorEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tdata"] = _pjsua2.TxErrorEvent_tdata_set
    __swig_getmethods__["tdata"] = _pjsua2.TxErrorEvent_tdata_get
    if _newclass:
        tdata = _swig_property(_pjsua2.TxErrorEvent_tdata_get, _pjsua2.TxErrorEvent_tdata_set)
    __swig_setmethods__["tsx"] = _pjsua2.TxErrorEvent_tsx_set
    __swig_getmethods__["tsx"] = _pjsua2.TxErrorEvent_tsx_get
    if _newclass:
        tsx = _swig_property(_pjsua2.TxErrorEvent_tsx_get, _pjsua2.TxErrorEvent_tsx_set)

    def __init__(self):
        this = _pjsua2.new_TxErrorEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_TxErrorEvent
    __del__ = lambda self: None
TxErrorEvent_swigregister = _pjsua2.TxErrorEvent_swigregister
TxErrorEvent_swigregister(TxErrorEvent)

class RxMsgEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RxMsgEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RxMsgEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rdata"] = _pjsua2.RxMsgEvent_rdata_set
    __swig_getmethods__["rdata"] = _pjsua2.RxMsgEvent_rdata_get
    if _newclass:
        rdata = _swig_property(_pjsua2.RxMsgEvent_rdata_get, _pjsua2.RxMsgEvent_rdata_set)

    def __init__(self):
        this = _pjsua2.new_RxMsgEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_RxMsgEvent
    __del__ = lambda self: None
RxMsgEvent_swigregister = _pjsua2.RxMsgEvent_swigregister
RxMsgEvent_swigregister(RxMsgEvent)

class UserEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UserEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["user1"] = _pjsua2.UserEvent_user1_set
    __swig_getmethods__["user1"] = _pjsua2.UserEvent_user1_get
    if _newclass:
        user1 = _swig_property(_pjsua2.UserEvent_user1_get, _pjsua2.UserEvent_user1_set)
    __swig_setmethods__["user2"] = _pjsua2.UserEvent_user2_set
    __swig_getmethods__["user2"] = _pjsua2.UserEvent_user2_get
    if _newclass:
        user2 = _swig_property(_pjsua2.UserEvent_user2_get, _pjsua2.UserEvent_user2_set)
    __swig_setmethods__["user3"] = _pjsua2.UserEvent_user3_set
    __swig_getmethods__["user3"] = _pjsua2.UserEvent_user3_get
    if _newclass:
        user3 = _swig_property(_pjsua2.UserEvent_user3_get, _pjsua2.UserEvent_user3_set)
    __swig_setmethods__["user4"] = _pjsua2.UserEvent_user4_set
    __swig_getmethods__["user4"] = _pjsua2.UserEvent_user4_get
    if _newclass:
        user4 = _swig_property(_pjsua2.UserEvent_user4_get, _pjsua2.UserEvent_user4_set)

    def __init__(self):
        this = _pjsua2.new_UserEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_UserEvent
    __del__ = lambda self: None
UserEvent_swigregister = _pjsua2.UserEvent_swigregister
UserEvent_swigregister(UserEvent)

class SipEventBody(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipEventBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipEventBody, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timer"] = _pjsua2.SipEventBody_timer_set
    __swig_getmethods__["timer"] = _pjsua2.SipEventBody_timer_get
    if _newclass:
        timer = _swig_property(_pjsua2.SipEventBody_timer_get, _pjsua2.SipEventBody_timer_set)
    __swig_setmethods__["tsxState"] = _pjsua2.SipEventBody_tsxState_set
    __swig_getmethods__["tsxState"] = _pjsua2.SipEventBody_tsxState_get
    if _newclass:
        tsxState = _swig_property(_pjsua2.SipEventBody_tsxState_get, _pjsua2.SipEventBody_tsxState_set)
    __swig_setmethods__["txMsg"] = _pjsua2.SipEventBody_txMsg_set
    __swig_getmethods__["txMsg"] = _pjsua2.SipEventBody_txMsg_get
    if _newclass:
        txMsg = _swig_property(_pjsua2.SipEventBody_txMsg_get, _pjsua2.SipEventBody_txMsg_set)
    __swig_setmethods__["txError"] = _pjsua2.SipEventBody_txError_set
    __swig_getmethods__["txError"] = _pjsua2.SipEventBody_txError_get
    if _newclass:
        txError = _swig_property(_pjsua2.SipEventBody_txError_get, _pjsua2.SipEventBody_txError_set)
    __swig_setmethods__["rxMsg"] = _pjsua2.SipEventBody_rxMsg_set
    __swig_getmethods__["rxMsg"] = _pjsua2.SipEventBody_rxMsg_get
    if _newclass:
        rxMsg = _swig_property(_pjsua2.SipEventBody_rxMsg_get, _pjsua2.SipEventBody_rxMsg_set)
    __swig_setmethods__["user"] = _pjsua2.SipEventBody_user_set
    __swig_getmethods__["user"] = _pjsua2.SipEventBody_user_get
    if _newclass:
        user = _swig_property(_pjsua2.SipEventBody_user_get, _pjsua2.SipEventBody_user_set)

    def __init__(self):
        this = _pjsua2.new_SipEventBody()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_SipEventBody
    __del__ = lambda self: None
SipEventBody_swigregister = _pjsua2.SipEventBody_swigregister
SipEventBody_swigregister(SipEventBody)

class SipEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pjsua2.SipEvent_type_set
    __swig_getmethods__["type"] = _pjsua2.SipEvent_type_get
    if _newclass:
        type = _swig_property(_pjsua2.SipEvent_type_get, _pjsua2.SipEvent_type_set)
    __swig_setmethods__["body"] = _pjsua2.SipEvent_body_set
    __swig_getmethods__["body"] = _pjsua2.SipEvent_body_get
    if _newclass:
        body = _swig_property(_pjsua2.SipEvent_body_get, _pjsua2.SipEvent_body_set)
    __swig_setmethods__["pjEvent"] = _pjsua2.SipEvent_pjEvent_set
    __swig_getmethods__["pjEvent"] = _pjsua2.SipEvent_pjEvent_get
    if _newclass:
        pjEvent = _swig_property(_pjsua2.SipEvent_pjEvent_get, _pjsua2.SipEvent_pjEvent_set)

    def __init__(self):
        this = _pjsua2.new_SipEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_SipEvent
    __del__ = lambda self: None
SipEvent_swigregister = _pjsua2.SipEvent_swigregister
SipEvent_swigregister(SipEvent)

class SipMediaType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipMediaType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipMediaType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pjsua2.SipMediaType_type_set
    __swig_getmethods__["type"] = _pjsua2.SipMediaType_type_get
    if _newclass:
        type = _swig_property(_pjsua2.SipMediaType_type_get, _pjsua2.SipMediaType_type_set)
    __swig_setmethods__["subType"] = _pjsua2.SipMediaType_subType_set
    __swig_getmethods__["subType"] = _pjsua2.SipMediaType_subType_get
    if _newclass:
        subType = _swig_property(_pjsua2.SipMediaType_subType_get, _pjsua2.SipMediaType_subType_set)

    def __init__(self):
        this = _pjsua2.new_SipMediaType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_SipMediaType
    __del__ = lambda self: None
SipMediaType_swigregister = _pjsua2.SipMediaType_swigregister
SipMediaType_swigregister(SipMediaType)

class SipHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hName"] = _pjsua2.SipHeader_hName_set
    __swig_getmethods__["hName"] = _pjsua2.SipHeader_hName_get
    if _newclass:
        hName = _swig_property(_pjsua2.SipHeader_hName_get, _pjsua2.SipHeader_hName_set)
    __swig_setmethods__["hValue"] = _pjsua2.SipHeader_hValue_set
    __swig_getmethods__["hValue"] = _pjsua2.SipHeader_hValue_get
    if _newclass:
        hValue = _swig_property(_pjsua2.SipHeader_hValue_get, _pjsua2.SipHeader_hValue_set)

    def __init__(self):
        this = _pjsua2.new_SipHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_SipHeader
    __del__ = lambda self: None
SipHeader_swigregister = _pjsua2.SipHeader_swigregister
SipHeader_swigregister(SipHeader)

class SipMultipartPart(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipMultipartPart, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipMultipartPart, name)
    __repr__ = _swig_repr
    __swig_setmethods__["headers"] = _pjsua2.SipMultipartPart_headers_set
    __swig_getmethods__["headers"] = _pjsua2.SipMultipartPart_headers_get
    if _newclass:
        headers = _swig_property(_pjsua2.SipMultipartPart_headers_get, _pjsua2.SipMultipartPart_headers_set)
    __swig_setmethods__["contentType"] = _pjsua2.SipMultipartPart_contentType_set
    __swig_getmethods__["contentType"] = _pjsua2.SipMultipartPart_contentType_get
    if _newclass:
        contentType = _swig_property(_pjsua2.SipMultipartPart_contentType_get, _pjsua2.SipMultipartPart_contentType_set)
    __swig_setmethods__["body"] = _pjsua2.SipMultipartPart_body_set
    __swig_getmethods__["body"] = _pjsua2.SipMultipartPart_body_get
    if _newclass:
        body = _swig_property(_pjsua2.SipMultipartPart_body_get, _pjsua2.SipMultipartPart_body_set)

    def __init__(self):
        this = _pjsua2.new_SipMultipartPart()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_SipMultipartPart
    __del__ = lambda self: None
SipMultipartPart_swigregister = _pjsua2.SipMultipartPart_swigregister
SipMultipartPart_swigregister(SipMultipartPart)

class SipTxOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipTxOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipTxOption, name)
    __repr__ = _swig_repr
    __swig_setmethods__["targetUri"] = _pjsua2.SipTxOption_targetUri_set
    __swig_getmethods__["targetUri"] = _pjsua2.SipTxOption_targetUri_get
    if _newclass:
        targetUri = _swig_property(_pjsua2.SipTxOption_targetUri_get, _pjsua2.SipTxOption_targetUri_set)
    __swig_setmethods__["headers"] = _pjsua2.SipTxOption_headers_set
    __swig_getmethods__["headers"] = _pjsua2.SipTxOption_headers_get
    if _newclass:
        headers = _swig_property(_pjsua2.SipTxOption_headers_get, _pjsua2.SipTxOption_headers_set)
    __swig_setmethods__["contentType"] = _pjsua2.SipTxOption_contentType_set
    __swig_getmethods__["contentType"] = _pjsua2.SipTxOption_contentType_get
    if _newclass:
        contentType = _swig_property(_pjsua2.SipTxOption_contentType_get, _pjsua2.SipTxOption_contentType_set)
    __swig_setmethods__["msgBody"] = _pjsua2.SipTxOption_msgBody_set
    __swig_getmethods__["msgBody"] = _pjsua2.SipTxOption_msgBody_get
    if _newclass:
        msgBody = _swig_property(_pjsua2.SipTxOption_msgBody_get, _pjsua2.SipTxOption_msgBody_set)
    __swig_setmethods__["multipartContentType"] = _pjsua2.SipTxOption_multipartContentType_set
    __swig_getmethods__["multipartContentType"] = _pjsua2.SipTxOption_multipartContentType_get
    if _newclass:
        multipartContentType = _swig_property(_pjsua2.SipTxOption_multipartContentType_get, _pjsua2.SipTxOption_multipartContentType_set)
    __swig_setmethods__["multipartParts"] = _pjsua2.SipTxOption_multipartParts_set
    __swig_getmethods__["multipartParts"] = _pjsua2.SipTxOption_multipartParts_get
    if _newclass:
        multipartParts = _swig_property(_pjsua2.SipTxOption_multipartParts_get, _pjsua2.SipTxOption_multipartParts_set)

    def isEmpty(self):
        return _pjsua2.SipTxOption_isEmpty(self)

    def __init__(self):
        this = _pjsua2.new_SipTxOption()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_SipTxOption
    __del__ = lambda self: None
SipTxOption_swigregister = _pjsua2.SipTxOption_swigregister
SipTxOption_swigregister(SipTxOption)

class SendInstantMessageParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SendInstantMessageParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SendInstantMessageParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["contentType"] = _pjsua2.SendInstantMessageParam_contentType_set
    __swig_getmethods__["contentType"] = _pjsua2.SendInstantMessageParam_contentType_get
    if _newclass:
        contentType = _swig_property(_pjsua2.SendInstantMessageParam_contentType_get, _pjsua2.SendInstantMessageParam_contentType_set)
    __swig_setmethods__["content"] = _pjsua2.SendInstantMessageParam_content_set
    __swig_getmethods__["content"] = _pjsua2.SendInstantMessageParam_content_get
    if _newclass:
        content = _swig_property(_pjsua2.SendInstantMessageParam_content_get, _pjsua2.SendInstantMessageParam_content_set)
    __swig_setmethods__["txOption"] = _pjsua2.SendInstantMessageParam_txOption_set
    __swig_getmethods__["txOption"] = _pjsua2.SendInstantMessageParam_txOption_get
    if _newclass:
        txOption = _swig_property(_pjsua2.SendInstantMessageParam_txOption_get, _pjsua2.SendInstantMessageParam_txOption_set)
    __swig_setmethods__["userData"] = _pjsua2.SendInstantMessageParam_userData_set
    __swig_getmethods__["userData"] = _pjsua2.SendInstantMessageParam_userData_get
    if _newclass:
        userData = _swig_property(_pjsua2.SendInstantMessageParam_userData_get, _pjsua2.SendInstantMessageParam_userData_set)

    def __init__(self):
        this = _pjsua2.new_SendInstantMessageParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_SendInstantMessageParam
    __del__ = lambda self: None
SendInstantMessageParam_swigregister = _pjsua2.SendInstantMessageParam_swigregister
SendInstantMessageParam_swigregister(SendInstantMessageParam)

class SendTypingIndicationParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SendTypingIndicationParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SendTypingIndicationParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["isTyping"] = _pjsua2.SendTypingIndicationParam_isTyping_set
    __swig_getmethods__["isTyping"] = _pjsua2.SendTypingIndicationParam_isTyping_get
    if _newclass:
        isTyping = _swig_property(_pjsua2.SendTypingIndicationParam_isTyping_get, _pjsua2.SendTypingIndicationParam_isTyping_set)
    __swig_setmethods__["txOption"] = _pjsua2.SendTypingIndicationParam_txOption_set
    __swig_getmethods__["txOption"] = _pjsua2.SendTypingIndicationParam_txOption_get
    if _newclass:
        txOption = _swig_property(_pjsua2.SendTypingIndicationParam_txOption_get, _pjsua2.SendTypingIndicationParam_txOption_set)

    def __init__(self):
        this = _pjsua2.new_SendTypingIndicationParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_SendTypingIndicationParam
    __del__ = lambda self: None
SendTypingIndicationParam_swigregister = _pjsua2.SendTypingIndicationParam_swigregister
SendTypingIndicationParam_swigregister(SendTypingIndicationParam)

class SipHeaderVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipHeaderVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipHeaderVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.SipHeaderVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.SipHeaderVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.SipHeaderVector___bool__(self)

    def __len__(self):
        return _pjsua2.SipHeaderVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.SipHeaderVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.SipHeaderVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.SipHeaderVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.SipHeaderVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.SipHeaderVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.SipHeaderVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.SipHeaderVector_pop(self)

    def append(self, x):
        return _pjsua2.SipHeaderVector_append(self, x)

    def empty(self):
        return _pjsua2.SipHeaderVector_empty(self)

    def size(self):
        return _pjsua2.SipHeaderVector_size(self)

    def swap(self, v):
        return _pjsua2.SipHeaderVector_swap(self, v)

    def begin(self):
        return _pjsua2.SipHeaderVector_begin(self)

    def end(self):
        return _pjsua2.SipHeaderVector_end(self)

    def rbegin(self):
        return _pjsua2.SipHeaderVector_rbegin(self)

    def rend(self):
        return _pjsua2.SipHeaderVector_rend(self)

    def clear(self):
        return _pjsua2.SipHeaderVector_clear(self)

    def get_allocator(self):
        return _pjsua2.SipHeaderVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.SipHeaderVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.SipHeaderVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_SipHeaderVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.SipHeaderVector_push_back(self, x)

    def front(self):
        return _pjsua2.SipHeaderVector_front(self)

    def back(self):
        return _pjsua2.SipHeaderVector_back(self)

    def assign(self, n, x):
        return _pjsua2.SipHeaderVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.SipHeaderVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.SipHeaderVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.SipHeaderVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.SipHeaderVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_SipHeaderVector
    __del__ = lambda self: None
SipHeaderVector_swigregister = _pjsua2.SipHeaderVector_swigregister
SipHeaderVector_swigregister(SipHeaderVector)

class AuthCredInfoVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuthCredInfoVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AuthCredInfoVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.AuthCredInfoVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.AuthCredInfoVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.AuthCredInfoVector___bool__(self)

    def __len__(self):
        return _pjsua2.AuthCredInfoVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.AuthCredInfoVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.AuthCredInfoVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.AuthCredInfoVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.AuthCredInfoVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.AuthCredInfoVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.AuthCredInfoVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.AuthCredInfoVector_pop(self)

    def append(self, x):
        return _pjsua2.AuthCredInfoVector_append(self, x)

    def empty(self):
        return _pjsua2.AuthCredInfoVector_empty(self)

    def size(self):
        return _pjsua2.AuthCredInfoVector_size(self)

    def swap(self, v):
        return _pjsua2.AuthCredInfoVector_swap(self, v)

    def begin(self):
        return _pjsua2.AuthCredInfoVector_begin(self)

    def end(self):
        return _pjsua2.AuthCredInfoVector_end(self)

    def rbegin(self):
        return _pjsua2.AuthCredInfoVector_rbegin(self)

    def rend(self):
        return _pjsua2.AuthCredInfoVector_rend(self)

    def clear(self):
        return _pjsua2.AuthCredInfoVector_clear(self)

    def get_allocator(self):
        return _pjsua2.AuthCredInfoVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.AuthCredInfoVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.AuthCredInfoVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_AuthCredInfoVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.AuthCredInfoVector_push_back(self, x)

    def front(self):
        return _pjsua2.AuthCredInfoVector_front(self)

    def back(self):
        return _pjsua2.AuthCredInfoVector_back(self)

    def assign(self, n, x):
        return _pjsua2.AuthCredInfoVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.AuthCredInfoVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.AuthCredInfoVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.AuthCredInfoVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.AuthCredInfoVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_AuthCredInfoVector
    __del__ = lambda self: None
AuthCredInfoVector_swigregister = _pjsua2.AuthCredInfoVector_swigregister
AuthCredInfoVector_swigregister(AuthCredInfoVector)

class SrtpCryptoVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SrtpCryptoVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SrtpCryptoVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.SrtpCryptoVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.SrtpCryptoVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.SrtpCryptoVector___bool__(self)

    def __len__(self):
        return _pjsua2.SrtpCryptoVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.SrtpCryptoVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.SrtpCryptoVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.SrtpCryptoVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.SrtpCryptoVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.SrtpCryptoVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.SrtpCryptoVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.SrtpCryptoVector_pop(self)

    def append(self, x):
        return _pjsua2.SrtpCryptoVector_append(self, x)

    def empty(self):
        return _pjsua2.SrtpCryptoVector_empty(self)

    def size(self):
        return _pjsua2.SrtpCryptoVector_size(self)

    def swap(self, v):
        return _pjsua2.SrtpCryptoVector_swap(self, v)

    def begin(self):
        return _pjsua2.SrtpCryptoVector_begin(self)

    def end(self):
        return _pjsua2.SrtpCryptoVector_end(self)

    def rbegin(self):
        return _pjsua2.SrtpCryptoVector_rbegin(self)

    def rend(self):
        return _pjsua2.SrtpCryptoVector_rend(self)

    def clear(self):
        return _pjsua2.SrtpCryptoVector_clear(self)

    def get_allocator(self):
        return _pjsua2.SrtpCryptoVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.SrtpCryptoVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.SrtpCryptoVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_SrtpCryptoVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.SrtpCryptoVector_push_back(self, x)

    def front(self):
        return _pjsua2.SrtpCryptoVector_front(self)

    def back(self):
        return _pjsua2.SrtpCryptoVector_back(self)

    def assign(self, n, x):
        return _pjsua2.SrtpCryptoVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.SrtpCryptoVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.SrtpCryptoVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.SrtpCryptoVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.SrtpCryptoVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_SrtpCryptoVector
    __del__ = lambda self: None
SrtpCryptoVector_swigregister = _pjsua2.SrtpCryptoVector_swigregister
SrtpCryptoVector_swigregister(SrtpCryptoVector)

class SipMultipartPartVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipMultipartPartVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipMultipartPartVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.SipMultipartPartVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.SipMultipartPartVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.SipMultipartPartVector___bool__(self)

    def __len__(self):
        return _pjsua2.SipMultipartPartVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.SipMultipartPartVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.SipMultipartPartVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.SipMultipartPartVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.SipMultipartPartVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.SipMultipartPartVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.SipMultipartPartVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.SipMultipartPartVector_pop(self)

    def append(self, x):
        return _pjsua2.SipMultipartPartVector_append(self, x)

    def empty(self):
        return _pjsua2.SipMultipartPartVector_empty(self)

    def size(self):
        return _pjsua2.SipMultipartPartVector_size(self)

    def swap(self, v):
        return _pjsua2.SipMultipartPartVector_swap(self, v)

    def begin(self):
        return _pjsua2.SipMultipartPartVector_begin(self)

    def end(self):
        return _pjsua2.SipMultipartPartVector_end(self)

    def rbegin(self):
        return _pjsua2.SipMultipartPartVector_rbegin(self)

    def rend(self):
        return _pjsua2.SipMultipartPartVector_rend(self)

    def clear(self):
        return _pjsua2.SipMultipartPartVector_clear(self)

    def get_allocator(self):
        return _pjsua2.SipMultipartPartVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.SipMultipartPartVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.SipMultipartPartVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_SipMultipartPartVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.SipMultipartPartVector_push_back(self, x)

    def front(self):
        return _pjsua2.SipMultipartPartVector_front(self)

    def back(self):
        return _pjsua2.SipMultipartPartVector_back(self)

    def assign(self, n, x):
        return _pjsua2.SipMultipartPartVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.SipMultipartPartVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.SipMultipartPartVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.SipMultipartPartVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.SipMultipartPartVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_SipMultipartPartVector
    __del__ = lambda self: None
SipMultipartPartVector_swigregister = _pjsua2.SipMultipartPartVector_swigregister
SipMultipartPartVector_swigregister(SipMultipartPartVector)

class BuddyVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuddyVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BuddyVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.BuddyVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.BuddyVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.BuddyVector___bool__(self)

    def __len__(self):
        return _pjsua2.BuddyVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.BuddyVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.BuddyVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.BuddyVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.BuddyVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.BuddyVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.BuddyVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.BuddyVector_pop(self)

    def append(self, x):
        return _pjsua2.BuddyVector_append(self, x)

    def empty(self):
        return _pjsua2.BuddyVector_empty(self)

    def size(self):
        return _pjsua2.BuddyVector_size(self)

    def swap(self, v):
        return _pjsua2.BuddyVector_swap(self, v)

    def begin(self):
        return _pjsua2.BuddyVector_begin(self)

    def end(self):
        return _pjsua2.BuddyVector_end(self)

    def rbegin(self):
        return _pjsua2.BuddyVector_rbegin(self)

    def rend(self):
        return _pjsua2.BuddyVector_rend(self)

    def clear(self):
        return _pjsua2.BuddyVector_clear(self)

    def get_allocator(self):
        return _pjsua2.BuddyVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.BuddyVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.BuddyVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_BuddyVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.BuddyVector_push_back(self, x)

    def front(self):
        return _pjsua2.BuddyVector_front(self)

    def back(self):
        return _pjsua2.BuddyVector_back(self)

    def assign(self, n, x):
        return _pjsua2.BuddyVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.BuddyVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.BuddyVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.BuddyVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.BuddyVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_BuddyVector
    __del__ = lambda self: None
BuddyVector_swigregister = _pjsua2.BuddyVector_swigregister
BuddyVector_swigregister(BuddyVector)

class BuddyVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuddyVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BuddyVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.BuddyVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.BuddyVector2___nonzero__(self)

    def __bool__(self):
        return _pjsua2.BuddyVector2___bool__(self)

    def __len__(self):
        return _pjsua2.BuddyVector2___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.BuddyVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.BuddyVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.BuddyVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.BuddyVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.BuddyVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.BuddyVector2___setitem__(self, *args)

    def pop(self):
        return _pjsua2.BuddyVector2_pop(self)

    def append(self, x):
        return _pjsua2.BuddyVector2_append(self, x)

    def empty(self):
        return _pjsua2.BuddyVector2_empty(self)

    def size(self):
        return _pjsua2.BuddyVector2_size(self)

    def swap(self, v):
        return _pjsua2.BuddyVector2_swap(self, v)

    def begin(self):
        return _pjsua2.BuddyVector2_begin(self)

    def end(self):
        return _pjsua2.BuddyVector2_end(self)

    def rbegin(self):
        return _pjsua2.BuddyVector2_rbegin(self)

    def rend(self):
        return _pjsua2.BuddyVector2_rend(self)

    def clear(self):
        return _pjsua2.BuddyVector2_clear(self)

    def get_allocator(self):
        return _pjsua2.BuddyVector2_get_allocator(self)

    def pop_back(self):
        return _pjsua2.BuddyVector2_pop_back(self)

    def erase(self, *args):
        return _pjsua2.BuddyVector2_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_BuddyVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.BuddyVector2_push_back(self, x)

    def front(self):
        return _pjsua2.BuddyVector2_front(self)

    def back(self):
        return _pjsua2.BuddyVector2_back(self)

    def assign(self, n, x):
        return _pjsua2.BuddyVector2_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.BuddyVector2_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.BuddyVector2_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.BuddyVector2_reserve(self, n)

    def capacity(self):
        return _pjsua2.BuddyVector2_capacity(self)
    __swig_destroy__ = _pjsua2.delete_BuddyVector2
    __del__ = lambda self: None
BuddyVector2_swigregister = _pjsua2.BuddyVector2_swigregister
BuddyVector2_swigregister(BuddyVector2)

class AudioMediaVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioMediaVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioMediaVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.AudioMediaVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.AudioMediaVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.AudioMediaVector___bool__(self)

    def __len__(self):
        return _pjsua2.AudioMediaVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.AudioMediaVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.AudioMediaVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.AudioMediaVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.AudioMediaVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.AudioMediaVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.AudioMediaVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.AudioMediaVector_pop(self)

    def append(self, x):
        return _pjsua2.AudioMediaVector_append(self, x)

    def empty(self):
        return _pjsua2.AudioMediaVector_empty(self)

    def size(self):
        return _pjsua2.AudioMediaVector_size(self)

    def swap(self, v):
        return _pjsua2.AudioMediaVector_swap(self, v)

    def begin(self):
        return _pjsua2.AudioMediaVector_begin(self)

    def end(self):
        return _pjsua2.AudioMediaVector_end(self)

    def rbegin(self):
        return _pjsua2.AudioMediaVector_rbegin(self)

    def rend(self):
        return _pjsua2.AudioMediaVector_rend(self)

    def clear(self):
        return _pjsua2.AudioMediaVector_clear(self)

    def get_allocator(self):
        return _pjsua2.AudioMediaVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.AudioMediaVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.AudioMediaVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_AudioMediaVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.AudioMediaVector_push_back(self, x)

    def front(self):
        return _pjsua2.AudioMediaVector_front(self)

    def back(self):
        return _pjsua2.AudioMediaVector_back(self)

    def assign(self, n, x):
        return _pjsua2.AudioMediaVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.AudioMediaVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.AudioMediaVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.AudioMediaVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.AudioMediaVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_AudioMediaVector
    __del__ = lambda self: None
AudioMediaVector_swigregister = _pjsua2.AudioMediaVector_swigregister
AudioMediaVector_swigregister(AudioMediaVector)

class AudioMediaVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioMediaVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioMediaVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.AudioMediaVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.AudioMediaVector2___nonzero__(self)

    def __bool__(self):
        return _pjsua2.AudioMediaVector2___bool__(self)

    def __len__(self):
        return _pjsua2.AudioMediaVector2___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.AudioMediaVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.AudioMediaVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.AudioMediaVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.AudioMediaVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.AudioMediaVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.AudioMediaVector2___setitem__(self, *args)

    def pop(self):
        return _pjsua2.AudioMediaVector2_pop(self)

    def append(self, x):
        return _pjsua2.AudioMediaVector2_append(self, x)

    def empty(self):
        return _pjsua2.AudioMediaVector2_empty(self)

    def size(self):
        return _pjsua2.AudioMediaVector2_size(self)

    def swap(self, v):
        return _pjsua2.AudioMediaVector2_swap(self, v)

    def begin(self):
        return _pjsua2.AudioMediaVector2_begin(self)

    def end(self):
        return _pjsua2.AudioMediaVector2_end(self)

    def rbegin(self):
        return _pjsua2.AudioMediaVector2_rbegin(self)

    def rend(self):
        return _pjsua2.AudioMediaVector2_rend(self)

    def clear(self):
        return _pjsua2.AudioMediaVector2_clear(self)

    def get_allocator(self):
        return _pjsua2.AudioMediaVector2_get_allocator(self)

    def pop_back(self):
        return _pjsua2.AudioMediaVector2_pop_back(self)

    def erase(self, *args):
        return _pjsua2.AudioMediaVector2_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_AudioMediaVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.AudioMediaVector2_push_back(self, x)

    def front(self):
        return _pjsua2.AudioMediaVector2_front(self)

    def back(self):
        return _pjsua2.AudioMediaVector2_back(self)

    def assign(self, n, x):
        return _pjsua2.AudioMediaVector2_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.AudioMediaVector2_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.AudioMediaVector2_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.AudioMediaVector2_reserve(self, n)

    def capacity(self):
        return _pjsua2.AudioMediaVector2_capacity(self)
    __swig_destroy__ = _pjsua2.delete_AudioMediaVector2
    __del__ = lambda self: None
AudioMediaVector2_swigregister = _pjsua2.AudioMediaVector2_swigregister
AudioMediaVector2_swigregister(AudioMediaVector2)

class VideoMediaVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoMediaVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoMediaVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.VideoMediaVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.VideoMediaVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.VideoMediaVector___bool__(self)

    def __len__(self):
        return _pjsua2.VideoMediaVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.VideoMediaVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.VideoMediaVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.VideoMediaVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.VideoMediaVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.VideoMediaVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.VideoMediaVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.VideoMediaVector_pop(self)

    def append(self, x):
        return _pjsua2.VideoMediaVector_append(self, x)

    def empty(self):
        return _pjsua2.VideoMediaVector_empty(self)

    def size(self):
        return _pjsua2.VideoMediaVector_size(self)

    def swap(self, v):
        return _pjsua2.VideoMediaVector_swap(self, v)

    def begin(self):
        return _pjsua2.VideoMediaVector_begin(self)

    def end(self):
        return _pjsua2.VideoMediaVector_end(self)

    def rbegin(self):
        return _pjsua2.VideoMediaVector_rbegin(self)

    def rend(self):
        return _pjsua2.VideoMediaVector_rend(self)

    def clear(self):
        return _pjsua2.VideoMediaVector_clear(self)

    def get_allocator(self):
        return _pjsua2.VideoMediaVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.VideoMediaVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.VideoMediaVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_VideoMediaVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.VideoMediaVector_push_back(self, x)

    def front(self):
        return _pjsua2.VideoMediaVector_front(self)

    def back(self):
        return _pjsua2.VideoMediaVector_back(self)

    def assign(self, n, x):
        return _pjsua2.VideoMediaVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.VideoMediaVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.VideoMediaVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.VideoMediaVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.VideoMediaVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_VideoMediaVector
    __del__ = lambda self: None
VideoMediaVector_swigregister = _pjsua2.VideoMediaVector_swigregister
VideoMediaVector_swigregister(VideoMediaVector)

class ToneDescVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToneDescVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ToneDescVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.ToneDescVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.ToneDescVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.ToneDescVector___bool__(self)

    def __len__(self):
        return _pjsua2.ToneDescVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.ToneDescVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.ToneDescVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.ToneDescVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.ToneDescVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.ToneDescVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.ToneDescVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.ToneDescVector_pop(self)

    def append(self, x):
        return _pjsua2.ToneDescVector_append(self, x)

    def empty(self):
        return _pjsua2.ToneDescVector_empty(self)

    def size(self):
        return _pjsua2.ToneDescVector_size(self)

    def swap(self, v):
        return _pjsua2.ToneDescVector_swap(self, v)

    def begin(self):
        return _pjsua2.ToneDescVector_begin(self)

    def end(self):
        return _pjsua2.ToneDescVector_end(self)

    def rbegin(self):
        return _pjsua2.ToneDescVector_rbegin(self)

    def rend(self):
        return _pjsua2.ToneDescVector_rend(self)

    def clear(self):
        return _pjsua2.ToneDescVector_clear(self)

    def get_allocator(self):
        return _pjsua2.ToneDescVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.ToneDescVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.ToneDescVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_ToneDescVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.ToneDescVector_push_back(self, x)

    def front(self):
        return _pjsua2.ToneDescVector_front(self)

    def back(self):
        return _pjsua2.ToneDescVector_back(self)

    def assign(self, n, x):
        return _pjsua2.ToneDescVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.ToneDescVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.ToneDescVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.ToneDescVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.ToneDescVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_ToneDescVector
    __del__ = lambda self: None
ToneDescVector_swigregister = _pjsua2.ToneDescVector_swigregister
ToneDescVector_swigregister(ToneDescVector)

class ToneDigitVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToneDigitVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ToneDigitVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.ToneDigitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.ToneDigitVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.ToneDigitVector___bool__(self)

    def __len__(self):
        return _pjsua2.ToneDigitVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.ToneDigitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.ToneDigitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.ToneDigitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.ToneDigitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.ToneDigitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.ToneDigitVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.ToneDigitVector_pop(self)

    def append(self, x):
        return _pjsua2.ToneDigitVector_append(self, x)

    def empty(self):
        return _pjsua2.ToneDigitVector_empty(self)

    def size(self):
        return _pjsua2.ToneDigitVector_size(self)

    def swap(self, v):
        return _pjsua2.ToneDigitVector_swap(self, v)

    def begin(self):
        return _pjsua2.ToneDigitVector_begin(self)

    def end(self):
        return _pjsua2.ToneDigitVector_end(self)

    def rbegin(self):
        return _pjsua2.ToneDigitVector_rbegin(self)

    def rend(self):
        return _pjsua2.ToneDigitVector_rend(self)

    def clear(self):
        return _pjsua2.ToneDigitVector_clear(self)

    def get_allocator(self):
        return _pjsua2.ToneDigitVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.ToneDigitVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.ToneDigitVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_ToneDigitVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.ToneDigitVector_push_back(self, x)

    def front(self):
        return _pjsua2.ToneDigitVector_front(self)

    def back(self):
        return _pjsua2.ToneDigitVector_back(self)

    def assign(self, n, x):
        return _pjsua2.ToneDigitVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.ToneDigitVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.ToneDigitVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.ToneDigitVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.ToneDigitVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_ToneDigitVector
    __del__ = lambda self: None
ToneDigitVector_swigregister = _pjsua2.ToneDigitVector_swigregister
ToneDigitVector_swigregister(ToneDigitVector)

class ToneDigitMapVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToneDigitMapVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ToneDigitMapVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.ToneDigitMapVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.ToneDigitMapVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.ToneDigitMapVector___bool__(self)

    def __len__(self):
        return _pjsua2.ToneDigitMapVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.ToneDigitMapVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.ToneDigitMapVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.ToneDigitMapVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.ToneDigitMapVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.ToneDigitMapVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.ToneDigitMapVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.ToneDigitMapVector_pop(self)

    def append(self, x):
        return _pjsua2.ToneDigitMapVector_append(self, x)

    def empty(self):
        return _pjsua2.ToneDigitMapVector_empty(self)

    def size(self):
        return _pjsua2.ToneDigitMapVector_size(self)

    def swap(self, v):
        return _pjsua2.ToneDigitMapVector_swap(self, v)

    def begin(self):
        return _pjsua2.ToneDigitMapVector_begin(self)

    def end(self):
        return _pjsua2.ToneDigitMapVector_end(self)

    def rbegin(self):
        return _pjsua2.ToneDigitMapVector_rbegin(self)

    def rend(self):
        return _pjsua2.ToneDigitMapVector_rend(self)

    def clear(self):
        return _pjsua2.ToneDigitMapVector_clear(self)

    def get_allocator(self):
        return _pjsua2.ToneDigitMapVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.ToneDigitMapVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.ToneDigitMapVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_ToneDigitMapVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.ToneDigitMapVector_push_back(self, x)

    def front(self):
        return _pjsua2.ToneDigitMapVector_front(self)

    def back(self):
        return _pjsua2.ToneDigitMapVector_back(self)

    def assign(self, n, x):
        return _pjsua2.ToneDigitMapVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.ToneDigitMapVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.ToneDigitMapVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.ToneDigitMapVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.ToneDigitMapVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_ToneDigitMapVector
    __del__ = lambda self: None
ToneDigitMapVector_swigregister = _pjsua2.ToneDigitMapVector_swigregister
ToneDigitMapVector_swigregister(ToneDigitMapVector)

class AudioDevInfoVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioDevInfoVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioDevInfoVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.AudioDevInfoVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.AudioDevInfoVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.AudioDevInfoVector___bool__(self)

    def __len__(self):
        return _pjsua2.AudioDevInfoVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.AudioDevInfoVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.AudioDevInfoVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.AudioDevInfoVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.AudioDevInfoVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.AudioDevInfoVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.AudioDevInfoVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.AudioDevInfoVector_pop(self)

    def append(self, x):
        return _pjsua2.AudioDevInfoVector_append(self, x)

    def empty(self):
        return _pjsua2.AudioDevInfoVector_empty(self)

    def size(self):
        return _pjsua2.AudioDevInfoVector_size(self)

    def swap(self, v):
        return _pjsua2.AudioDevInfoVector_swap(self, v)

    def begin(self):
        return _pjsua2.AudioDevInfoVector_begin(self)

    def end(self):
        return _pjsua2.AudioDevInfoVector_end(self)

    def rbegin(self):
        return _pjsua2.AudioDevInfoVector_rbegin(self)

    def rend(self):
        return _pjsua2.AudioDevInfoVector_rend(self)

    def clear(self):
        return _pjsua2.AudioDevInfoVector_clear(self)

    def get_allocator(self):
        return _pjsua2.AudioDevInfoVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.AudioDevInfoVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.AudioDevInfoVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_AudioDevInfoVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.AudioDevInfoVector_push_back(self, x)

    def front(self):
        return _pjsua2.AudioDevInfoVector_front(self)

    def back(self):
        return _pjsua2.AudioDevInfoVector_back(self)

    def assign(self, n, x):
        return _pjsua2.AudioDevInfoVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.AudioDevInfoVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.AudioDevInfoVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.AudioDevInfoVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.AudioDevInfoVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_AudioDevInfoVector
    __del__ = lambda self: None
AudioDevInfoVector_swigregister = _pjsua2.AudioDevInfoVector_swigregister
AudioDevInfoVector_swigregister(AudioDevInfoVector)

class AudioDevInfoVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioDevInfoVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioDevInfoVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.AudioDevInfoVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.AudioDevInfoVector2___nonzero__(self)

    def __bool__(self):
        return _pjsua2.AudioDevInfoVector2___bool__(self)

    def __len__(self):
        return _pjsua2.AudioDevInfoVector2___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.AudioDevInfoVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.AudioDevInfoVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.AudioDevInfoVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.AudioDevInfoVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.AudioDevInfoVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.AudioDevInfoVector2___setitem__(self, *args)

    def pop(self):
        return _pjsua2.AudioDevInfoVector2_pop(self)

    def append(self, x):
        return _pjsua2.AudioDevInfoVector2_append(self, x)

    def empty(self):
        return _pjsua2.AudioDevInfoVector2_empty(self)

    def size(self):
        return _pjsua2.AudioDevInfoVector2_size(self)

    def swap(self, v):
        return _pjsua2.AudioDevInfoVector2_swap(self, v)

    def begin(self):
        return _pjsua2.AudioDevInfoVector2_begin(self)

    def end(self):
        return _pjsua2.AudioDevInfoVector2_end(self)

    def rbegin(self):
        return _pjsua2.AudioDevInfoVector2_rbegin(self)

    def rend(self):
        return _pjsua2.AudioDevInfoVector2_rend(self)

    def clear(self):
        return _pjsua2.AudioDevInfoVector2_clear(self)

    def get_allocator(self):
        return _pjsua2.AudioDevInfoVector2_get_allocator(self)

    def pop_back(self):
        return _pjsua2.AudioDevInfoVector2_pop_back(self)

    def erase(self, *args):
        return _pjsua2.AudioDevInfoVector2_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_AudioDevInfoVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.AudioDevInfoVector2_push_back(self, x)

    def front(self):
        return _pjsua2.AudioDevInfoVector2_front(self)

    def back(self):
        return _pjsua2.AudioDevInfoVector2_back(self)

    def assign(self, n, x):
        return _pjsua2.AudioDevInfoVector2_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.AudioDevInfoVector2_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.AudioDevInfoVector2_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.AudioDevInfoVector2_reserve(self, n)

    def capacity(self):
        return _pjsua2.AudioDevInfoVector2_capacity(self)
    __swig_destroy__ = _pjsua2.delete_AudioDevInfoVector2
    __del__ = lambda self: None
AudioDevInfoVector2_swigregister = _pjsua2.AudioDevInfoVector2_swigregister
AudioDevInfoVector2_swigregister(AudioDevInfoVector2)

class CodecInfoVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodecInfoVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodecInfoVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.CodecInfoVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.CodecInfoVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.CodecInfoVector___bool__(self)

    def __len__(self):
        return _pjsua2.CodecInfoVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.CodecInfoVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.CodecInfoVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.CodecInfoVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.CodecInfoVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.CodecInfoVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.CodecInfoVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.CodecInfoVector_pop(self)

    def append(self, x):
        return _pjsua2.CodecInfoVector_append(self, x)

    def empty(self):
        return _pjsua2.CodecInfoVector_empty(self)

    def size(self):
        return _pjsua2.CodecInfoVector_size(self)

    def swap(self, v):
        return _pjsua2.CodecInfoVector_swap(self, v)

    def begin(self):
        return _pjsua2.CodecInfoVector_begin(self)

    def end(self):
        return _pjsua2.CodecInfoVector_end(self)

    def rbegin(self):
        return _pjsua2.CodecInfoVector_rbegin(self)

    def rend(self):
        return _pjsua2.CodecInfoVector_rend(self)

    def clear(self):
        return _pjsua2.CodecInfoVector_clear(self)

    def get_allocator(self):
        return _pjsua2.CodecInfoVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.CodecInfoVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.CodecInfoVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_CodecInfoVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.CodecInfoVector_push_back(self, x)

    def front(self):
        return _pjsua2.CodecInfoVector_front(self)

    def back(self):
        return _pjsua2.CodecInfoVector_back(self)

    def assign(self, n, x):
        return _pjsua2.CodecInfoVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.CodecInfoVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.CodecInfoVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.CodecInfoVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.CodecInfoVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_CodecInfoVector
    __del__ = lambda self: None
CodecInfoVector_swigregister = _pjsua2.CodecInfoVector_swigregister
CodecInfoVector_swigregister(CodecInfoVector)

class CodecInfoVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodecInfoVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodecInfoVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.CodecInfoVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.CodecInfoVector2___nonzero__(self)

    def __bool__(self):
        return _pjsua2.CodecInfoVector2___bool__(self)

    def __len__(self):
        return _pjsua2.CodecInfoVector2___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.CodecInfoVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.CodecInfoVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.CodecInfoVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.CodecInfoVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.CodecInfoVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.CodecInfoVector2___setitem__(self, *args)

    def pop(self):
        return _pjsua2.CodecInfoVector2_pop(self)

    def append(self, x):
        return _pjsua2.CodecInfoVector2_append(self, x)

    def empty(self):
        return _pjsua2.CodecInfoVector2_empty(self)

    def size(self):
        return _pjsua2.CodecInfoVector2_size(self)

    def swap(self, v):
        return _pjsua2.CodecInfoVector2_swap(self, v)

    def begin(self):
        return _pjsua2.CodecInfoVector2_begin(self)

    def end(self):
        return _pjsua2.CodecInfoVector2_end(self)

    def rbegin(self):
        return _pjsua2.CodecInfoVector2_rbegin(self)

    def rend(self):
        return _pjsua2.CodecInfoVector2_rend(self)

    def clear(self):
        return _pjsua2.CodecInfoVector2_clear(self)

    def get_allocator(self):
        return _pjsua2.CodecInfoVector2_get_allocator(self)

    def pop_back(self):
        return _pjsua2.CodecInfoVector2_pop_back(self)

    def erase(self, *args):
        return _pjsua2.CodecInfoVector2_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_CodecInfoVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.CodecInfoVector2_push_back(self, x)

    def front(self):
        return _pjsua2.CodecInfoVector2_front(self)

    def back(self):
        return _pjsua2.CodecInfoVector2_back(self)

    def assign(self, n, x):
        return _pjsua2.CodecInfoVector2_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.CodecInfoVector2_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.CodecInfoVector2_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.CodecInfoVector2_reserve(self, n)

    def capacity(self):
        return _pjsua2.CodecInfoVector2_capacity(self)
    __swig_destroy__ = _pjsua2.delete_CodecInfoVector2
    __del__ = lambda self: None
CodecInfoVector2_swigregister = _pjsua2.CodecInfoVector2_swigregister
CodecInfoVector2_swigregister(CodecInfoVector2)

class VideoDevInfoVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoDevInfoVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoDevInfoVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.VideoDevInfoVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.VideoDevInfoVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.VideoDevInfoVector___bool__(self)

    def __len__(self):
        return _pjsua2.VideoDevInfoVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.VideoDevInfoVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.VideoDevInfoVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.VideoDevInfoVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.VideoDevInfoVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.VideoDevInfoVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.VideoDevInfoVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.VideoDevInfoVector_pop(self)

    def append(self, x):
        return _pjsua2.VideoDevInfoVector_append(self, x)

    def empty(self):
        return _pjsua2.VideoDevInfoVector_empty(self)

    def size(self):
        return _pjsua2.VideoDevInfoVector_size(self)

    def swap(self, v):
        return _pjsua2.VideoDevInfoVector_swap(self, v)

    def begin(self):
        return _pjsua2.VideoDevInfoVector_begin(self)

    def end(self):
        return _pjsua2.VideoDevInfoVector_end(self)

    def rbegin(self):
        return _pjsua2.VideoDevInfoVector_rbegin(self)

    def rend(self):
        return _pjsua2.VideoDevInfoVector_rend(self)

    def clear(self):
        return _pjsua2.VideoDevInfoVector_clear(self)

    def get_allocator(self):
        return _pjsua2.VideoDevInfoVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.VideoDevInfoVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.VideoDevInfoVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_VideoDevInfoVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.VideoDevInfoVector_push_back(self, x)

    def front(self):
        return _pjsua2.VideoDevInfoVector_front(self)

    def back(self):
        return _pjsua2.VideoDevInfoVector_back(self)

    def assign(self, n, x):
        return _pjsua2.VideoDevInfoVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.VideoDevInfoVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.VideoDevInfoVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.VideoDevInfoVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.VideoDevInfoVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_VideoDevInfoVector
    __del__ = lambda self: None
VideoDevInfoVector_swigregister = _pjsua2.VideoDevInfoVector_swigregister
VideoDevInfoVector_swigregister(VideoDevInfoVector)

class VideoDevInfoVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoDevInfoVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoDevInfoVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.VideoDevInfoVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.VideoDevInfoVector2___nonzero__(self)

    def __bool__(self):
        return _pjsua2.VideoDevInfoVector2___bool__(self)

    def __len__(self):
        return _pjsua2.VideoDevInfoVector2___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.VideoDevInfoVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.VideoDevInfoVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.VideoDevInfoVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.VideoDevInfoVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.VideoDevInfoVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.VideoDevInfoVector2___setitem__(self, *args)

    def pop(self):
        return _pjsua2.VideoDevInfoVector2_pop(self)

    def append(self, x):
        return _pjsua2.VideoDevInfoVector2_append(self, x)

    def empty(self):
        return _pjsua2.VideoDevInfoVector2_empty(self)

    def size(self):
        return _pjsua2.VideoDevInfoVector2_size(self)

    def swap(self, v):
        return _pjsua2.VideoDevInfoVector2_swap(self, v)

    def begin(self):
        return _pjsua2.VideoDevInfoVector2_begin(self)

    def end(self):
        return _pjsua2.VideoDevInfoVector2_end(self)

    def rbegin(self):
        return _pjsua2.VideoDevInfoVector2_rbegin(self)

    def rend(self):
        return _pjsua2.VideoDevInfoVector2_rend(self)

    def clear(self):
        return _pjsua2.VideoDevInfoVector2_clear(self)

    def get_allocator(self):
        return _pjsua2.VideoDevInfoVector2_get_allocator(self)

    def pop_back(self):
        return _pjsua2.VideoDevInfoVector2_pop_back(self)

    def erase(self, *args):
        return _pjsua2.VideoDevInfoVector2_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_VideoDevInfoVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.VideoDevInfoVector2_push_back(self, x)

    def front(self):
        return _pjsua2.VideoDevInfoVector2_front(self)

    def back(self):
        return _pjsua2.VideoDevInfoVector2_back(self)

    def assign(self, n, x):
        return _pjsua2.VideoDevInfoVector2_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.VideoDevInfoVector2_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.VideoDevInfoVector2_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.VideoDevInfoVector2_reserve(self, n)

    def capacity(self):
        return _pjsua2.VideoDevInfoVector2_capacity(self)
    __swig_destroy__ = _pjsua2.delete_VideoDevInfoVector2
    __del__ = lambda self: None
VideoDevInfoVector2_swigregister = _pjsua2.VideoDevInfoVector2_swigregister
VideoDevInfoVector2_swigregister(VideoDevInfoVector2)

class CodecFmtpVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodecFmtpVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodecFmtpVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.CodecFmtpVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.CodecFmtpVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.CodecFmtpVector___bool__(self)

    def __len__(self):
        return _pjsua2.CodecFmtpVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.CodecFmtpVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.CodecFmtpVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.CodecFmtpVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.CodecFmtpVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.CodecFmtpVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.CodecFmtpVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.CodecFmtpVector_pop(self)

    def append(self, x):
        return _pjsua2.CodecFmtpVector_append(self, x)

    def empty(self):
        return _pjsua2.CodecFmtpVector_empty(self)

    def size(self):
        return _pjsua2.CodecFmtpVector_size(self)

    def swap(self, v):
        return _pjsua2.CodecFmtpVector_swap(self, v)

    def begin(self):
        return _pjsua2.CodecFmtpVector_begin(self)

    def end(self):
        return _pjsua2.CodecFmtpVector_end(self)

    def rbegin(self):
        return _pjsua2.CodecFmtpVector_rbegin(self)

    def rend(self):
        return _pjsua2.CodecFmtpVector_rend(self)

    def clear(self):
        return _pjsua2.CodecFmtpVector_clear(self)

    def get_allocator(self):
        return _pjsua2.CodecFmtpVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.CodecFmtpVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.CodecFmtpVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_CodecFmtpVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.CodecFmtpVector_push_back(self, x)

    def front(self):
        return _pjsua2.CodecFmtpVector_front(self)

    def back(self):
        return _pjsua2.CodecFmtpVector_back(self)

    def assign(self, n, x):
        return _pjsua2.CodecFmtpVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.CodecFmtpVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.CodecFmtpVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.CodecFmtpVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.CodecFmtpVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_CodecFmtpVector
    __del__ = lambda self: None
CodecFmtpVector_swigregister = _pjsua2.CodecFmtpVector_swigregister
CodecFmtpVector_swigregister(CodecFmtpVector)

class MediaFormatAudioVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaFormatAudioVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MediaFormatAudioVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.MediaFormatAudioVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.MediaFormatAudioVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.MediaFormatAudioVector___bool__(self)

    def __len__(self):
        return _pjsua2.MediaFormatAudioVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.MediaFormatAudioVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.MediaFormatAudioVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.MediaFormatAudioVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.MediaFormatAudioVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.MediaFormatAudioVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.MediaFormatAudioVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.MediaFormatAudioVector_pop(self)

    def append(self, x):
        return _pjsua2.MediaFormatAudioVector_append(self, x)

    def empty(self):
        return _pjsua2.MediaFormatAudioVector_empty(self)

    def size(self):
        return _pjsua2.MediaFormatAudioVector_size(self)

    def swap(self, v):
        return _pjsua2.MediaFormatAudioVector_swap(self, v)

    def begin(self):
        return _pjsua2.MediaFormatAudioVector_begin(self)

    def end(self):
        return _pjsua2.MediaFormatAudioVector_end(self)

    def rbegin(self):
        return _pjsua2.MediaFormatAudioVector_rbegin(self)

    def rend(self):
        return _pjsua2.MediaFormatAudioVector_rend(self)

    def clear(self):
        return _pjsua2.MediaFormatAudioVector_clear(self)

    def get_allocator(self):
        return _pjsua2.MediaFormatAudioVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.MediaFormatAudioVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.MediaFormatAudioVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_MediaFormatAudioVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.MediaFormatAudioVector_push_back(self, x)

    def front(self):
        return _pjsua2.MediaFormatAudioVector_front(self)

    def back(self):
        return _pjsua2.MediaFormatAudioVector_back(self)

    def assign(self, n, x):
        return _pjsua2.MediaFormatAudioVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.MediaFormatAudioVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.MediaFormatAudioVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.MediaFormatAudioVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.MediaFormatAudioVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_MediaFormatAudioVector
    __del__ = lambda self: None
MediaFormatAudioVector_swigregister = _pjsua2.MediaFormatAudioVector_swigregister
MediaFormatAudioVector_swigregister(MediaFormatAudioVector)

class MediaFormatVideoVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaFormatVideoVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MediaFormatVideoVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.MediaFormatVideoVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.MediaFormatVideoVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.MediaFormatVideoVector___bool__(self)

    def __len__(self):
        return _pjsua2.MediaFormatVideoVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.MediaFormatVideoVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.MediaFormatVideoVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.MediaFormatVideoVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.MediaFormatVideoVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.MediaFormatVideoVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.MediaFormatVideoVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.MediaFormatVideoVector_pop(self)

    def append(self, x):
        return _pjsua2.MediaFormatVideoVector_append(self, x)

    def empty(self):
        return _pjsua2.MediaFormatVideoVector_empty(self)

    def size(self):
        return _pjsua2.MediaFormatVideoVector_size(self)

    def swap(self, v):
        return _pjsua2.MediaFormatVideoVector_swap(self, v)

    def begin(self):
        return _pjsua2.MediaFormatVideoVector_begin(self)

    def end(self):
        return _pjsua2.MediaFormatVideoVector_end(self)

    def rbegin(self):
        return _pjsua2.MediaFormatVideoVector_rbegin(self)

    def rend(self):
        return _pjsua2.MediaFormatVideoVector_rend(self)

    def clear(self):
        return _pjsua2.MediaFormatVideoVector_clear(self)

    def get_allocator(self):
        return _pjsua2.MediaFormatVideoVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.MediaFormatVideoVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.MediaFormatVideoVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_MediaFormatVideoVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.MediaFormatVideoVector_push_back(self, x)

    def front(self):
        return _pjsua2.MediaFormatVideoVector_front(self)

    def back(self):
        return _pjsua2.MediaFormatVideoVector_back(self)

    def assign(self, n, x):
        return _pjsua2.MediaFormatVideoVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.MediaFormatVideoVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.MediaFormatVideoVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.MediaFormatVideoVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.MediaFormatVideoVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_MediaFormatVideoVector
    __del__ = lambda self: None
MediaFormatVideoVector_swigregister = _pjsua2.MediaFormatVideoVector_swigregister
MediaFormatVideoVector_swigregister(MediaFormatVideoVector)

class CallMediaInfoVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallMediaInfoVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallMediaInfoVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.CallMediaInfoVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.CallMediaInfoVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.CallMediaInfoVector___bool__(self)

    def __len__(self):
        return _pjsua2.CallMediaInfoVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.CallMediaInfoVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.CallMediaInfoVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.CallMediaInfoVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.CallMediaInfoVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.CallMediaInfoVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.CallMediaInfoVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.CallMediaInfoVector_pop(self)

    def append(self, x):
        return _pjsua2.CallMediaInfoVector_append(self, x)

    def empty(self):
        return _pjsua2.CallMediaInfoVector_empty(self)

    def size(self):
        return _pjsua2.CallMediaInfoVector_size(self)

    def swap(self, v):
        return _pjsua2.CallMediaInfoVector_swap(self, v)

    def begin(self):
        return _pjsua2.CallMediaInfoVector_begin(self)

    def end(self):
        return _pjsua2.CallMediaInfoVector_end(self)

    def rbegin(self):
        return _pjsua2.CallMediaInfoVector_rbegin(self)

    def rend(self):
        return _pjsua2.CallMediaInfoVector_rend(self)

    def clear(self):
        return _pjsua2.CallMediaInfoVector_clear(self)

    def get_allocator(self):
        return _pjsua2.CallMediaInfoVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.CallMediaInfoVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.CallMediaInfoVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_CallMediaInfoVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.CallMediaInfoVector_push_back(self, x)

    def front(self):
        return _pjsua2.CallMediaInfoVector_front(self)

    def back(self):
        return _pjsua2.CallMediaInfoVector_back(self)

    def assign(self, n, x):
        return _pjsua2.CallMediaInfoVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.CallMediaInfoVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.CallMediaInfoVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.CallMediaInfoVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.CallMediaInfoVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_CallMediaInfoVector
    __del__ = lambda self: None
CallMediaInfoVector_swigregister = _pjsua2.CallMediaInfoVector_swigregister
CallMediaInfoVector_swigregister(CallMediaInfoVector)

class RtcpFbCapVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RtcpFbCapVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RtcpFbCapVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.RtcpFbCapVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.RtcpFbCapVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.RtcpFbCapVector___bool__(self)

    def __len__(self):
        return _pjsua2.RtcpFbCapVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.RtcpFbCapVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.RtcpFbCapVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.RtcpFbCapVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.RtcpFbCapVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.RtcpFbCapVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.RtcpFbCapVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.RtcpFbCapVector_pop(self)

    def append(self, x):
        return _pjsua2.RtcpFbCapVector_append(self, x)

    def empty(self):
        return _pjsua2.RtcpFbCapVector_empty(self)

    def size(self):
        return _pjsua2.RtcpFbCapVector_size(self)

    def swap(self, v):
        return _pjsua2.RtcpFbCapVector_swap(self, v)

    def begin(self):
        return _pjsua2.RtcpFbCapVector_begin(self)

    def end(self):
        return _pjsua2.RtcpFbCapVector_end(self)

    def rbegin(self):
        return _pjsua2.RtcpFbCapVector_rbegin(self)

    def rend(self):
        return _pjsua2.RtcpFbCapVector_rend(self)

    def clear(self):
        return _pjsua2.RtcpFbCapVector_clear(self)

    def get_allocator(self):
        return _pjsua2.RtcpFbCapVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.RtcpFbCapVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.RtcpFbCapVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_RtcpFbCapVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.RtcpFbCapVector_push_back(self, x)

    def front(self):
        return _pjsua2.RtcpFbCapVector_front(self)

    def back(self):
        return _pjsua2.RtcpFbCapVector_back(self)

    def assign(self, n, x):
        return _pjsua2.RtcpFbCapVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.RtcpFbCapVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.RtcpFbCapVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.RtcpFbCapVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.RtcpFbCapVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_RtcpFbCapVector
    __del__ = lambda self: None
RtcpFbCapVector_swigregister = _pjsua2.RtcpFbCapVector_swigregister
RtcpFbCapVector_swigregister(RtcpFbCapVector)

class SslCertNameVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SslCertNameVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SslCertNameVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pjsua2.SslCertNameVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pjsua2.SslCertNameVector___nonzero__(self)

    def __bool__(self):
        return _pjsua2.SslCertNameVector___bool__(self)

    def __len__(self):
        return _pjsua2.SslCertNameVector___len__(self)

    def __getslice__(self, i, j):
        return _pjsua2.SslCertNameVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pjsua2.SslCertNameVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pjsua2.SslCertNameVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pjsua2.SslCertNameVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pjsua2.SslCertNameVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pjsua2.SslCertNameVector___setitem__(self, *args)

    def pop(self):
        return _pjsua2.SslCertNameVector_pop(self)

    def append(self, x):
        return _pjsua2.SslCertNameVector_append(self, x)

    def empty(self):
        return _pjsua2.SslCertNameVector_empty(self)

    def size(self):
        return _pjsua2.SslCertNameVector_size(self)

    def swap(self, v):
        return _pjsua2.SslCertNameVector_swap(self, v)

    def begin(self):
        return _pjsua2.SslCertNameVector_begin(self)

    def end(self):
        return _pjsua2.SslCertNameVector_end(self)

    def rbegin(self):
        return _pjsua2.SslCertNameVector_rbegin(self)

    def rend(self):
        return _pjsua2.SslCertNameVector_rend(self)

    def clear(self):
        return _pjsua2.SslCertNameVector_clear(self)

    def get_allocator(self):
        return _pjsua2.SslCertNameVector_get_allocator(self)

    def pop_back(self):
        return _pjsua2.SslCertNameVector_pop_back(self)

    def erase(self, *args):
        return _pjsua2.SslCertNameVector_erase(self, *args)

    def __init__(self, *args):
        this = _pjsua2.new_SslCertNameVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pjsua2.SslCertNameVector_push_back(self, x)

    def front(self):
        return _pjsua2.SslCertNameVector_front(self)

    def back(self):
        return _pjsua2.SslCertNameVector_back(self)

    def assign(self, n, x):
        return _pjsua2.SslCertNameVector_assign(self, n, x)

    def resize(self, *args):
        return _pjsua2.SslCertNameVector_resize(self, *args)

    def insert(self, *args):
        return _pjsua2.SslCertNameVector_insert(self, *args)

    def reserve(self, n):
        return _pjsua2.SslCertNameVector_reserve(self, n)

    def capacity(self):
        return _pjsua2.SslCertNameVector_capacity(self)
    __swig_destroy__ = _pjsua2.delete_SslCertNameVector
    __del__ = lambda self: None
SslCertNameVector_swigregister = _pjsua2.SslCertNameVector_swigregister
SslCertNameVector_swigregister(SslCertNameVector)

class MediaFormat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaFormat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MediaFormat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _pjsua2.MediaFormat_id_set
    __swig_getmethods__["id"] = _pjsua2.MediaFormat_id_get
    if _newclass:
        id = _swig_property(_pjsua2.MediaFormat_id_get, _pjsua2.MediaFormat_id_set)
    __swig_setmethods__["type"] = _pjsua2.MediaFormat_type_set
    __swig_getmethods__["type"] = _pjsua2.MediaFormat_type_get
    if _newclass:
        type = _swig_property(_pjsua2.MediaFormat_type_get, _pjsua2.MediaFormat_type_set)

    def __init__(self):
        this = _pjsua2.new_MediaFormat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_MediaFormat
    __del__ = lambda self: None
MediaFormat_swigregister = _pjsua2.MediaFormat_swigregister
MediaFormat_swigregister(MediaFormat)

class MediaFormatAudio(MediaFormat):
    __swig_setmethods__ = {}
    for _s in [MediaFormat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaFormatAudio, name, value)
    __swig_getmethods__ = {}
    for _s in [MediaFormat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MediaFormatAudio, name)
    __repr__ = _swig_repr
    __swig_setmethods__["clockRate"] = _pjsua2.MediaFormatAudio_clockRate_set
    __swig_getmethods__["clockRate"] = _pjsua2.MediaFormatAudio_clockRate_get
    if _newclass:
        clockRate = _swig_property(_pjsua2.MediaFormatAudio_clockRate_get, _pjsua2.MediaFormatAudio_clockRate_set)
    __swig_setmethods__["channelCount"] = _pjsua2.MediaFormatAudio_channelCount_set
    __swig_getmethods__["channelCount"] = _pjsua2.MediaFormatAudio_channelCount_get
    if _newclass:
        channelCount = _swig_property(_pjsua2.MediaFormatAudio_channelCount_get, _pjsua2.MediaFormatAudio_channelCount_set)
    __swig_setmethods__["frameTimeUsec"] = _pjsua2.MediaFormatAudio_frameTimeUsec_set
    __swig_getmethods__["frameTimeUsec"] = _pjsua2.MediaFormatAudio_frameTimeUsec_get
    if _newclass:
        frameTimeUsec = _swig_property(_pjsua2.MediaFormatAudio_frameTimeUsec_get, _pjsua2.MediaFormatAudio_frameTimeUsec_set)
    __swig_setmethods__["bitsPerSample"] = _pjsua2.MediaFormatAudio_bitsPerSample_set
    __swig_getmethods__["bitsPerSample"] = _pjsua2.MediaFormatAudio_bitsPerSample_get
    if _newclass:
        bitsPerSample = _swig_property(_pjsua2.MediaFormatAudio_bitsPerSample_get, _pjsua2.MediaFormatAudio_bitsPerSample_set)
    __swig_setmethods__["avgBps"] = _pjsua2.MediaFormatAudio_avgBps_set
    __swig_getmethods__["avgBps"] = _pjsua2.MediaFormatAudio_avgBps_get
    if _newclass:
        avgBps = _swig_property(_pjsua2.MediaFormatAudio_avgBps_get, _pjsua2.MediaFormatAudio_avgBps_set)
    __swig_setmethods__["maxBps"] = _pjsua2.MediaFormatAudio_maxBps_set
    __swig_getmethods__["maxBps"] = _pjsua2.MediaFormatAudio_maxBps_get
    if _newclass:
        maxBps = _swig_property(_pjsua2.MediaFormatAudio_maxBps_get, _pjsua2.MediaFormatAudio_maxBps_set)

    def __init__(self):
        this = _pjsua2.new_MediaFormatAudio()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_MediaFormatAudio
    __del__ = lambda self: None
MediaFormatAudio_swigregister = _pjsua2.MediaFormatAudio_swigregister
MediaFormatAudio_swigregister(MediaFormatAudio)

class MediaFormatVideo(MediaFormat):
    __swig_setmethods__ = {}
    for _s in [MediaFormat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaFormatVideo, name, value)
    __swig_getmethods__ = {}
    for _s in [MediaFormat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MediaFormatVideo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _pjsua2.MediaFormatVideo_width_set
    __swig_getmethods__["width"] = _pjsua2.MediaFormatVideo_width_get
    if _newclass:
        width = _swig_property(_pjsua2.MediaFormatVideo_width_get, _pjsua2.MediaFormatVideo_width_set)
    __swig_setmethods__["height"] = _pjsua2.MediaFormatVideo_height_set
    __swig_getmethods__["height"] = _pjsua2.MediaFormatVideo_height_get
    if _newclass:
        height = _swig_property(_pjsua2.MediaFormatVideo_height_get, _pjsua2.MediaFormatVideo_height_set)
    __swig_setmethods__["fpsNum"] = _pjsua2.MediaFormatVideo_fpsNum_set
    __swig_getmethods__["fpsNum"] = _pjsua2.MediaFormatVideo_fpsNum_get
    if _newclass:
        fpsNum = _swig_property(_pjsua2.MediaFormatVideo_fpsNum_get, _pjsua2.MediaFormatVideo_fpsNum_set)
    __swig_setmethods__["fpsDenum"] = _pjsua2.MediaFormatVideo_fpsDenum_set
    __swig_getmethods__["fpsDenum"] = _pjsua2.MediaFormatVideo_fpsDenum_get
    if _newclass:
        fpsDenum = _swig_property(_pjsua2.MediaFormatVideo_fpsDenum_get, _pjsua2.MediaFormatVideo_fpsDenum_set)
    __swig_setmethods__["avgBps"] = _pjsua2.MediaFormatVideo_avgBps_set
    __swig_getmethods__["avgBps"] = _pjsua2.MediaFormatVideo_avgBps_get
    if _newclass:
        avgBps = _swig_property(_pjsua2.MediaFormatVideo_avgBps_get, _pjsua2.MediaFormatVideo_avgBps_set)
    __swig_setmethods__["maxBps"] = _pjsua2.MediaFormatVideo_maxBps_set
    __swig_getmethods__["maxBps"] = _pjsua2.MediaFormatVideo_maxBps_get
    if _newclass:
        maxBps = _swig_property(_pjsua2.MediaFormatVideo_maxBps_get, _pjsua2.MediaFormatVideo_maxBps_set)

    def __init__(self):
        this = _pjsua2.new_MediaFormatVideo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_MediaFormatVideo
    __del__ = lambda self: None
MediaFormatVideo_swigregister = _pjsua2.MediaFormatVideo_swigregister
MediaFormatVideo_swigregister(MediaFormatVideo)

class ConfPortInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfPortInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfPortInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["portId"] = _pjsua2.ConfPortInfo_portId_set
    __swig_getmethods__["portId"] = _pjsua2.ConfPortInfo_portId_get
    if _newclass:
        portId = _swig_property(_pjsua2.ConfPortInfo_portId_get, _pjsua2.ConfPortInfo_portId_set)
    __swig_setmethods__["name"] = _pjsua2.ConfPortInfo_name_set
    __swig_getmethods__["name"] = _pjsua2.ConfPortInfo_name_get
    if _newclass:
        name = _swig_property(_pjsua2.ConfPortInfo_name_get, _pjsua2.ConfPortInfo_name_set)
    __swig_setmethods__["format"] = _pjsua2.ConfPortInfo_format_set
    __swig_getmethods__["format"] = _pjsua2.ConfPortInfo_format_get
    if _newclass:
        format = _swig_property(_pjsua2.ConfPortInfo_format_get, _pjsua2.ConfPortInfo_format_set)
    __swig_setmethods__["txLevelAdj"] = _pjsua2.ConfPortInfo_txLevelAdj_set
    __swig_getmethods__["txLevelAdj"] = _pjsua2.ConfPortInfo_txLevelAdj_get
    if _newclass:
        txLevelAdj = _swig_property(_pjsua2.ConfPortInfo_txLevelAdj_get, _pjsua2.ConfPortInfo_txLevelAdj_set)
    __swig_setmethods__["rxLevelAdj"] = _pjsua2.ConfPortInfo_rxLevelAdj_set
    __swig_getmethods__["rxLevelAdj"] = _pjsua2.ConfPortInfo_rxLevelAdj_get
    if _newclass:
        rxLevelAdj = _swig_property(_pjsua2.ConfPortInfo_rxLevelAdj_get, _pjsua2.ConfPortInfo_rxLevelAdj_set)
    __swig_setmethods__["listeners"] = _pjsua2.ConfPortInfo_listeners_set
    __swig_getmethods__["listeners"] = _pjsua2.ConfPortInfo_listeners_get
    if _newclass:
        listeners = _swig_property(_pjsua2.ConfPortInfo_listeners_get, _pjsua2.ConfPortInfo_listeners_set)

    def __init__(self):
        this = _pjsua2.new_ConfPortInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_ConfPortInfo
    __del__ = lambda self: None
ConfPortInfo_swigregister = _pjsua2.ConfPortInfo_swigregister
ConfPortInfo_swigregister(ConfPortInfo)

class Media(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Media, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Media, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pjsua2.delete_Media
    __del__ = lambda self: None

    def getType(self):
        return _pjsua2.Media_getType(self)
Media_swigregister = _pjsua2.Media_swigregister
Media_swigregister(Media)

class AudioMediaTransmitParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioMediaTransmitParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioMediaTransmitParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["level"] = _pjsua2.AudioMediaTransmitParam_level_set
    __swig_getmethods__["level"] = _pjsua2.AudioMediaTransmitParam_level_get
    if _newclass:
        level = _swig_property(_pjsua2.AudioMediaTransmitParam_level_get, _pjsua2.AudioMediaTransmitParam_level_set)

    def __init__(self):
        this = _pjsua2.new_AudioMediaTransmitParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_AudioMediaTransmitParam
    __del__ = lambda self: None
AudioMediaTransmitParam_swigregister = _pjsua2.AudioMediaTransmitParam_swigregister
AudioMediaTransmitParam_swigregister(AudioMediaTransmitParam)

class AudioMedia(Media):
    __swig_setmethods__ = {}
    for _s in [Media]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioMedia, name, value)
    __swig_getmethods__ = {}
    for _s in [Media]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AudioMedia, name)
    __repr__ = _swig_repr

    def getPortInfo(self):
        return _pjsua2.AudioMedia_getPortInfo(self)

    def getPortId(self):
        return _pjsua2.AudioMedia_getPortId(self)
    if _newclass:
        getPortInfoFromId = staticmethod(_pjsua2.AudioMedia_getPortInfoFromId)
    else:
        getPortInfoFromId = _pjsua2.AudioMedia_getPortInfoFromId

    def startTransmit(self, sink):
        return _pjsua2.AudioMedia_startTransmit(self, sink)

    def startTransmit2(self, sink, param):
        return _pjsua2.AudioMedia_startTransmit2(self, sink, param)

    def stopTransmit(self, sink):
        return _pjsua2.AudioMedia_stopTransmit(self, sink)

    def adjustRxLevel(self, level):
        return _pjsua2.AudioMedia_adjustRxLevel(self, level)

    def adjustTxLevel(self, level):
        return _pjsua2.AudioMedia_adjustTxLevel(self, level)

    def getRxLevel(self):
        return _pjsua2.AudioMedia_getRxLevel(self)

    def getTxLevel(self):
        return _pjsua2.AudioMedia_getTxLevel(self)
    if _newclass:
        typecastFromMedia = staticmethod(_pjsua2.AudioMedia_typecastFromMedia)
    else:
        typecastFromMedia = _pjsua2.AudioMedia_typecastFromMedia

    def __init__(self):
        this = _pjsua2.new_AudioMedia()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_AudioMedia
    __del__ = lambda self: None
AudioMedia_swigregister = _pjsua2.AudioMedia_swigregister
AudioMedia_swigregister(AudioMedia)

def AudioMedia_getPortInfoFromId(port_id):
    return _pjsua2.AudioMedia_getPortInfoFromId(port_id)
AudioMedia_getPortInfoFromId = _pjsua2.AudioMedia_getPortInfoFromId

def AudioMedia_typecastFromMedia(media):
    return _pjsua2.AudioMedia_typecastFromMedia(media)
AudioMedia_typecastFromMedia = _pjsua2.AudioMedia_typecastFromMedia

class AudioMediaPlayerInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioMediaPlayerInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioMediaPlayerInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["formatId"] = _pjsua2.AudioMediaPlayerInfo_formatId_set
    __swig_getmethods__["formatId"] = _pjsua2.AudioMediaPlayerInfo_formatId_get
    if _newclass:
        formatId = _swig_property(_pjsua2.AudioMediaPlayerInfo_formatId_get, _pjsua2.AudioMediaPlayerInfo_formatId_set)
    __swig_setmethods__["payloadBitsPerSample"] = _pjsua2.AudioMediaPlayerInfo_payloadBitsPerSample_set
    __swig_getmethods__["payloadBitsPerSample"] = _pjsua2.AudioMediaPlayerInfo_payloadBitsPerSample_get
    if _newclass:
        payloadBitsPerSample = _swig_property(_pjsua2.AudioMediaPlayerInfo_payloadBitsPerSample_get, _pjsua2.AudioMediaPlayerInfo_payloadBitsPerSample_set)
    __swig_setmethods__["sizeBytes"] = _pjsua2.AudioMediaPlayerInfo_sizeBytes_set
    __swig_getmethods__["sizeBytes"] = _pjsua2.AudioMediaPlayerInfo_sizeBytes_get
    if _newclass:
        sizeBytes = _swig_property(_pjsua2.AudioMediaPlayerInfo_sizeBytes_get, _pjsua2.AudioMediaPlayerInfo_sizeBytes_set)
    __swig_setmethods__["sizeSamples"] = _pjsua2.AudioMediaPlayerInfo_sizeSamples_set
    __swig_getmethods__["sizeSamples"] = _pjsua2.AudioMediaPlayerInfo_sizeSamples_get
    if _newclass:
        sizeSamples = _swig_property(_pjsua2.AudioMediaPlayerInfo_sizeSamples_get, _pjsua2.AudioMediaPlayerInfo_sizeSamples_set)

    def __init__(self):
        this = _pjsua2.new_AudioMediaPlayerInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_AudioMediaPlayerInfo
    __del__ = lambda self: None
AudioMediaPlayerInfo_swigregister = _pjsua2.AudioMediaPlayerInfo_swigregister
AudioMediaPlayerInfo_swigregister(AudioMediaPlayerInfo)

class AudioMediaPlayer(AudioMedia):
    __swig_setmethods__ = {}
    for _s in [AudioMedia]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioMediaPlayer, name, value)
    __swig_getmethods__ = {}
    for _s in [AudioMedia]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AudioMediaPlayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == AudioMediaPlayer:
            _self = None
        else:
            _self = self
        this = _pjsua2.new_AudioMediaPlayer(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def createPlayer(self, file_name, options=0):
        return _pjsua2.AudioMediaPlayer_createPlayer(self, file_name, options)

    def createPlaylist(self, *args):
        return _pjsua2.AudioMediaPlayer_createPlaylist(self, *args)

    def getInfo(self):
        return _pjsua2.AudioMediaPlayer_getInfo(self)

    def getPos(self):
        return _pjsua2.AudioMediaPlayer_getPos(self)

    def setPos(self, samples):
        return _pjsua2.AudioMediaPlayer_setPos(self, samples)
    if _newclass:
        typecastFromAudioMedia = staticmethod(_pjsua2.AudioMediaPlayer_typecastFromAudioMedia)
    else:
        typecastFromAudioMedia = _pjsua2.AudioMediaPlayer_typecastFromAudioMedia
    __swig_destroy__ = _pjsua2.delete_AudioMediaPlayer
    __del__ = lambda self: None

    def onEof2(self):
        return _pjsua2.AudioMediaPlayer_onEof2(self)
    def __disown__(self):
        self.this.disown()
        _pjsua2.disown_AudioMediaPlayer(self)
        return weakref_proxy(self)
AudioMediaPlayer_swigregister = _pjsua2.AudioMediaPlayer_swigregister
AudioMediaPlayer_swigregister(AudioMediaPlayer)

def AudioMediaPlayer_typecastFromAudioMedia(media):
    return _pjsua2.AudioMediaPlayer_typecastFromAudioMedia(media)
AudioMediaPlayer_typecastFromAudioMedia = _pjsua2.AudioMediaPlayer_typecastFromAudioMedia

class AudioMediaRecorder(AudioMedia):
    __swig_setmethods__ = {}
    for _s in [AudioMedia]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioMediaRecorder, name, value)
    __swig_getmethods__ = {}
    for _s in [AudioMedia]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AudioMediaRecorder, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pjsua2.new_AudioMediaRecorder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def createRecorder(self, file_name, enc_type=0, max_size=0, options=0):
        return _pjsua2.AudioMediaRecorder_createRecorder(self, file_name, enc_type, max_size, options)
    if _newclass:
        typecastFromAudioMedia = staticmethod(_pjsua2.AudioMediaRecorder_typecastFromAudioMedia)
    else:
        typecastFromAudioMedia = _pjsua2.AudioMediaRecorder_typecastFromAudioMedia
    __swig_destroy__ = _pjsua2.delete_AudioMediaRecorder
    __del__ = lambda self: None
AudioMediaRecorder_swigregister = _pjsua2.AudioMediaRecorder_swigregister
AudioMediaRecorder_swigregister(AudioMediaRecorder)

def AudioMediaRecorder_typecastFromAudioMedia(media):
    return _pjsua2.AudioMediaRecorder_typecastFromAudioMedia(media)
AudioMediaRecorder_typecastFromAudioMedia = _pjsua2.AudioMediaRecorder_typecastFromAudioMedia

class ToneDesc(pjmedia_tone_desc):
    __swig_setmethods__ = {}
    for _s in [pjmedia_tone_desc]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToneDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [pjmedia_tone_desc]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToneDesc, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pjsua2.new_ToneDesc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_ToneDesc
    __del__ = lambda self: None
ToneDesc_swigregister = _pjsua2.ToneDesc_swigregister
ToneDesc_swigregister(ToneDesc)

class ToneDigit(pjmedia_tone_digit):
    __swig_setmethods__ = {}
    for _s in [pjmedia_tone_digit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToneDigit, name, value)
    __swig_getmethods__ = {}
    for _s in [pjmedia_tone_digit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToneDigit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pjsua2.new_ToneDigit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_ToneDigit
    __del__ = lambda self: None
ToneDigit_swigregister = _pjsua2.ToneDigit_swigregister
ToneDigit_swigregister(ToneDigit)

class ToneDigitMapDigit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToneDigitMapDigit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ToneDigitMapDigit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["digit"] = _pjsua2.ToneDigitMapDigit_digit_set
    __swig_getmethods__["digit"] = _pjsua2.ToneDigitMapDigit_digit_get
    if _newclass:
        digit = _swig_property(_pjsua2.ToneDigitMapDigit_digit_get, _pjsua2.ToneDigitMapDigit_digit_set)
    __swig_setmethods__["freq1"] = _pjsua2.ToneDigitMapDigit_freq1_set
    __swig_getmethods__["freq1"] = _pjsua2.ToneDigitMapDigit_freq1_get
    if _newclass:
        freq1 = _swig_property(_pjsua2.ToneDigitMapDigit_freq1_get, _pjsua2.ToneDigitMapDigit_freq1_set)
    __swig_setmethods__["freq2"] = _pjsua2.ToneDigitMapDigit_freq2_set
    __swig_getmethods__["freq2"] = _pjsua2.ToneDigitMapDigit_freq2_get
    if _newclass:
        freq2 = _swig_property(_pjsua2.ToneDigitMapDigit_freq2_get, _pjsua2.ToneDigitMapDigit_freq2_set)

    def __init__(self):
        this = _pjsua2.new_ToneDigitMapDigit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_ToneDigitMapDigit
    __del__ = lambda self: None
ToneDigitMapDigit_swigregister = _pjsua2.ToneDigitMapDigit_swigregister
ToneDigitMapDigit_swigregister(ToneDigitMapDigit)

class ToneGenerator(AudioMedia):
    __swig_setmethods__ = {}
    for _s in [AudioMedia]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToneGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [AudioMedia]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToneGenerator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pjsua2.new_ToneGenerator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_ToneGenerator
    __del__ = lambda self: None

    def createToneGenerator(self, clock_rate=16000, channel_count=1):
        return _pjsua2.ToneGenerator_createToneGenerator(self, clock_rate, channel_count)

    def isBusy(self):
        return _pjsua2.ToneGenerator_isBusy(self)

    def stop(self):
        return _pjsua2.ToneGenerator_stop(self)

    def rewind(self):
        return _pjsua2.ToneGenerator_rewind(self)

    def play(self, tones, loop=False):
        return _pjsua2.ToneGenerator_play(self, tones, loop)

    def playDigits(self, digits, loop=False):
        return _pjsua2.ToneGenerator_playDigits(self, digits, loop)

    def getDigitMap(self):
        return _pjsua2.ToneGenerator_getDigitMap(self)

    def setDigitMap(self, digit_map):
        return _pjsua2.ToneGenerator_setDigitMap(self, digit_map)
ToneGenerator_swigregister = _pjsua2.ToneGenerator_swigregister
ToneGenerator_swigregister(ToneGenerator)

class AudioDevInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioDevInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioDevInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pjsua2.AudioDevInfo_name_set
    __swig_getmethods__["name"] = _pjsua2.AudioDevInfo_name_get
    if _newclass:
        name = _swig_property(_pjsua2.AudioDevInfo_name_get, _pjsua2.AudioDevInfo_name_set)
    __swig_setmethods__["inputCount"] = _pjsua2.AudioDevInfo_inputCount_set
    __swig_getmethods__["inputCount"] = _pjsua2.AudioDevInfo_inputCount_get
    if _newclass:
        inputCount = _swig_property(_pjsua2.AudioDevInfo_inputCount_get, _pjsua2.AudioDevInfo_inputCount_set)
    __swig_setmethods__["outputCount"] = _pjsua2.AudioDevInfo_outputCount_set
    __swig_getmethods__["outputCount"] = _pjsua2.AudioDevInfo_outputCount_get
    if _newclass:
        outputCount = _swig_property(_pjsua2.AudioDevInfo_outputCount_get, _pjsua2.AudioDevInfo_outputCount_set)
    __swig_setmethods__["defaultSamplesPerSec"] = _pjsua2.AudioDevInfo_defaultSamplesPerSec_set
    __swig_getmethods__["defaultSamplesPerSec"] = _pjsua2.AudioDevInfo_defaultSamplesPerSec_get
    if _newclass:
        defaultSamplesPerSec = _swig_property(_pjsua2.AudioDevInfo_defaultSamplesPerSec_get, _pjsua2.AudioDevInfo_defaultSamplesPerSec_set)
    __swig_setmethods__["driver"] = _pjsua2.AudioDevInfo_driver_set
    __swig_getmethods__["driver"] = _pjsua2.AudioDevInfo_driver_get
    if _newclass:
        driver = _swig_property(_pjsua2.AudioDevInfo_driver_get, _pjsua2.AudioDevInfo_driver_set)
    __swig_setmethods__["caps"] = _pjsua2.AudioDevInfo_caps_set
    __swig_getmethods__["caps"] = _pjsua2.AudioDevInfo_caps_get
    if _newclass:
        caps = _swig_property(_pjsua2.AudioDevInfo_caps_get, _pjsua2.AudioDevInfo_caps_set)
    __swig_setmethods__["routes"] = _pjsua2.AudioDevInfo_routes_set
    __swig_getmethods__["routes"] = _pjsua2.AudioDevInfo_routes_get
    if _newclass:
        routes = _swig_property(_pjsua2.AudioDevInfo_routes_get, _pjsua2.AudioDevInfo_routes_set)
    __swig_setmethods__["extFmt"] = _pjsua2.AudioDevInfo_extFmt_set
    __swig_getmethods__["extFmt"] = _pjsua2.AudioDevInfo_extFmt_get
    if _newclass:
        extFmt = _swig_property(_pjsua2.AudioDevInfo_extFmt_get, _pjsua2.AudioDevInfo_extFmt_set)
    __swig_destroy__ = _pjsua2.delete_AudioDevInfo
    __del__ = lambda self: None

    def __init__(self):
        this = _pjsua2.new_AudioDevInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
AudioDevInfo_swigregister = _pjsua2.AudioDevInfo_swigregister
AudioDevInfo_swigregister(AudioDevInfo)

class AudDevManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudDevManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudDevManager, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getCaptureDev(self):
        return _pjsua2.AudDevManager_getCaptureDev(self)

    def getCaptureDevMedia(self):
        return _pjsua2.AudDevManager_getCaptureDevMedia(self)

    def getPlaybackDev(self):
        return _pjsua2.AudDevManager_getPlaybackDev(self)

    def getPlaybackDevMedia(self):
        return _pjsua2.AudDevManager_getPlaybackDevMedia(self)

    def setCaptureDev(self, capture_dev):
        return _pjsua2.AudDevManager_setCaptureDev(self, capture_dev)

    def setPlaybackDev(self, playback_dev):
        return _pjsua2.AudDevManager_setPlaybackDev(self, playback_dev)

    def enumDev2(self):
        return _pjsua2.AudDevManager_enumDev2(self)

    def setNullDev(self):
        return _pjsua2.AudDevManager_setNullDev(self)

    def setNoDev(self):
        return _pjsua2.AudDevManager_setNoDev(self)

    def setSndDevMode(self, mode):
        return _pjsua2.AudDevManager_setSndDevMode(self, mode)

    def setEcOptions(self, tail_msec, options):
        return _pjsua2.AudDevManager_setEcOptions(self, tail_msec, options)

    def getEcTail(self):
        return _pjsua2.AudDevManager_getEcTail(self)

    def sndIsActive(self):
        return _pjsua2.AudDevManager_sndIsActive(self)

    def refreshDevs(self):
        return _pjsua2.AudDevManager_refreshDevs(self)

    def getDevCount(self):
        return _pjsua2.AudDevManager_getDevCount(self)

    def getDevInfo(self, id):
        return _pjsua2.AudDevManager_getDevInfo(self, id)

    def lookupDev(self, drv_name, dev_name):
        return _pjsua2.AudDevManager_lookupDev(self, drv_name, dev_name)

    def capName(self, cap):
        return _pjsua2.AudDevManager_capName(self, cap)

    def setExtFormat(self, format, keep=True):
        return _pjsua2.AudDevManager_setExtFormat(self, format, keep)

    def getExtFormat(self):
        return _pjsua2.AudDevManager_getExtFormat(self)

    def setInputLatency(self, latency_msec, keep=True):
        return _pjsua2.AudDevManager_setInputLatency(self, latency_msec, keep)

    def getInputLatency(self):
        return _pjsua2.AudDevManager_getInputLatency(self)

    def setOutputLatency(self, latency_msec, keep=True):
        return _pjsua2.AudDevManager_setOutputLatency(self, latency_msec, keep)

    def getOutputLatency(self):
        return _pjsua2.AudDevManager_getOutputLatency(self)

    def setInputVolume(self, volume, keep=True):
        return _pjsua2.AudDevManager_setInputVolume(self, volume, keep)

    def getInputVolume(self):
        return _pjsua2.AudDevManager_getInputVolume(self)

    def setOutputVolume(self, volume, keep=True):
        return _pjsua2.AudDevManager_setOutputVolume(self, volume, keep)

    def getOutputVolume(self):
        return _pjsua2.AudDevManager_getOutputVolume(self)

    def getInputSignal(self):
        return _pjsua2.AudDevManager_getInputSignal(self)

    def getOutputSignal(self):
        return _pjsua2.AudDevManager_getOutputSignal(self)

    def setInputRoute(self, route, keep=True):
        return _pjsua2.AudDevManager_setInputRoute(self, route, keep)

    def getInputRoute(self):
        return _pjsua2.AudDevManager_getInputRoute(self)

    def setOutputRoute(self, route, keep=True):
        return _pjsua2.AudDevManager_setOutputRoute(self, route, keep)

    def getOutputRoute(self):
        return _pjsua2.AudDevManager_getOutputRoute(self)

    def setVad(self, enable, keep=True):
        return _pjsua2.AudDevManager_setVad(self, enable, keep)

    def getVad(self):
        return _pjsua2.AudDevManager_getVad(self)

    def setCng(self, enable, keep=True):
        return _pjsua2.AudDevManager_setCng(self, enable, keep)

    def getCng(self):
        return _pjsua2.AudDevManager_getCng(self)

    def setPlc(self, enable, keep=True):
        return _pjsua2.AudDevManager_setPlc(self, enable, keep)

    def getPlc(self):
        return _pjsua2.AudDevManager_getPlc(self)
AudDevManager_swigregister = _pjsua2.AudDevManager_swigregister
AudDevManager_swigregister(AudDevManager)

class ExtraAudioDevice(AudioMedia):
    __swig_setmethods__ = {}
    for _s in [AudioMedia]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtraAudioDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [AudioMedia]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExtraAudioDevice, name)
    __repr__ = _swig_repr

    def __init__(self, playdev, recdev):
        this = _pjsua2.new_ExtraAudioDevice(playdev, recdev)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_ExtraAudioDevice
    __del__ = lambda self: None

    def open(self):
        return _pjsua2.ExtraAudioDevice_open(self)

    def close(self):
        return _pjsua2.ExtraAudioDevice_close(self)

    def isOpened(self):
        return _pjsua2.ExtraAudioDevice_isOpened(self)
ExtraAudioDevice_swigregister = _pjsua2.ExtraAudioDevice_swigregister
ExtraAudioDevice_swigregister(ExtraAudioDevice)

class MediaCoordinate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaCoordinate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MediaCoordinate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pjsua2.MediaCoordinate_x_set
    __swig_getmethods__["x"] = _pjsua2.MediaCoordinate_x_get
    if _newclass:
        x = _swig_property(_pjsua2.MediaCoordinate_x_get, _pjsua2.MediaCoordinate_x_set)
    __swig_setmethods__["y"] = _pjsua2.MediaCoordinate_y_set
    __swig_getmethods__["y"] = _pjsua2.MediaCoordinate_y_get
    if _newclass:
        y = _swig_property(_pjsua2.MediaCoordinate_y_get, _pjsua2.MediaCoordinate_y_set)

    def __init__(self):
        this = _pjsua2.new_MediaCoordinate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_MediaCoordinate
    __del__ = lambda self: None
MediaCoordinate_swigregister = _pjsua2.MediaCoordinate_swigregister
MediaCoordinate_swigregister(MediaCoordinate)

class MediaSize(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaSize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MediaSize, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _pjsua2.MediaSize_w_set
    __swig_getmethods__["w"] = _pjsua2.MediaSize_w_get
    if _newclass:
        w = _swig_property(_pjsua2.MediaSize_w_get, _pjsua2.MediaSize_w_set)
    __swig_setmethods__["h"] = _pjsua2.MediaSize_h_set
    __swig_getmethods__["h"] = _pjsua2.MediaSize_h_get
    if _newclass:
        h = _swig_property(_pjsua2.MediaSize_h_get, _pjsua2.MediaSize_h_set)

    def __init__(self):
        this = _pjsua2.new_MediaSize()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_MediaSize
    __del__ = lambda self: None
MediaSize_swigregister = _pjsua2.MediaSize_swigregister
MediaSize_swigregister(MediaSize)

class VidConfPortInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VidConfPortInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VidConfPortInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["portId"] = _pjsua2.VidConfPortInfo_portId_set
    __swig_getmethods__["portId"] = _pjsua2.VidConfPortInfo_portId_get
    if _newclass:
        portId = _swig_property(_pjsua2.VidConfPortInfo_portId_get, _pjsua2.VidConfPortInfo_portId_set)
    __swig_setmethods__["name"] = _pjsua2.VidConfPortInfo_name_set
    __swig_getmethods__["name"] = _pjsua2.VidConfPortInfo_name_get
    if _newclass:
        name = _swig_property(_pjsua2.VidConfPortInfo_name_get, _pjsua2.VidConfPortInfo_name_set)
    __swig_setmethods__["format"] = _pjsua2.VidConfPortInfo_format_set
    __swig_getmethods__["format"] = _pjsua2.VidConfPortInfo_format_get
    if _newclass:
        format = _swig_property(_pjsua2.VidConfPortInfo_format_get, _pjsua2.VidConfPortInfo_format_set)
    __swig_setmethods__["listeners"] = _pjsua2.VidConfPortInfo_listeners_set
    __swig_getmethods__["listeners"] = _pjsua2.VidConfPortInfo_listeners_get
    if _newclass:
        listeners = _swig_property(_pjsua2.VidConfPortInfo_listeners_get, _pjsua2.VidConfPortInfo_listeners_set)
    __swig_setmethods__["transmitters"] = _pjsua2.VidConfPortInfo_transmitters_set
    __swig_getmethods__["transmitters"] = _pjsua2.VidConfPortInfo_transmitters_get
    if _newclass:
        transmitters = _swig_property(_pjsua2.VidConfPortInfo_transmitters_get, _pjsua2.VidConfPortInfo_transmitters_set)

    def __init__(self):
        this = _pjsua2.new_VidConfPortInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_VidConfPortInfo
    __del__ = lambda self: None
VidConfPortInfo_swigregister = _pjsua2.VidConfPortInfo_swigregister
VidConfPortInfo_swigregister(VidConfPortInfo)

class VideoMediaTransmitParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoMediaTransmitParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoMediaTransmitParam, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pjsua2.new_VideoMediaTransmitParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_VideoMediaTransmitParam
    __del__ = lambda self: None
VideoMediaTransmitParam_swigregister = _pjsua2.VideoMediaTransmitParam_swigregister
VideoMediaTransmitParam_swigregister(VideoMediaTransmitParam)

class VideoMedia(Media):
    __swig_setmethods__ = {}
    for _s in [Media]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoMedia, name, value)
    __swig_getmethods__ = {}
    for _s in [Media]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VideoMedia, name)
    __repr__ = _swig_repr

    def getPortInfo(self):
        return _pjsua2.VideoMedia_getPortInfo(self)

    def getPortId(self):
        return _pjsua2.VideoMedia_getPortId(self)
    if _newclass:
        getPortInfoFromId = staticmethod(_pjsua2.VideoMedia_getPortInfoFromId)
    else:
        getPortInfoFromId = _pjsua2.VideoMedia_getPortInfoFromId

    def startTransmit(self, sink, param):
        return _pjsua2.VideoMedia_startTransmit(self, sink, param)

    def stopTransmit(self, sink):
        return _pjsua2.VideoMedia_stopTransmit(self, sink)

    def __init__(self):
        this = _pjsua2.new_VideoMedia()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_VideoMedia
    __del__ = lambda self: None
VideoMedia_swigregister = _pjsua2.VideoMedia_swigregister
VideoMedia_swigregister(VideoMedia)

def VideoMedia_getPortInfoFromId(port_id):
    return _pjsua2.VideoMedia_getPortInfoFromId(port_id)
VideoMedia_getPortInfoFromId = _pjsua2.VideoMedia_getPortInfoFromId

class WindowHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindowHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WindowHandle, name)
    __repr__ = _swig_repr

    def setWindow(self, hwnd):
        return _pjsua2.WindowHandle_setWindow(self, hwnd)

    def __init__(self):
        this = _pjsua2.new_WindowHandle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_WindowHandle
    __del__ = lambda self: None
WindowHandle_swigregister = _pjsua2.WindowHandle_swigregister
WindowHandle_swigregister(WindowHandle)

class VideoWindowHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoWindowHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoWindowHandle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pjsua2.VideoWindowHandle_type_set
    __swig_getmethods__["type"] = _pjsua2.VideoWindowHandle_type_get
    if _newclass:
        type = _swig_property(_pjsua2.VideoWindowHandle_type_get, _pjsua2.VideoWindowHandle_type_set)
    __swig_setmethods__["handle"] = _pjsua2.VideoWindowHandle_handle_set
    __swig_getmethods__["handle"] = _pjsua2.VideoWindowHandle_handle_get
    if _newclass:
        handle = _swig_property(_pjsua2.VideoWindowHandle_handle_get, _pjsua2.VideoWindowHandle_handle_set)

    def __init__(self):
        this = _pjsua2.new_VideoWindowHandle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_VideoWindowHandle
    __del__ = lambda self: None
VideoWindowHandle_swigregister = _pjsua2.VideoWindowHandle_swigregister
VideoWindowHandle_swigregister(VideoWindowHandle)

class VideoWindowInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoWindowInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoWindowInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["isNative"] = _pjsua2.VideoWindowInfo_isNative_set
    __swig_getmethods__["isNative"] = _pjsua2.VideoWindowInfo_isNative_get
    if _newclass:
        isNative = _swig_property(_pjsua2.VideoWindowInfo_isNative_get, _pjsua2.VideoWindowInfo_isNative_set)
    __swig_setmethods__["winHandle"] = _pjsua2.VideoWindowInfo_winHandle_set
    __swig_getmethods__["winHandle"] = _pjsua2.VideoWindowInfo_winHandle_get
    if _newclass:
        winHandle = _swig_property(_pjsua2.VideoWindowInfo_winHandle_get, _pjsua2.VideoWindowInfo_winHandle_set)
    __swig_setmethods__["renderDeviceId"] = _pjsua2.VideoWindowInfo_renderDeviceId_set
    __swig_getmethods__["renderDeviceId"] = _pjsua2.VideoWindowInfo_renderDeviceId_get
    if _newclass:
        renderDeviceId = _swig_property(_pjsua2.VideoWindowInfo_renderDeviceId_get, _pjsua2.VideoWindowInfo_renderDeviceId_set)
    __swig_setmethods__["show"] = _pjsua2.VideoWindowInfo_show_set
    __swig_getmethods__["show"] = _pjsua2.VideoWindowInfo_show_get
    if _newclass:
        show = _swig_property(_pjsua2.VideoWindowInfo_show_get, _pjsua2.VideoWindowInfo_show_set)
    __swig_setmethods__["pos"] = _pjsua2.VideoWindowInfo_pos_set
    __swig_getmethods__["pos"] = _pjsua2.VideoWindowInfo_pos_get
    if _newclass:
        pos = _swig_property(_pjsua2.VideoWindowInfo_pos_get, _pjsua2.VideoWindowInfo_pos_set)
    __swig_setmethods__["size"] = _pjsua2.VideoWindowInfo_size_set
    __swig_getmethods__["size"] = _pjsua2.VideoWindowInfo_size_get
    if _newclass:
        size = _swig_property(_pjsua2.VideoWindowInfo_size_get, _pjsua2.VideoWindowInfo_size_set)

    def __init__(self):
        this = _pjsua2.new_VideoWindowInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_VideoWindowInfo
    __del__ = lambda self: None
VideoWindowInfo_swigregister = _pjsua2.VideoWindowInfo_swigregister
VideoWindowInfo_swigregister(VideoWindowInfo)

class VideoWindow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoWindow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoWindow, name)
    __repr__ = _swig_repr

    def __init__(self, win_id):
        this = _pjsua2.new_VideoWindow(win_id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getInfo(self):
        return _pjsua2.VideoWindow_getInfo(self)

    def getVideoMedia(self):
        return _pjsua2.VideoWindow_getVideoMedia(self)

    def Show(self, show):
        return _pjsua2.VideoWindow_Show(self, show)

    def setPos(self, pos):
        return _pjsua2.VideoWindow_setPos(self, pos)

    def setSize(self, size):
        return _pjsua2.VideoWindow_setSize(self, size)

    def rotate(self, angle):
        return _pjsua2.VideoWindow_rotate(self, angle)

    def setWindow(self, win):
        return _pjsua2.VideoWindow_setWindow(self, win)

    def setFullScreen(self, enabled):
        return _pjsua2.VideoWindow_setFullScreen(self, enabled)
    __swig_destroy__ = _pjsua2.delete_VideoWindow
    __del__ = lambda self: None
VideoWindow_swigregister = _pjsua2.VideoWindow_swigregister
VideoWindow_swigregister(VideoWindow)

class VideoPreviewOpParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoPreviewOpParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoPreviewOpParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rendId"] = _pjsua2.VideoPreviewOpParam_rendId_set
    __swig_getmethods__["rendId"] = _pjsua2.VideoPreviewOpParam_rendId_get
    if _newclass:
        rendId = _swig_property(_pjsua2.VideoPreviewOpParam_rendId_get, _pjsua2.VideoPreviewOpParam_rendId_set)
    __swig_setmethods__["show"] = _pjsua2.VideoPreviewOpParam_show_set
    __swig_getmethods__["show"] = _pjsua2.VideoPreviewOpParam_show_get
    if _newclass:
        show = _swig_property(_pjsua2.VideoPreviewOpParam_show_get, _pjsua2.VideoPreviewOpParam_show_set)
    __swig_setmethods__["windowFlags"] = _pjsua2.VideoPreviewOpParam_windowFlags_set
    __swig_getmethods__["windowFlags"] = _pjsua2.VideoPreviewOpParam_windowFlags_get
    if _newclass:
        windowFlags = _swig_property(_pjsua2.VideoPreviewOpParam_windowFlags_get, _pjsua2.VideoPreviewOpParam_windowFlags_set)
    __swig_setmethods__["format"] = _pjsua2.VideoPreviewOpParam_format_set
    __swig_getmethods__["format"] = _pjsua2.VideoPreviewOpParam_format_get
    if _newclass:
        format = _swig_property(_pjsua2.VideoPreviewOpParam_format_get, _pjsua2.VideoPreviewOpParam_format_set)
    __swig_setmethods__["window"] = _pjsua2.VideoPreviewOpParam_window_set
    __swig_getmethods__["window"] = _pjsua2.VideoPreviewOpParam_window_get
    if _newclass:
        window = _swig_property(_pjsua2.VideoPreviewOpParam_window_get, _pjsua2.VideoPreviewOpParam_window_set)

    def __init__(self):
        this = _pjsua2.new_VideoPreviewOpParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_VideoPreviewOpParam
    __del__ = lambda self: None
VideoPreviewOpParam_swigregister = _pjsua2.VideoPreviewOpParam_swigregister
VideoPreviewOpParam_swigregister(VideoPreviewOpParam)

class VideoPreview(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoPreview, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoPreview, name)
    __repr__ = _swig_repr

    def __init__(self, dev_id):
        this = _pjsua2.new_VideoPreview(dev_id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def hasNative(self):
        return _pjsua2.VideoPreview_hasNative(self)

    def start(self, param):
        return _pjsua2.VideoPreview_start(self, param)

    def stop(self):
        return _pjsua2.VideoPreview_stop(self)

    def getVideoWindow(self):
        return _pjsua2.VideoPreview_getVideoWindow(self)

    def getVideoMedia(self):
        return _pjsua2.VideoPreview_getVideoMedia(self)
    __swig_destroy__ = _pjsua2.delete_VideoPreview
    __del__ = lambda self: None
VideoPreview_swigregister = _pjsua2.VideoPreview_swigregister
VideoPreview_swigregister(VideoPreview)

class VideoDevInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoDevInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoDevInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _pjsua2.VideoDevInfo_id_set
    __swig_getmethods__["id"] = _pjsua2.VideoDevInfo_id_get
    if _newclass:
        id = _swig_property(_pjsua2.VideoDevInfo_id_get, _pjsua2.VideoDevInfo_id_set)
    __swig_setmethods__["name"] = _pjsua2.VideoDevInfo_name_set
    __swig_getmethods__["name"] = _pjsua2.VideoDevInfo_name_get
    if _newclass:
        name = _swig_property(_pjsua2.VideoDevInfo_name_get, _pjsua2.VideoDevInfo_name_set)
    __swig_setmethods__["driver"] = _pjsua2.VideoDevInfo_driver_set
    __swig_getmethods__["driver"] = _pjsua2.VideoDevInfo_driver_get
    if _newclass:
        driver = _swig_property(_pjsua2.VideoDevInfo_driver_get, _pjsua2.VideoDevInfo_driver_set)
    __swig_setmethods__["dir"] = _pjsua2.VideoDevInfo_dir_set
    __swig_getmethods__["dir"] = _pjsua2.VideoDevInfo_dir_get
    if _newclass:
        dir = _swig_property(_pjsua2.VideoDevInfo_dir_get, _pjsua2.VideoDevInfo_dir_set)
    __swig_setmethods__["caps"] = _pjsua2.VideoDevInfo_caps_set
    __swig_getmethods__["caps"] = _pjsua2.VideoDevInfo_caps_get
    if _newclass:
        caps = _swig_property(_pjsua2.VideoDevInfo_caps_get, _pjsua2.VideoDevInfo_caps_set)
    __swig_setmethods__["fmt"] = _pjsua2.VideoDevInfo_fmt_set
    __swig_getmethods__["fmt"] = _pjsua2.VideoDevInfo_fmt_get
    if _newclass:
        fmt = _swig_property(_pjsua2.VideoDevInfo_fmt_get, _pjsua2.VideoDevInfo_fmt_set)

    def __init__(self):
        this = _pjsua2.new_VideoDevInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_VideoDevInfo
    __del__ = lambda self: None
VideoDevInfo_swigregister = _pjsua2.VideoDevInfo_swigregister
VideoDevInfo_swigregister(VideoDevInfo)

class VideoSwitchParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoSwitchParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoSwitchParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["target_id"] = _pjsua2.VideoSwitchParam_target_id_set
    __swig_getmethods__["target_id"] = _pjsua2.VideoSwitchParam_target_id_get
    if _newclass:
        target_id = _swig_property(_pjsua2.VideoSwitchParam_target_id_get, _pjsua2.VideoSwitchParam_target_id_set)

    def __init__(self):
        this = _pjsua2.new_VideoSwitchParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_VideoSwitchParam
    __del__ = lambda self: None
VideoSwitchParam_swigregister = _pjsua2.VideoSwitchParam_swigregister
VideoSwitchParam_swigregister(VideoSwitchParam)

class VidDevManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VidDevManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VidDevManager, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def refreshDevs(self):
        return _pjsua2.VidDevManager_refreshDevs(self)

    def getDevCount(self):
        return _pjsua2.VidDevManager_getDevCount(self)

    def getDevInfo(self, dev_id):
        return _pjsua2.VidDevManager_getDevInfo(self, dev_id)

    def enumDev2(self):
        return _pjsua2.VidDevManager_enumDev2(self)

    def lookupDev(self, drv_name, dev_name):
        return _pjsua2.VidDevManager_lookupDev(self, drv_name, dev_name)

    def capName(self, cap):
        return _pjsua2.VidDevManager_capName(self, cap)

    def setFormat(self, dev_id, format, keep):
        return _pjsua2.VidDevManager_setFormat(self, dev_id, format, keep)

    def getFormat(self, dev_id):
        return _pjsua2.VidDevManager_getFormat(self, dev_id)

    def setInputScale(self, dev_id, scale, keep):
        return _pjsua2.VidDevManager_setInputScale(self, dev_id, scale, keep)

    def getInputScale(self, dev_id):
        return _pjsua2.VidDevManager_getInputScale(self, dev_id)

    def setOutputWindowFlags(self, dev_id, flags, keep):
        return _pjsua2.VidDevManager_setOutputWindowFlags(self, dev_id, flags, keep)

    def getOutputWindowFlags(self, dev_id):
        return _pjsua2.VidDevManager_getOutputWindowFlags(self, dev_id)

    def switchDev(self, dev_id, param):
        return _pjsua2.VidDevManager_switchDev(self, dev_id, param)

    def isCaptureActive(self, dev_id):
        return _pjsua2.VidDevManager_isCaptureActive(self, dev_id)

    def setCaptureOrient(self, dev_id, orient, keep=True):
        return _pjsua2.VidDevManager_setCaptureOrient(self, dev_id, orient, keep)
VidDevManager_swigregister = _pjsua2.VidDevManager_swigregister
VidDevManager_swigregister(VidDevManager)

class CodecInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodecInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodecInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["codecId"] = _pjsua2.CodecInfo_codecId_set
    __swig_getmethods__["codecId"] = _pjsua2.CodecInfo_codecId_get
    if _newclass:
        codecId = _swig_property(_pjsua2.CodecInfo_codecId_get, _pjsua2.CodecInfo_codecId_set)
    __swig_setmethods__["priority"] = _pjsua2.CodecInfo_priority_set
    __swig_getmethods__["priority"] = _pjsua2.CodecInfo_priority_get
    if _newclass:
        priority = _swig_property(_pjsua2.CodecInfo_priority_get, _pjsua2.CodecInfo_priority_set)
    __swig_setmethods__["desc"] = _pjsua2.CodecInfo_desc_set
    __swig_getmethods__["desc"] = _pjsua2.CodecInfo_desc_get
    if _newclass:
        desc = _swig_property(_pjsua2.CodecInfo_desc_get, _pjsua2.CodecInfo_desc_set)

    def __init__(self):
        this = _pjsua2.new_CodecInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_CodecInfo
    __del__ = lambda self: None
CodecInfo_swigregister = _pjsua2.CodecInfo_swigregister
CodecInfo_swigregister(CodecInfo)

class CodecFmtp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodecFmtp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodecFmtp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pjsua2.CodecFmtp_name_set
    __swig_getmethods__["name"] = _pjsua2.CodecFmtp_name_get
    if _newclass:
        name = _swig_property(_pjsua2.CodecFmtp_name_get, _pjsua2.CodecFmtp_name_set)
    __swig_setmethods__["val"] = _pjsua2.CodecFmtp_val_set
    __swig_getmethods__["val"] = _pjsua2.CodecFmtp_val_get
    if _newclass:
        val = _swig_property(_pjsua2.CodecFmtp_val_get, _pjsua2.CodecFmtp_val_set)

    def __init__(self):
        this = _pjsua2.new_CodecFmtp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_CodecFmtp
    __del__ = lambda self: None
CodecFmtp_swigregister = _pjsua2.CodecFmtp_swigregister
CodecFmtp_swigregister(CodecFmtp)

class CodecParamInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodecParamInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodecParamInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["clockRate"] = _pjsua2.CodecParamInfo_clockRate_set
    __swig_getmethods__["clockRate"] = _pjsua2.CodecParamInfo_clockRate_get
    if _newclass:
        clockRate = _swig_property(_pjsua2.CodecParamInfo_clockRate_get, _pjsua2.CodecParamInfo_clockRate_set)
    __swig_setmethods__["channelCnt"] = _pjsua2.CodecParamInfo_channelCnt_set
    __swig_getmethods__["channelCnt"] = _pjsua2.CodecParamInfo_channelCnt_get
    if _newclass:
        channelCnt = _swig_property(_pjsua2.CodecParamInfo_channelCnt_get, _pjsua2.CodecParamInfo_channelCnt_set)
    __swig_setmethods__["avgBps"] = _pjsua2.CodecParamInfo_avgBps_set
    __swig_getmethods__["avgBps"] = _pjsua2.CodecParamInfo_avgBps_get
    if _newclass:
        avgBps = _swig_property(_pjsua2.CodecParamInfo_avgBps_get, _pjsua2.CodecParamInfo_avgBps_set)
    __swig_setmethods__["maxBps"] = _pjsua2.CodecParamInfo_maxBps_set
    __swig_getmethods__["maxBps"] = _pjsua2.CodecParamInfo_maxBps_get
    if _newclass:
        maxBps = _swig_property(_pjsua2.CodecParamInfo_maxBps_get, _pjsua2.CodecParamInfo_maxBps_set)
    __swig_setmethods__["maxRxFrameSize"] = _pjsua2.CodecParamInfo_maxRxFrameSize_set
    __swig_getmethods__["maxRxFrameSize"] = _pjsua2.CodecParamInfo_maxRxFrameSize_get
    if _newclass:
        maxRxFrameSize = _swig_property(_pjsua2.CodecParamInfo_maxRxFrameSize_get, _pjsua2.CodecParamInfo_maxRxFrameSize_set)
    __swig_setmethods__["frameLen"] = _pjsua2.CodecParamInfo_frameLen_set
    __swig_getmethods__["frameLen"] = _pjsua2.CodecParamInfo_frameLen_get
    if _newclass:
        frameLen = _swig_property(_pjsua2.CodecParamInfo_frameLen_get, _pjsua2.CodecParamInfo_frameLen_set)
    __swig_setmethods__["pcmBitsPerSample"] = _pjsua2.CodecParamInfo_pcmBitsPerSample_set
    __swig_getmethods__["pcmBitsPerSample"] = _pjsua2.CodecParamInfo_pcmBitsPerSample_get
    if _newclass:
        pcmBitsPerSample = _swig_property(_pjsua2.CodecParamInfo_pcmBitsPerSample_get, _pjsua2.CodecParamInfo_pcmBitsPerSample_set)
    __swig_setmethods__["pt"] = _pjsua2.CodecParamInfo_pt_set
    __swig_getmethods__["pt"] = _pjsua2.CodecParamInfo_pt_get
    if _newclass:
        pt = _swig_property(_pjsua2.CodecParamInfo_pt_get, _pjsua2.CodecParamInfo_pt_set)
    __swig_setmethods__["fmtId"] = _pjsua2.CodecParamInfo_fmtId_set
    __swig_getmethods__["fmtId"] = _pjsua2.CodecParamInfo_fmtId_get
    if _newclass:
        fmtId = _swig_property(_pjsua2.CodecParamInfo_fmtId_get, _pjsua2.CodecParamInfo_fmtId_set)

    def __init__(self):
        this = _pjsua2.new_CodecParamInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_CodecParamInfo
    __del__ = lambda self: None
CodecParamInfo_swigregister = _pjsua2.CodecParamInfo_swigregister
CodecParamInfo_swigregister(CodecParamInfo)

class CodecParamSetting(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodecParamSetting, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodecParamSetting, name)
    __repr__ = _swig_repr
    __swig_setmethods__["frmPerPkt"] = _pjsua2.CodecParamSetting_frmPerPkt_set
    __swig_getmethods__["frmPerPkt"] = _pjsua2.CodecParamSetting_frmPerPkt_get
    if _newclass:
        frmPerPkt = _swig_property(_pjsua2.CodecParamSetting_frmPerPkt_get, _pjsua2.CodecParamSetting_frmPerPkt_set)
    __swig_setmethods__["vad"] = _pjsua2.CodecParamSetting_vad_set
    __swig_getmethods__["vad"] = _pjsua2.CodecParamSetting_vad_get
    if _newclass:
        vad = _swig_property(_pjsua2.CodecParamSetting_vad_get, _pjsua2.CodecParamSetting_vad_set)
    __swig_setmethods__["cng"] = _pjsua2.CodecParamSetting_cng_set
    __swig_getmethods__["cng"] = _pjsua2.CodecParamSetting_cng_get
    if _newclass:
        cng = _swig_property(_pjsua2.CodecParamSetting_cng_get, _pjsua2.CodecParamSetting_cng_set)
    __swig_setmethods__["penh"] = _pjsua2.CodecParamSetting_penh_set
    __swig_getmethods__["penh"] = _pjsua2.CodecParamSetting_penh_get
    if _newclass:
        penh = _swig_property(_pjsua2.CodecParamSetting_penh_get, _pjsua2.CodecParamSetting_penh_set)
    __swig_setmethods__["plc"] = _pjsua2.CodecParamSetting_plc_set
    __swig_getmethods__["plc"] = _pjsua2.CodecParamSetting_plc_get
    if _newclass:
        plc = _swig_property(_pjsua2.CodecParamSetting_plc_get, _pjsua2.CodecParamSetting_plc_set)
    __swig_setmethods__["reserved"] = _pjsua2.CodecParamSetting_reserved_set
    __swig_getmethods__["reserved"] = _pjsua2.CodecParamSetting_reserved_get
    if _newclass:
        reserved = _swig_property(_pjsua2.CodecParamSetting_reserved_get, _pjsua2.CodecParamSetting_reserved_set)
    __swig_setmethods__["encFmtp"] = _pjsua2.CodecParamSetting_encFmtp_set
    __swig_getmethods__["encFmtp"] = _pjsua2.CodecParamSetting_encFmtp_get
    if _newclass:
        encFmtp = _swig_property(_pjsua2.CodecParamSetting_encFmtp_get, _pjsua2.CodecParamSetting_encFmtp_set)
    __swig_setmethods__["decFmtp"] = _pjsua2.CodecParamSetting_decFmtp_set
    __swig_getmethods__["decFmtp"] = _pjsua2.CodecParamSetting_decFmtp_get
    if _newclass:
        decFmtp = _swig_property(_pjsua2.CodecParamSetting_decFmtp_get, _pjsua2.CodecParamSetting_decFmtp_set)

    def __init__(self):
        this = _pjsua2.new_CodecParamSetting()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_CodecParamSetting
    __del__ = lambda self: None
CodecParamSetting_swigregister = _pjsua2.CodecParamSetting_swigregister
CodecParamSetting_swigregister(CodecParamSetting)

class CodecParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodecParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodecParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["info"] = _pjsua2.CodecParam_info_set
    __swig_getmethods__["info"] = _pjsua2.CodecParam_info_get
    if _newclass:
        info = _swig_property(_pjsua2.CodecParam_info_get, _pjsua2.CodecParam_info_set)
    __swig_setmethods__["setting"] = _pjsua2.CodecParam_setting_set
    __swig_getmethods__["setting"] = _pjsua2.CodecParam_setting_get
    if _newclass:
        setting = _swig_property(_pjsua2.CodecParam_setting_get, _pjsua2.CodecParam_setting_set)

    def __init__(self):
        this = _pjsua2.new_CodecParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_CodecParam
    __del__ = lambda self: None
CodecParam_swigregister = _pjsua2.CodecParam_swigregister
CodecParam_swigregister(CodecParam)

class CodecOpusConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodecOpusConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodecOpusConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sample_rate"] = _pjsua2.CodecOpusConfig_sample_rate_set
    __swig_getmethods__["sample_rate"] = _pjsua2.CodecOpusConfig_sample_rate_get
    if _newclass:
        sample_rate = _swig_property(_pjsua2.CodecOpusConfig_sample_rate_get, _pjsua2.CodecOpusConfig_sample_rate_set)
    __swig_setmethods__["channel_cnt"] = _pjsua2.CodecOpusConfig_channel_cnt_set
    __swig_getmethods__["channel_cnt"] = _pjsua2.CodecOpusConfig_channel_cnt_get
    if _newclass:
        channel_cnt = _swig_property(_pjsua2.CodecOpusConfig_channel_cnt_get, _pjsua2.CodecOpusConfig_channel_cnt_set)
    __swig_setmethods__["frm_ptime"] = _pjsua2.CodecOpusConfig_frm_ptime_set
    __swig_getmethods__["frm_ptime"] = _pjsua2.CodecOpusConfig_frm_ptime_get
    if _newclass:
        frm_ptime = _swig_property(_pjsua2.CodecOpusConfig_frm_ptime_get, _pjsua2.CodecOpusConfig_frm_ptime_set)
    __swig_setmethods__["bit_rate"] = _pjsua2.CodecOpusConfig_bit_rate_set
    __swig_getmethods__["bit_rate"] = _pjsua2.CodecOpusConfig_bit_rate_get
    if _newclass:
        bit_rate = _swig_property(_pjsua2.CodecOpusConfig_bit_rate_get, _pjsua2.CodecOpusConfig_bit_rate_set)
    __swig_setmethods__["packet_loss"] = _pjsua2.CodecOpusConfig_packet_loss_set
    __swig_getmethods__["packet_loss"] = _pjsua2.CodecOpusConfig_packet_loss_get
    if _newclass:
        packet_loss = _swig_property(_pjsua2.CodecOpusConfig_packet_loss_get, _pjsua2.CodecOpusConfig_packet_loss_set)
    __swig_setmethods__["complexity"] = _pjsua2.CodecOpusConfig_complexity_set
    __swig_getmethods__["complexity"] = _pjsua2.CodecOpusConfig_complexity_get
    if _newclass:
        complexity = _swig_property(_pjsua2.CodecOpusConfig_complexity_get, _pjsua2.CodecOpusConfig_complexity_set)
    __swig_setmethods__["cbr"] = _pjsua2.CodecOpusConfig_cbr_set
    __swig_getmethods__["cbr"] = _pjsua2.CodecOpusConfig_cbr_get
    if _newclass:
        cbr = _swig_property(_pjsua2.CodecOpusConfig_cbr_get, _pjsua2.CodecOpusConfig_cbr_set)

    def __init__(self):
        this = _pjsua2.new_CodecOpusConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_CodecOpusConfig
    __del__ = lambda self: None
CodecOpusConfig_swigregister = _pjsua2.CodecOpusConfig_swigregister
CodecOpusConfig_swigregister(CodecOpusConfig)

class VidCodecParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VidCodecParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VidCodecParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dir"] = _pjsua2.VidCodecParam_dir_set
    __swig_getmethods__["dir"] = _pjsua2.VidCodecParam_dir_get
    if _newclass:
        dir = _swig_property(_pjsua2.VidCodecParam_dir_get, _pjsua2.VidCodecParam_dir_set)
    __swig_setmethods__["packing"] = _pjsua2.VidCodecParam_packing_set
    __swig_getmethods__["packing"] = _pjsua2.VidCodecParam_packing_get
    if _newclass:
        packing = _swig_property(_pjsua2.VidCodecParam_packing_get, _pjsua2.VidCodecParam_packing_set)
    __swig_setmethods__["encFmt"] = _pjsua2.VidCodecParam_encFmt_set
    __swig_getmethods__["encFmt"] = _pjsua2.VidCodecParam_encFmt_get
    if _newclass:
        encFmt = _swig_property(_pjsua2.VidCodecParam_encFmt_get, _pjsua2.VidCodecParam_encFmt_set)
    __swig_setmethods__["encFmtp"] = _pjsua2.VidCodecParam_encFmtp_set
    __swig_getmethods__["encFmtp"] = _pjsua2.VidCodecParam_encFmtp_get
    if _newclass:
        encFmtp = _swig_property(_pjsua2.VidCodecParam_encFmtp_get, _pjsua2.VidCodecParam_encFmtp_set)
    __swig_setmethods__["encMtu"] = _pjsua2.VidCodecParam_encMtu_set
    __swig_getmethods__["encMtu"] = _pjsua2.VidCodecParam_encMtu_get
    if _newclass:
        encMtu = _swig_property(_pjsua2.VidCodecParam_encMtu_get, _pjsua2.VidCodecParam_encMtu_set)
    __swig_setmethods__["decFmt"] = _pjsua2.VidCodecParam_decFmt_set
    __swig_getmethods__["decFmt"] = _pjsua2.VidCodecParam_decFmt_get
    if _newclass:
        decFmt = _swig_property(_pjsua2.VidCodecParam_decFmt_get, _pjsua2.VidCodecParam_decFmt_set)
    __swig_setmethods__["decFmtp"] = _pjsua2.VidCodecParam_decFmtp_set
    __swig_getmethods__["decFmtp"] = _pjsua2.VidCodecParam_decFmtp_get
    if _newclass:
        decFmtp = _swig_property(_pjsua2.VidCodecParam_decFmtp_get, _pjsua2.VidCodecParam_decFmtp_set)
    __swig_setmethods__["ignoreFmtp"] = _pjsua2.VidCodecParam_ignoreFmtp_set
    __swig_getmethods__["ignoreFmtp"] = _pjsua2.VidCodecParam_ignoreFmtp_get
    if _newclass:
        ignoreFmtp = _swig_property(_pjsua2.VidCodecParam_ignoreFmtp_get, _pjsua2.VidCodecParam_ignoreFmtp_set)

    def __init__(self):
        this = _pjsua2.new_VidCodecParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_VidCodecParam
    __del__ = lambda self: None
VidCodecParam_swigregister = _pjsua2.VidCodecParam_swigregister
VidCodecParam_swigregister(VidCodecParam)

class MediaFmtChangedEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaFmtChangedEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MediaFmtChangedEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["newWidth"] = _pjsua2.MediaFmtChangedEvent_newWidth_set
    __swig_getmethods__["newWidth"] = _pjsua2.MediaFmtChangedEvent_newWidth_get
    if _newclass:
        newWidth = _swig_property(_pjsua2.MediaFmtChangedEvent_newWidth_get, _pjsua2.MediaFmtChangedEvent_newWidth_set)
    __swig_setmethods__["newHeight"] = _pjsua2.MediaFmtChangedEvent_newHeight_set
    __swig_getmethods__["newHeight"] = _pjsua2.MediaFmtChangedEvent_newHeight_get
    if _newclass:
        newHeight = _swig_property(_pjsua2.MediaFmtChangedEvent_newHeight_get, _pjsua2.MediaFmtChangedEvent_newHeight_set)

    def __init__(self):
        this = _pjsua2.new_MediaFmtChangedEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_MediaFmtChangedEvent
    __del__ = lambda self: None
MediaFmtChangedEvent_swigregister = _pjsua2.MediaFmtChangedEvent_swigregister
MediaFmtChangedEvent_swigregister(MediaFmtChangedEvent)

class AudDevErrorEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudDevErrorEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudDevErrorEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dir"] = _pjsua2.AudDevErrorEvent_dir_set
    __swig_getmethods__["dir"] = _pjsua2.AudDevErrorEvent_dir_get
    if _newclass:
        dir = _swig_property(_pjsua2.AudDevErrorEvent_dir_get, _pjsua2.AudDevErrorEvent_dir_set)
    __swig_setmethods__["id"] = _pjsua2.AudDevErrorEvent_id_set
    __swig_getmethods__["id"] = _pjsua2.AudDevErrorEvent_id_get
    if _newclass:
        id = _swig_property(_pjsua2.AudDevErrorEvent_id_get, _pjsua2.AudDevErrorEvent_id_set)
    __swig_setmethods__["status"] = _pjsua2.AudDevErrorEvent_status_set
    __swig_getmethods__["status"] = _pjsua2.AudDevErrorEvent_status_get
    if _newclass:
        status = _swig_property(_pjsua2.AudDevErrorEvent_status_get, _pjsua2.AudDevErrorEvent_status_set)

    def __init__(self):
        this = _pjsua2.new_AudDevErrorEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_AudDevErrorEvent
    __del__ = lambda self: None
AudDevErrorEvent_swigregister = _pjsua2.AudDevErrorEvent_swigregister
AudDevErrorEvent_swigregister(AudDevErrorEvent)

class MediaEventData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaEventData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MediaEventData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fmtChanged"] = _pjsua2.MediaEventData_fmtChanged_set
    __swig_getmethods__["fmtChanged"] = _pjsua2.MediaEventData_fmtChanged_get
    if _newclass:
        fmtChanged = _swig_property(_pjsua2.MediaEventData_fmtChanged_get, _pjsua2.MediaEventData_fmtChanged_set)
    __swig_setmethods__["audDevError"] = _pjsua2.MediaEventData_audDevError_set
    __swig_getmethods__["audDevError"] = _pjsua2.MediaEventData_audDevError_get
    if _newclass:
        audDevError = _swig_property(_pjsua2.MediaEventData_audDevError_get, _pjsua2.MediaEventData_audDevError_set)
    __swig_setmethods__["ptr"] = _pjsua2.MediaEventData_ptr_set
    __swig_getmethods__["ptr"] = _pjsua2.MediaEventData_ptr_get
    if _newclass:
        ptr = _swig_property(_pjsua2.MediaEventData_ptr_get, _pjsua2.MediaEventData_ptr_set)

    def __init__(self):
        this = _pjsua2.new_MediaEventData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_MediaEventData
    __del__ = lambda self: None
MediaEventData_swigregister = _pjsua2.MediaEventData_swigregister
MediaEventData_swigregister(MediaEventData)

class MediaEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MediaEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pjsua2.MediaEvent_type_set
    __swig_getmethods__["type"] = _pjsua2.MediaEvent_type_get
    if _newclass:
        type = _swig_property(_pjsua2.MediaEvent_type_get, _pjsua2.MediaEvent_type_set)
    __swig_setmethods__["data"] = _pjsua2.MediaEvent_data_set
    __swig_getmethods__["data"] = _pjsua2.MediaEvent_data_get
    if _newclass:
        data = _swig_property(_pjsua2.MediaEvent_data_get, _pjsua2.MediaEvent_data_set)
    __swig_setmethods__["pjMediaEvent"] = _pjsua2.MediaEvent_pjMediaEvent_set
    __swig_getmethods__["pjMediaEvent"] = _pjsua2.MediaEvent_pjMediaEvent_get
    if _newclass:
        pjMediaEvent = _swig_property(_pjsua2.MediaEvent_pjMediaEvent_get, _pjsua2.MediaEvent_pjMediaEvent_set)

    def __init__(self):
        this = _pjsua2.new_MediaEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_MediaEvent
    __del__ = lambda self: None
MediaEvent_swigregister = _pjsua2.MediaEvent_swigregister
MediaEvent_swigregister(MediaEvent)

class PresenceStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PresenceStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PresenceStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _pjsua2.PresenceStatus_status_set
    __swig_getmethods__["status"] = _pjsua2.PresenceStatus_status_get
    if _newclass:
        status = _swig_property(_pjsua2.PresenceStatus_status_get, _pjsua2.PresenceStatus_status_set)
    __swig_setmethods__["statusText"] = _pjsua2.PresenceStatus_statusText_set
    __swig_getmethods__["statusText"] = _pjsua2.PresenceStatus_statusText_get
    if _newclass:
        statusText = _swig_property(_pjsua2.PresenceStatus_statusText_get, _pjsua2.PresenceStatus_statusText_set)
    __swig_setmethods__["activity"] = _pjsua2.PresenceStatus_activity_set
    __swig_getmethods__["activity"] = _pjsua2.PresenceStatus_activity_get
    if _newclass:
        activity = _swig_property(_pjsua2.PresenceStatus_activity_get, _pjsua2.PresenceStatus_activity_set)
    __swig_setmethods__["note"] = _pjsua2.PresenceStatus_note_set
    __swig_getmethods__["note"] = _pjsua2.PresenceStatus_note_get
    if _newclass:
        note = _swig_property(_pjsua2.PresenceStatus_note_get, _pjsua2.PresenceStatus_note_set)
    __swig_setmethods__["rpidId"] = _pjsua2.PresenceStatus_rpidId_set
    __swig_getmethods__["rpidId"] = _pjsua2.PresenceStatus_rpidId_get
    if _newclass:
        rpidId = _swig_property(_pjsua2.PresenceStatus_rpidId_get, _pjsua2.PresenceStatus_rpidId_set)

    def __init__(self):
        this = _pjsua2.new_PresenceStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_PresenceStatus
    __del__ = lambda self: None
PresenceStatus_swigregister = _pjsua2.PresenceStatus_swigregister
PresenceStatus_swigregister(PresenceStatus)

class BuddyConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuddyConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BuddyConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["uri"] = _pjsua2.BuddyConfig_uri_set
    __swig_getmethods__["uri"] = _pjsua2.BuddyConfig_uri_get
    if _newclass:
        uri = _swig_property(_pjsua2.BuddyConfig_uri_get, _pjsua2.BuddyConfig_uri_set)
    __swig_setmethods__["subscribe"] = _pjsua2.BuddyConfig_subscribe_set
    __swig_getmethods__["subscribe"] = _pjsua2.BuddyConfig_subscribe_get
    if _newclass:
        subscribe = _swig_property(_pjsua2.BuddyConfig_subscribe_get, _pjsua2.BuddyConfig_subscribe_set)

    def readObject(self, node):
        return _pjsua2.BuddyConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.BuddyConfig_writeObject(self, node)

    def __init__(self):
        this = _pjsua2.new_BuddyConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_BuddyConfig
    __del__ = lambda self: None
BuddyConfig_swigregister = _pjsua2.BuddyConfig_swigregister
BuddyConfig_swigregister(BuddyConfig)

class BuddyInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuddyInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BuddyInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["uri"] = _pjsua2.BuddyInfo_uri_set
    __swig_getmethods__["uri"] = _pjsua2.BuddyInfo_uri_get
    if _newclass:
        uri = _swig_property(_pjsua2.BuddyInfo_uri_get, _pjsua2.BuddyInfo_uri_set)
    __swig_setmethods__["contact"] = _pjsua2.BuddyInfo_contact_set
    __swig_getmethods__["contact"] = _pjsua2.BuddyInfo_contact_get
    if _newclass:
        contact = _swig_property(_pjsua2.BuddyInfo_contact_get, _pjsua2.BuddyInfo_contact_set)
    __swig_setmethods__["presMonitorEnabled"] = _pjsua2.BuddyInfo_presMonitorEnabled_set
    __swig_getmethods__["presMonitorEnabled"] = _pjsua2.BuddyInfo_presMonitorEnabled_get
    if _newclass:
        presMonitorEnabled = _swig_property(_pjsua2.BuddyInfo_presMonitorEnabled_get, _pjsua2.BuddyInfo_presMonitorEnabled_set)
    __swig_setmethods__["subState"] = _pjsua2.BuddyInfo_subState_set
    __swig_getmethods__["subState"] = _pjsua2.BuddyInfo_subState_get
    if _newclass:
        subState = _swig_property(_pjsua2.BuddyInfo_subState_get, _pjsua2.BuddyInfo_subState_set)
    __swig_setmethods__["subStateName"] = _pjsua2.BuddyInfo_subStateName_set
    __swig_getmethods__["subStateName"] = _pjsua2.BuddyInfo_subStateName_get
    if _newclass:
        subStateName = _swig_property(_pjsua2.BuddyInfo_subStateName_get, _pjsua2.BuddyInfo_subStateName_set)
    __swig_setmethods__["subTermCode"] = _pjsua2.BuddyInfo_subTermCode_set
    __swig_getmethods__["subTermCode"] = _pjsua2.BuddyInfo_subTermCode_get
    if _newclass:
        subTermCode = _swig_property(_pjsua2.BuddyInfo_subTermCode_get, _pjsua2.BuddyInfo_subTermCode_set)
    __swig_setmethods__["subTermReason"] = _pjsua2.BuddyInfo_subTermReason_set
    __swig_getmethods__["subTermReason"] = _pjsua2.BuddyInfo_subTermReason_get
    if _newclass:
        subTermReason = _swig_property(_pjsua2.BuddyInfo_subTermReason_get, _pjsua2.BuddyInfo_subTermReason_set)
    __swig_setmethods__["presStatus"] = _pjsua2.BuddyInfo_presStatus_set
    __swig_getmethods__["presStatus"] = _pjsua2.BuddyInfo_presStatus_get
    if _newclass:
        presStatus = _swig_property(_pjsua2.BuddyInfo_presStatus_get, _pjsua2.BuddyInfo_presStatus_set)

    def __init__(self):
        this = _pjsua2.new_BuddyInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_BuddyInfo
    __del__ = lambda self: None
BuddyInfo_swigregister = _pjsua2.BuddyInfo_swigregister
BuddyInfo_swigregister(BuddyInfo)

class OnBuddyEvSubStateParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnBuddyEvSubStateParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnBuddyEvSubStateParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["e"] = _pjsua2.OnBuddyEvSubStateParam_e_set
    __swig_getmethods__["e"] = _pjsua2.OnBuddyEvSubStateParam_e_get
    if _newclass:
        e = _swig_property(_pjsua2.OnBuddyEvSubStateParam_e_get, _pjsua2.OnBuddyEvSubStateParam_e_set)

    def __init__(self):
        this = _pjsua2.new_OnBuddyEvSubStateParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnBuddyEvSubStateParam
    __del__ = lambda self: None
OnBuddyEvSubStateParam_swigregister = _pjsua2.OnBuddyEvSubStateParam_swigregister
OnBuddyEvSubStateParam_swigregister(OnBuddyEvSubStateParam)

class Buddy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Buddy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Buddy, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Buddy:
            _self = None
        else:
            _self = self
        this = _pjsua2.new_Buddy(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_Buddy
    __del__ = lambda self: None

    def create(self, acc, cfg):
        return _pjsua2.Buddy_create(self, acc, cfg)

    def isValid(self):
        return _pjsua2.Buddy_isValid(self)

    def getInfo(self):
        return _pjsua2.Buddy_getInfo(self)

    def subscribePresence(self, subscribe):
        return _pjsua2.Buddy_subscribePresence(self, subscribe)

    def updatePresence(self):
        return _pjsua2.Buddy_updatePresence(self)

    def sendInstantMessage(self, prm):
        return _pjsua2.Buddy_sendInstantMessage(self, prm)

    def sendTypingIndication(self, prm):
        return _pjsua2.Buddy_sendTypingIndication(self, prm)

    def onBuddyState(self):
        return _pjsua2.Buddy_onBuddyState(self)

    def onBuddyEvSubState(self, prm):
        return _pjsua2.Buddy_onBuddyEvSubState(self, prm)
    def __disown__(self):
        self.this.disown()
        _pjsua2.disown_Buddy(self)
        return weakref_proxy(self)
Buddy_swigregister = _pjsua2.Buddy_swigregister
Buddy_swigregister(Buddy)

class AccountRegConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountRegConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccountRegConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["registrarUri"] = _pjsua2.AccountRegConfig_registrarUri_set
    __swig_getmethods__["registrarUri"] = _pjsua2.AccountRegConfig_registrarUri_get
    if _newclass:
        registrarUri = _swig_property(_pjsua2.AccountRegConfig_registrarUri_get, _pjsua2.AccountRegConfig_registrarUri_set)
    __swig_setmethods__["registerOnAdd"] = _pjsua2.AccountRegConfig_registerOnAdd_set
    __swig_getmethods__["registerOnAdd"] = _pjsua2.AccountRegConfig_registerOnAdd_get
    if _newclass:
        registerOnAdd = _swig_property(_pjsua2.AccountRegConfig_registerOnAdd_get, _pjsua2.AccountRegConfig_registerOnAdd_set)
    __swig_setmethods__["headers"] = _pjsua2.AccountRegConfig_headers_set
    __swig_getmethods__["headers"] = _pjsua2.AccountRegConfig_headers_get
    if _newclass:
        headers = _swig_property(_pjsua2.AccountRegConfig_headers_get, _pjsua2.AccountRegConfig_headers_set)
    __swig_setmethods__["contactParams"] = _pjsua2.AccountRegConfig_contactParams_set
    __swig_getmethods__["contactParams"] = _pjsua2.AccountRegConfig_contactParams_get
    if _newclass:
        contactParams = _swig_property(_pjsua2.AccountRegConfig_contactParams_get, _pjsua2.AccountRegConfig_contactParams_set)
    __swig_setmethods__["timeoutSec"] = _pjsua2.AccountRegConfig_timeoutSec_set
    __swig_getmethods__["timeoutSec"] = _pjsua2.AccountRegConfig_timeoutSec_get
    if _newclass:
        timeoutSec = _swig_property(_pjsua2.AccountRegConfig_timeoutSec_get, _pjsua2.AccountRegConfig_timeoutSec_set)
    __swig_setmethods__["retryIntervalSec"] = _pjsua2.AccountRegConfig_retryIntervalSec_set
    __swig_getmethods__["retryIntervalSec"] = _pjsua2.AccountRegConfig_retryIntervalSec_get
    if _newclass:
        retryIntervalSec = _swig_property(_pjsua2.AccountRegConfig_retryIntervalSec_get, _pjsua2.AccountRegConfig_retryIntervalSec_set)
    __swig_setmethods__["firstRetryIntervalSec"] = _pjsua2.AccountRegConfig_firstRetryIntervalSec_set
    __swig_getmethods__["firstRetryIntervalSec"] = _pjsua2.AccountRegConfig_firstRetryIntervalSec_get
    if _newclass:
        firstRetryIntervalSec = _swig_property(_pjsua2.AccountRegConfig_firstRetryIntervalSec_get, _pjsua2.AccountRegConfig_firstRetryIntervalSec_set)
    __swig_setmethods__["randomRetryIntervalSec"] = _pjsua2.AccountRegConfig_randomRetryIntervalSec_set
    __swig_getmethods__["randomRetryIntervalSec"] = _pjsua2.AccountRegConfig_randomRetryIntervalSec_get
    if _newclass:
        randomRetryIntervalSec = _swig_property(_pjsua2.AccountRegConfig_randomRetryIntervalSec_get, _pjsua2.AccountRegConfig_randomRetryIntervalSec_set)
    __swig_setmethods__["delayBeforeRefreshSec"] = _pjsua2.AccountRegConfig_delayBeforeRefreshSec_set
    __swig_getmethods__["delayBeforeRefreshSec"] = _pjsua2.AccountRegConfig_delayBeforeRefreshSec_get
    if _newclass:
        delayBeforeRefreshSec = _swig_property(_pjsua2.AccountRegConfig_delayBeforeRefreshSec_get, _pjsua2.AccountRegConfig_delayBeforeRefreshSec_set)
    __swig_setmethods__["dropCallsOnFail"] = _pjsua2.AccountRegConfig_dropCallsOnFail_set
    __swig_getmethods__["dropCallsOnFail"] = _pjsua2.AccountRegConfig_dropCallsOnFail_get
    if _newclass:
        dropCallsOnFail = _swig_property(_pjsua2.AccountRegConfig_dropCallsOnFail_get, _pjsua2.AccountRegConfig_dropCallsOnFail_set)
    __swig_setmethods__["unregWaitMsec"] = _pjsua2.AccountRegConfig_unregWaitMsec_set
    __swig_getmethods__["unregWaitMsec"] = _pjsua2.AccountRegConfig_unregWaitMsec_get
    if _newclass:
        unregWaitMsec = _swig_property(_pjsua2.AccountRegConfig_unregWaitMsec_get, _pjsua2.AccountRegConfig_unregWaitMsec_set)
    __swig_setmethods__["proxyUse"] = _pjsua2.AccountRegConfig_proxyUse_set
    __swig_getmethods__["proxyUse"] = _pjsua2.AccountRegConfig_proxyUse_get
    if _newclass:
        proxyUse = _swig_property(_pjsua2.AccountRegConfig_proxyUse_get, _pjsua2.AccountRegConfig_proxyUse_set)

    def readObject(self, node):
        return _pjsua2.AccountRegConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.AccountRegConfig_writeObject(self, node)

    def __init__(self):
        this = _pjsua2.new_AccountRegConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_AccountRegConfig
    __del__ = lambda self: None
AccountRegConfig_swigregister = _pjsua2.AccountRegConfig_swigregister
AccountRegConfig_swigregister(AccountRegConfig)

class AccountSipConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountSipConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccountSipConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["authCreds"] = _pjsua2.AccountSipConfig_authCreds_set
    __swig_getmethods__["authCreds"] = _pjsua2.AccountSipConfig_authCreds_get
    if _newclass:
        authCreds = _swig_property(_pjsua2.AccountSipConfig_authCreds_get, _pjsua2.AccountSipConfig_authCreds_set)
    __swig_setmethods__["proxies"] = _pjsua2.AccountSipConfig_proxies_set
    __swig_getmethods__["proxies"] = _pjsua2.AccountSipConfig_proxies_get
    if _newclass:
        proxies = _swig_property(_pjsua2.AccountSipConfig_proxies_get, _pjsua2.AccountSipConfig_proxies_set)
    __swig_setmethods__["contactForced"] = _pjsua2.AccountSipConfig_contactForced_set
    __swig_getmethods__["contactForced"] = _pjsua2.AccountSipConfig_contactForced_get
    if _newclass:
        contactForced = _swig_property(_pjsua2.AccountSipConfig_contactForced_get, _pjsua2.AccountSipConfig_contactForced_set)
    __swig_setmethods__["contactParams"] = _pjsua2.AccountSipConfig_contactParams_set
    __swig_getmethods__["contactParams"] = _pjsua2.AccountSipConfig_contactParams_get
    if _newclass:
        contactParams = _swig_property(_pjsua2.AccountSipConfig_contactParams_get, _pjsua2.AccountSipConfig_contactParams_set)
    __swig_setmethods__["contactUriParams"] = _pjsua2.AccountSipConfig_contactUriParams_set
    __swig_getmethods__["contactUriParams"] = _pjsua2.AccountSipConfig_contactUriParams_get
    if _newclass:
        contactUriParams = _swig_property(_pjsua2.AccountSipConfig_contactUriParams_get, _pjsua2.AccountSipConfig_contactUriParams_set)
    __swig_setmethods__["authInitialEmpty"] = _pjsua2.AccountSipConfig_authInitialEmpty_set
    __swig_getmethods__["authInitialEmpty"] = _pjsua2.AccountSipConfig_authInitialEmpty_get
    if _newclass:
        authInitialEmpty = _swig_property(_pjsua2.AccountSipConfig_authInitialEmpty_get, _pjsua2.AccountSipConfig_authInitialEmpty_set)
    __swig_setmethods__["authInitialAlgorithm"] = _pjsua2.AccountSipConfig_authInitialAlgorithm_set
    __swig_getmethods__["authInitialAlgorithm"] = _pjsua2.AccountSipConfig_authInitialAlgorithm_get
    if _newclass:
        authInitialAlgorithm = _swig_property(_pjsua2.AccountSipConfig_authInitialAlgorithm_get, _pjsua2.AccountSipConfig_authInitialAlgorithm_set)
    __swig_setmethods__["transportId"] = _pjsua2.AccountSipConfig_transportId_set
    __swig_getmethods__["transportId"] = _pjsua2.AccountSipConfig_transportId_get
    if _newclass:
        transportId = _swig_property(_pjsua2.AccountSipConfig_transportId_get, _pjsua2.AccountSipConfig_transportId_set)

    def readObject(self, node):
        return _pjsua2.AccountSipConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.AccountSipConfig_writeObject(self, node)

    def __init__(self):
        this = _pjsua2.new_AccountSipConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_AccountSipConfig
    __del__ = lambda self: None
AccountSipConfig_swigregister = _pjsua2.AccountSipConfig_swigregister
AccountSipConfig_swigregister(AccountSipConfig)

class AccountCallConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountCallConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccountCallConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["holdType"] = _pjsua2.AccountCallConfig_holdType_set
    __swig_getmethods__["holdType"] = _pjsua2.AccountCallConfig_holdType_get
    if _newclass:
        holdType = _swig_property(_pjsua2.AccountCallConfig_holdType_get, _pjsua2.AccountCallConfig_holdType_set)
    __swig_setmethods__["prackUse"] = _pjsua2.AccountCallConfig_prackUse_set
    __swig_getmethods__["prackUse"] = _pjsua2.AccountCallConfig_prackUse_get
    if _newclass:
        prackUse = _swig_property(_pjsua2.AccountCallConfig_prackUse_get, _pjsua2.AccountCallConfig_prackUse_set)
    __swig_setmethods__["timerUse"] = _pjsua2.AccountCallConfig_timerUse_set
    __swig_getmethods__["timerUse"] = _pjsua2.AccountCallConfig_timerUse_get
    if _newclass:
        timerUse = _swig_property(_pjsua2.AccountCallConfig_timerUse_get, _pjsua2.AccountCallConfig_timerUse_set)
    __swig_setmethods__["timerMinSESec"] = _pjsua2.AccountCallConfig_timerMinSESec_set
    __swig_getmethods__["timerMinSESec"] = _pjsua2.AccountCallConfig_timerMinSESec_get
    if _newclass:
        timerMinSESec = _swig_property(_pjsua2.AccountCallConfig_timerMinSESec_get, _pjsua2.AccountCallConfig_timerMinSESec_set)
    __swig_setmethods__["timerSessExpiresSec"] = _pjsua2.AccountCallConfig_timerSessExpiresSec_set
    __swig_getmethods__["timerSessExpiresSec"] = _pjsua2.AccountCallConfig_timerSessExpiresSec_get
    if _newclass:
        timerSessExpiresSec = _swig_property(_pjsua2.AccountCallConfig_timerSessExpiresSec_get, _pjsua2.AccountCallConfig_timerSessExpiresSec_set)

    def __init__(self):
        this = _pjsua2.new_AccountCallConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def readObject(self, node):
        return _pjsua2.AccountCallConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.AccountCallConfig_writeObject(self, node)
    __swig_destroy__ = _pjsua2.delete_AccountCallConfig
    __del__ = lambda self: None
AccountCallConfig_swigregister = _pjsua2.AccountCallConfig_swigregister
AccountCallConfig_swigregister(AccountCallConfig)

class AccountPresConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountPresConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccountPresConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["headers"] = _pjsua2.AccountPresConfig_headers_set
    __swig_getmethods__["headers"] = _pjsua2.AccountPresConfig_headers_get
    if _newclass:
        headers = _swig_property(_pjsua2.AccountPresConfig_headers_get, _pjsua2.AccountPresConfig_headers_set)
    __swig_setmethods__["publishEnabled"] = _pjsua2.AccountPresConfig_publishEnabled_set
    __swig_getmethods__["publishEnabled"] = _pjsua2.AccountPresConfig_publishEnabled_get
    if _newclass:
        publishEnabled = _swig_property(_pjsua2.AccountPresConfig_publishEnabled_get, _pjsua2.AccountPresConfig_publishEnabled_set)
    __swig_setmethods__["publishQueue"] = _pjsua2.AccountPresConfig_publishQueue_set
    __swig_getmethods__["publishQueue"] = _pjsua2.AccountPresConfig_publishQueue_get
    if _newclass:
        publishQueue = _swig_property(_pjsua2.AccountPresConfig_publishQueue_get, _pjsua2.AccountPresConfig_publishQueue_set)
    __swig_setmethods__["publishShutdownWaitMsec"] = _pjsua2.AccountPresConfig_publishShutdownWaitMsec_set
    __swig_getmethods__["publishShutdownWaitMsec"] = _pjsua2.AccountPresConfig_publishShutdownWaitMsec_get
    if _newclass:
        publishShutdownWaitMsec = _swig_property(_pjsua2.AccountPresConfig_publishShutdownWaitMsec_get, _pjsua2.AccountPresConfig_publishShutdownWaitMsec_set)
    __swig_setmethods__["pidfTupleId"] = _pjsua2.AccountPresConfig_pidfTupleId_set
    __swig_getmethods__["pidfTupleId"] = _pjsua2.AccountPresConfig_pidfTupleId_get
    if _newclass:
        pidfTupleId = _swig_property(_pjsua2.AccountPresConfig_pidfTupleId_get, _pjsua2.AccountPresConfig_pidfTupleId_set)

    def readObject(self, node):
        return _pjsua2.AccountPresConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.AccountPresConfig_writeObject(self, node)

    def __init__(self):
        this = _pjsua2.new_AccountPresConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_AccountPresConfig
    __del__ = lambda self: None
AccountPresConfig_swigregister = _pjsua2.AccountPresConfig_swigregister
AccountPresConfig_swigregister(AccountPresConfig)

class AccountMwiConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountMwiConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccountMwiConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enabled"] = _pjsua2.AccountMwiConfig_enabled_set
    __swig_getmethods__["enabled"] = _pjsua2.AccountMwiConfig_enabled_get
    if _newclass:
        enabled = _swig_property(_pjsua2.AccountMwiConfig_enabled_get, _pjsua2.AccountMwiConfig_enabled_set)
    __swig_setmethods__["expirationSec"] = _pjsua2.AccountMwiConfig_expirationSec_set
    __swig_getmethods__["expirationSec"] = _pjsua2.AccountMwiConfig_expirationSec_get
    if _newclass:
        expirationSec = _swig_property(_pjsua2.AccountMwiConfig_expirationSec_get, _pjsua2.AccountMwiConfig_expirationSec_set)

    def readObject(self, node):
        return _pjsua2.AccountMwiConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.AccountMwiConfig_writeObject(self, node)

    def __init__(self):
        this = _pjsua2.new_AccountMwiConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_AccountMwiConfig
    __del__ = lambda self: None
AccountMwiConfig_swigregister = _pjsua2.AccountMwiConfig_swigregister
AccountMwiConfig_swigregister(AccountMwiConfig)

class AccountNatConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountNatConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccountNatConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sipStunUse"] = _pjsua2.AccountNatConfig_sipStunUse_set
    __swig_getmethods__["sipStunUse"] = _pjsua2.AccountNatConfig_sipStunUse_get
    if _newclass:
        sipStunUse = _swig_property(_pjsua2.AccountNatConfig_sipStunUse_get, _pjsua2.AccountNatConfig_sipStunUse_set)
    __swig_setmethods__["mediaStunUse"] = _pjsua2.AccountNatConfig_mediaStunUse_set
    __swig_getmethods__["mediaStunUse"] = _pjsua2.AccountNatConfig_mediaStunUse_get
    if _newclass:
        mediaStunUse = _swig_property(_pjsua2.AccountNatConfig_mediaStunUse_get, _pjsua2.AccountNatConfig_mediaStunUse_set)
    __swig_setmethods__["nat64Opt"] = _pjsua2.AccountNatConfig_nat64Opt_set
    __swig_getmethods__["nat64Opt"] = _pjsua2.AccountNatConfig_nat64Opt_get
    if _newclass:
        nat64Opt = _swig_property(_pjsua2.AccountNatConfig_nat64Opt_get, _pjsua2.AccountNatConfig_nat64Opt_set)
    __swig_setmethods__["iceEnabled"] = _pjsua2.AccountNatConfig_iceEnabled_set
    __swig_getmethods__["iceEnabled"] = _pjsua2.AccountNatConfig_iceEnabled_get
    if _newclass:
        iceEnabled = _swig_property(_pjsua2.AccountNatConfig_iceEnabled_get, _pjsua2.AccountNatConfig_iceEnabled_set)
    __swig_setmethods__["iceMaxHostCands"] = _pjsua2.AccountNatConfig_iceMaxHostCands_set
    __swig_getmethods__["iceMaxHostCands"] = _pjsua2.AccountNatConfig_iceMaxHostCands_get
    if _newclass:
        iceMaxHostCands = _swig_property(_pjsua2.AccountNatConfig_iceMaxHostCands_get, _pjsua2.AccountNatConfig_iceMaxHostCands_set)
    __swig_setmethods__["iceAggressiveNomination"] = _pjsua2.AccountNatConfig_iceAggressiveNomination_set
    __swig_getmethods__["iceAggressiveNomination"] = _pjsua2.AccountNatConfig_iceAggressiveNomination_get
    if _newclass:
        iceAggressiveNomination = _swig_property(_pjsua2.AccountNatConfig_iceAggressiveNomination_get, _pjsua2.AccountNatConfig_iceAggressiveNomination_set)
    __swig_setmethods__["iceNominatedCheckDelayMsec"] = _pjsua2.AccountNatConfig_iceNominatedCheckDelayMsec_set
    __swig_getmethods__["iceNominatedCheckDelayMsec"] = _pjsua2.AccountNatConfig_iceNominatedCheckDelayMsec_get
    if _newclass:
        iceNominatedCheckDelayMsec = _swig_property(_pjsua2.AccountNatConfig_iceNominatedCheckDelayMsec_get, _pjsua2.AccountNatConfig_iceNominatedCheckDelayMsec_set)
    __swig_setmethods__["iceWaitNominationTimeoutMsec"] = _pjsua2.AccountNatConfig_iceWaitNominationTimeoutMsec_set
    __swig_getmethods__["iceWaitNominationTimeoutMsec"] = _pjsua2.AccountNatConfig_iceWaitNominationTimeoutMsec_get
    if _newclass:
        iceWaitNominationTimeoutMsec = _swig_property(_pjsua2.AccountNatConfig_iceWaitNominationTimeoutMsec_get, _pjsua2.AccountNatConfig_iceWaitNominationTimeoutMsec_set)
    __swig_setmethods__["iceNoRtcp"] = _pjsua2.AccountNatConfig_iceNoRtcp_set
    __swig_getmethods__["iceNoRtcp"] = _pjsua2.AccountNatConfig_iceNoRtcp_get
    if _newclass:
        iceNoRtcp = _swig_property(_pjsua2.AccountNatConfig_iceNoRtcp_get, _pjsua2.AccountNatConfig_iceNoRtcp_set)
    __swig_setmethods__["iceAlwaysUpdate"] = _pjsua2.AccountNatConfig_iceAlwaysUpdate_set
    __swig_getmethods__["iceAlwaysUpdate"] = _pjsua2.AccountNatConfig_iceAlwaysUpdate_get
    if _newclass:
        iceAlwaysUpdate = _swig_property(_pjsua2.AccountNatConfig_iceAlwaysUpdate_get, _pjsua2.AccountNatConfig_iceAlwaysUpdate_set)
    __swig_setmethods__["turnEnabled"] = _pjsua2.AccountNatConfig_turnEnabled_set
    __swig_getmethods__["turnEnabled"] = _pjsua2.AccountNatConfig_turnEnabled_get
    if _newclass:
        turnEnabled = _swig_property(_pjsua2.AccountNatConfig_turnEnabled_get, _pjsua2.AccountNatConfig_turnEnabled_set)
    __swig_setmethods__["turnServer"] = _pjsua2.AccountNatConfig_turnServer_set
    __swig_getmethods__["turnServer"] = _pjsua2.AccountNatConfig_turnServer_get
    if _newclass:
        turnServer = _swig_property(_pjsua2.AccountNatConfig_turnServer_get, _pjsua2.AccountNatConfig_turnServer_set)
    __swig_setmethods__["turnConnType"] = _pjsua2.AccountNatConfig_turnConnType_set
    __swig_getmethods__["turnConnType"] = _pjsua2.AccountNatConfig_turnConnType_get
    if _newclass:
        turnConnType = _swig_property(_pjsua2.AccountNatConfig_turnConnType_get, _pjsua2.AccountNatConfig_turnConnType_set)
    __swig_setmethods__["turnUserName"] = _pjsua2.AccountNatConfig_turnUserName_set
    __swig_getmethods__["turnUserName"] = _pjsua2.AccountNatConfig_turnUserName_get
    if _newclass:
        turnUserName = _swig_property(_pjsua2.AccountNatConfig_turnUserName_get, _pjsua2.AccountNatConfig_turnUserName_set)
    __swig_setmethods__["turnPasswordType"] = _pjsua2.AccountNatConfig_turnPasswordType_set
    __swig_getmethods__["turnPasswordType"] = _pjsua2.AccountNatConfig_turnPasswordType_get
    if _newclass:
        turnPasswordType = _swig_property(_pjsua2.AccountNatConfig_turnPasswordType_get, _pjsua2.AccountNatConfig_turnPasswordType_set)
    __swig_setmethods__["turnPassword"] = _pjsua2.AccountNatConfig_turnPassword_set
    __swig_getmethods__["turnPassword"] = _pjsua2.AccountNatConfig_turnPassword_get
    if _newclass:
        turnPassword = _swig_property(_pjsua2.AccountNatConfig_turnPassword_get, _pjsua2.AccountNatConfig_turnPassword_set)
    __swig_setmethods__["contactRewriteUse"] = _pjsua2.AccountNatConfig_contactRewriteUse_set
    __swig_getmethods__["contactRewriteUse"] = _pjsua2.AccountNatConfig_contactRewriteUse_get
    if _newclass:
        contactRewriteUse = _swig_property(_pjsua2.AccountNatConfig_contactRewriteUse_get, _pjsua2.AccountNatConfig_contactRewriteUse_set)
    __swig_setmethods__["contactRewriteMethod"] = _pjsua2.AccountNatConfig_contactRewriteMethod_set
    __swig_getmethods__["contactRewriteMethod"] = _pjsua2.AccountNatConfig_contactRewriteMethod_get
    if _newclass:
        contactRewriteMethod = _swig_property(_pjsua2.AccountNatConfig_contactRewriteMethod_get, _pjsua2.AccountNatConfig_contactRewriteMethod_set)
    __swig_setmethods__["contactUseSrcPort"] = _pjsua2.AccountNatConfig_contactUseSrcPort_set
    __swig_getmethods__["contactUseSrcPort"] = _pjsua2.AccountNatConfig_contactUseSrcPort_get
    if _newclass:
        contactUseSrcPort = _swig_property(_pjsua2.AccountNatConfig_contactUseSrcPort_get, _pjsua2.AccountNatConfig_contactUseSrcPort_set)
    __swig_setmethods__["viaRewriteUse"] = _pjsua2.AccountNatConfig_viaRewriteUse_set
    __swig_getmethods__["viaRewriteUse"] = _pjsua2.AccountNatConfig_viaRewriteUse_get
    if _newclass:
        viaRewriteUse = _swig_property(_pjsua2.AccountNatConfig_viaRewriteUse_get, _pjsua2.AccountNatConfig_viaRewriteUse_set)
    __swig_setmethods__["sdpNatRewriteUse"] = _pjsua2.AccountNatConfig_sdpNatRewriteUse_set
    __swig_getmethods__["sdpNatRewriteUse"] = _pjsua2.AccountNatConfig_sdpNatRewriteUse_get
    if _newclass:
        sdpNatRewriteUse = _swig_property(_pjsua2.AccountNatConfig_sdpNatRewriteUse_get, _pjsua2.AccountNatConfig_sdpNatRewriteUse_set)
    __swig_setmethods__["sipOutboundUse"] = _pjsua2.AccountNatConfig_sipOutboundUse_set
    __swig_getmethods__["sipOutboundUse"] = _pjsua2.AccountNatConfig_sipOutboundUse_get
    if _newclass:
        sipOutboundUse = _swig_property(_pjsua2.AccountNatConfig_sipOutboundUse_get, _pjsua2.AccountNatConfig_sipOutboundUse_set)
    __swig_setmethods__["sipOutboundInstanceId"] = _pjsua2.AccountNatConfig_sipOutboundInstanceId_set
    __swig_getmethods__["sipOutboundInstanceId"] = _pjsua2.AccountNatConfig_sipOutboundInstanceId_get
    if _newclass:
        sipOutboundInstanceId = _swig_property(_pjsua2.AccountNatConfig_sipOutboundInstanceId_get, _pjsua2.AccountNatConfig_sipOutboundInstanceId_set)
    __swig_setmethods__["sipOutboundRegId"] = _pjsua2.AccountNatConfig_sipOutboundRegId_set
    __swig_getmethods__["sipOutboundRegId"] = _pjsua2.AccountNatConfig_sipOutboundRegId_get
    if _newclass:
        sipOutboundRegId = _swig_property(_pjsua2.AccountNatConfig_sipOutboundRegId_get, _pjsua2.AccountNatConfig_sipOutboundRegId_set)
    __swig_setmethods__["udpKaIntervalSec"] = _pjsua2.AccountNatConfig_udpKaIntervalSec_set
    __swig_getmethods__["udpKaIntervalSec"] = _pjsua2.AccountNatConfig_udpKaIntervalSec_get
    if _newclass:
        udpKaIntervalSec = _swig_property(_pjsua2.AccountNatConfig_udpKaIntervalSec_get, _pjsua2.AccountNatConfig_udpKaIntervalSec_set)
    __swig_setmethods__["udpKaData"] = _pjsua2.AccountNatConfig_udpKaData_set
    __swig_getmethods__["udpKaData"] = _pjsua2.AccountNatConfig_udpKaData_get
    if _newclass:
        udpKaData = _swig_property(_pjsua2.AccountNatConfig_udpKaData_get, _pjsua2.AccountNatConfig_udpKaData_set)

    def __init__(self):
        this = _pjsua2.new_AccountNatConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def readObject(self, node):
        return _pjsua2.AccountNatConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.AccountNatConfig_writeObject(self, node)
    __swig_destroy__ = _pjsua2.delete_AccountNatConfig
    __del__ = lambda self: None
AccountNatConfig_swigregister = _pjsua2.AccountNatConfig_swigregister
AccountNatConfig_swigregister(AccountNatConfig)

class SrtpCrypto(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SrtpCrypto, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SrtpCrypto, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _pjsua2.SrtpCrypto_key_set
    __swig_getmethods__["key"] = _pjsua2.SrtpCrypto_key_get
    if _newclass:
        key = _swig_property(_pjsua2.SrtpCrypto_key_get, _pjsua2.SrtpCrypto_key_set)
    __swig_setmethods__["name"] = _pjsua2.SrtpCrypto_name_set
    __swig_getmethods__["name"] = _pjsua2.SrtpCrypto_name_get
    if _newclass:
        name = _swig_property(_pjsua2.SrtpCrypto_name_get, _pjsua2.SrtpCrypto_name_set)
    __swig_setmethods__["flags"] = _pjsua2.SrtpCrypto_flags_set
    __swig_getmethods__["flags"] = _pjsua2.SrtpCrypto_flags_get
    if _newclass:
        flags = _swig_property(_pjsua2.SrtpCrypto_flags_get, _pjsua2.SrtpCrypto_flags_set)

    def __init__(self):
        this = _pjsua2.new_SrtpCrypto()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_SrtpCrypto
    __del__ = lambda self: None
SrtpCrypto_swigregister = _pjsua2.SrtpCrypto_swigregister
SrtpCrypto_swigregister(SrtpCrypto)

class SrtpOpt(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SrtpOpt, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SrtpOpt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cryptos"] = _pjsua2.SrtpOpt_cryptos_set
    __swig_getmethods__["cryptos"] = _pjsua2.SrtpOpt_cryptos_get
    if _newclass:
        cryptos = _swig_property(_pjsua2.SrtpOpt_cryptos_get, _pjsua2.SrtpOpt_cryptos_set)
    __swig_setmethods__["keyings"] = _pjsua2.SrtpOpt_keyings_set
    __swig_getmethods__["keyings"] = _pjsua2.SrtpOpt_keyings_get
    if _newclass:
        keyings = _swig_property(_pjsua2.SrtpOpt_keyings_get, _pjsua2.SrtpOpt_keyings_set)

    def __init__(self):
        this = _pjsua2.new_SrtpOpt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def readObject(self, node):
        return _pjsua2.SrtpOpt_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.SrtpOpt_writeObject(self, node)
    __swig_destroy__ = _pjsua2.delete_SrtpOpt
    __del__ = lambda self: None
SrtpOpt_swigregister = _pjsua2.SrtpOpt_swigregister
SrtpOpt_swigregister(SrtpOpt)

class RtcpFbCap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RtcpFbCap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RtcpFbCap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["codecId"] = _pjsua2.RtcpFbCap_codecId_set
    __swig_getmethods__["codecId"] = _pjsua2.RtcpFbCap_codecId_get
    if _newclass:
        codecId = _swig_property(_pjsua2.RtcpFbCap_codecId_get, _pjsua2.RtcpFbCap_codecId_set)
    __swig_setmethods__["type"] = _pjsua2.RtcpFbCap_type_set
    __swig_getmethods__["type"] = _pjsua2.RtcpFbCap_type_get
    if _newclass:
        type = _swig_property(_pjsua2.RtcpFbCap_type_get, _pjsua2.RtcpFbCap_type_set)
    __swig_setmethods__["typeName"] = _pjsua2.RtcpFbCap_typeName_set
    __swig_getmethods__["typeName"] = _pjsua2.RtcpFbCap_typeName_get
    if _newclass:
        typeName = _swig_property(_pjsua2.RtcpFbCap_typeName_get, _pjsua2.RtcpFbCap_typeName_set)
    __swig_setmethods__["param"] = _pjsua2.RtcpFbCap_param_set
    __swig_getmethods__["param"] = _pjsua2.RtcpFbCap_param_get
    if _newclass:
        param = _swig_property(_pjsua2.RtcpFbCap_param_get, _pjsua2.RtcpFbCap_param_set)

    def __init__(self):
        this = _pjsua2.new_RtcpFbCap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_RtcpFbCap
    __del__ = lambda self: None
RtcpFbCap_swigregister = _pjsua2.RtcpFbCap_swigregister
RtcpFbCap_swigregister(RtcpFbCap)

class RtcpFbConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RtcpFbConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RtcpFbConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dontUseAvpf"] = _pjsua2.RtcpFbConfig_dontUseAvpf_set
    __swig_getmethods__["dontUseAvpf"] = _pjsua2.RtcpFbConfig_dontUseAvpf_get
    if _newclass:
        dontUseAvpf = _swig_property(_pjsua2.RtcpFbConfig_dontUseAvpf_get, _pjsua2.RtcpFbConfig_dontUseAvpf_set)
    __swig_setmethods__["caps"] = _pjsua2.RtcpFbConfig_caps_set
    __swig_getmethods__["caps"] = _pjsua2.RtcpFbConfig_caps_get
    if _newclass:
        caps = _swig_property(_pjsua2.RtcpFbConfig_caps_get, _pjsua2.RtcpFbConfig_caps_set)

    def __init__(self):
        this = _pjsua2.new_RtcpFbConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def readObject(self, node):
        return _pjsua2.RtcpFbConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.RtcpFbConfig_writeObject(self, node)
    __swig_destroy__ = _pjsua2.delete_RtcpFbConfig
    __del__ = lambda self: None
RtcpFbConfig_swigregister = _pjsua2.RtcpFbConfig_swigregister
RtcpFbConfig_swigregister(RtcpFbConfig)

class AccountMediaConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountMediaConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccountMediaConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["transportConfig"] = _pjsua2.AccountMediaConfig_transportConfig_set
    __swig_getmethods__["transportConfig"] = _pjsua2.AccountMediaConfig_transportConfig_get
    if _newclass:
        transportConfig = _swig_property(_pjsua2.AccountMediaConfig_transportConfig_get, _pjsua2.AccountMediaConfig_transportConfig_set)
    __swig_setmethods__["lockCodecEnabled"] = _pjsua2.AccountMediaConfig_lockCodecEnabled_set
    __swig_getmethods__["lockCodecEnabled"] = _pjsua2.AccountMediaConfig_lockCodecEnabled_get
    if _newclass:
        lockCodecEnabled = _swig_property(_pjsua2.AccountMediaConfig_lockCodecEnabled_get, _pjsua2.AccountMediaConfig_lockCodecEnabled_set)
    __swig_setmethods__["streamKaEnabled"] = _pjsua2.AccountMediaConfig_streamKaEnabled_set
    __swig_getmethods__["streamKaEnabled"] = _pjsua2.AccountMediaConfig_streamKaEnabled_get
    if _newclass:
        streamKaEnabled = _swig_property(_pjsua2.AccountMediaConfig_streamKaEnabled_get, _pjsua2.AccountMediaConfig_streamKaEnabled_set)
    __swig_setmethods__["srtpUse"] = _pjsua2.AccountMediaConfig_srtpUse_set
    __swig_getmethods__["srtpUse"] = _pjsua2.AccountMediaConfig_srtpUse_get
    if _newclass:
        srtpUse = _swig_property(_pjsua2.AccountMediaConfig_srtpUse_get, _pjsua2.AccountMediaConfig_srtpUse_set)
    __swig_setmethods__["srtpSecureSignaling"] = _pjsua2.AccountMediaConfig_srtpSecureSignaling_set
    __swig_getmethods__["srtpSecureSignaling"] = _pjsua2.AccountMediaConfig_srtpSecureSignaling_get
    if _newclass:
        srtpSecureSignaling = _swig_property(_pjsua2.AccountMediaConfig_srtpSecureSignaling_get, _pjsua2.AccountMediaConfig_srtpSecureSignaling_set)
    __swig_setmethods__["srtpOpt"] = _pjsua2.AccountMediaConfig_srtpOpt_set
    __swig_getmethods__["srtpOpt"] = _pjsua2.AccountMediaConfig_srtpOpt_get
    if _newclass:
        srtpOpt = _swig_property(_pjsua2.AccountMediaConfig_srtpOpt_get, _pjsua2.AccountMediaConfig_srtpOpt_set)
    __swig_setmethods__["ipv6Use"] = _pjsua2.AccountMediaConfig_ipv6Use_set
    __swig_getmethods__["ipv6Use"] = _pjsua2.AccountMediaConfig_ipv6Use_get
    if _newclass:
        ipv6Use = _swig_property(_pjsua2.AccountMediaConfig_ipv6Use_get, _pjsua2.AccountMediaConfig_ipv6Use_set)
    __swig_setmethods__["rtcpMuxEnabled"] = _pjsua2.AccountMediaConfig_rtcpMuxEnabled_set
    __swig_getmethods__["rtcpMuxEnabled"] = _pjsua2.AccountMediaConfig_rtcpMuxEnabled_get
    if _newclass:
        rtcpMuxEnabled = _swig_property(_pjsua2.AccountMediaConfig_rtcpMuxEnabled_get, _pjsua2.AccountMediaConfig_rtcpMuxEnabled_set)
    __swig_setmethods__["rtcpFbConfig"] = _pjsua2.AccountMediaConfig_rtcpFbConfig_set
    __swig_getmethods__["rtcpFbConfig"] = _pjsua2.AccountMediaConfig_rtcpFbConfig_get
    if _newclass:
        rtcpFbConfig = _swig_property(_pjsua2.AccountMediaConfig_rtcpFbConfig_get, _pjsua2.AccountMediaConfig_rtcpFbConfig_set)

    def __init__(self):
        this = _pjsua2.new_AccountMediaConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def readObject(self, node):
        return _pjsua2.AccountMediaConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.AccountMediaConfig_writeObject(self, node)
    __swig_destroy__ = _pjsua2.delete_AccountMediaConfig
    __del__ = lambda self: None
AccountMediaConfig_swigregister = _pjsua2.AccountMediaConfig_swigregister
AccountMediaConfig_swigregister(AccountMediaConfig)

class AccountVideoConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountVideoConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccountVideoConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["autoShowIncoming"] = _pjsua2.AccountVideoConfig_autoShowIncoming_set
    __swig_getmethods__["autoShowIncoming"] = _pjsua2.AccountVideoConfig_autoShowIncoming_get
    if _newclass:
        autoShowIncoming = _swig_property(_pjsua2.AccountVideoConfig_autoShowIncoming_get, _pjsua2.AccountVideoConfig_autoShowIncoming_set)
    __swig_setmethods__["autoTransmitOutgoing"] = _pjsua2.AccountVideoConfig_autoTransmitOutgoing_set
    __swig_getmethods__["autoTransmitOutgoing"] = _pjsua2.AccountVideoConfig_autoTransmitOutgoing_get
    if _newclass:
        autoTransmitOutgoing = _swig_property(_pjsua2.AccountVideoConfig_autoTransmitOutgoing_get, _pjsua2.AccountVideoConfig_autoTransmitOutgoing_set)
    __swig_setmethods__["windowFlags"] = _pjsua2.AccountVideoConfig_windowFlags_set
    __swig_getmethods__["windowFlags"] = _pjsua2.AccountVideoConfig_windowFlags_get
    if _newclass:
        windowFlags = _swig_property(_pjsua2.AccountVideoConfig_windowFlags_get, _pjsua2.AccountVideoConfig_windowFlags_set)
    __swig_setmethods__["defaultCaptureDevice"] = _pjsua2.AccountVideoConfig_defaultCaptureDevice_set
    __swig_getmethods__["defaultCaptureDevice"] = _pjsua2.AccountVideoConfig_defaultCaptureDevice_get
    if _newclass:
        defaultCaptureDevice = _swig_property(_pjsua2.AccountVideoConfig_defaultCaptureDevice_get, _pjsua2.AccountVideoConfig_defaultCaptureDevice_set)
    __swig_setmethods__["defaultRenderDevice"] = _pjsua2.AccountVideoConfig_defaultRenderDevice_set
    __swig_getmethods__["defaultRenderDevice"] = _pjsua2.AccountVideoConfig_defaultRenderDevice_get
    if _newclass:
        defaultRenderDevice = _swig_property(_pjsua2.AccountVideoConfig_defaultRenderDevice_get, _pjsua2.AccountVideoConfig_defaultRenderDevice_set)
    __swig_setmethods__["rateControlMethod"] = _pjsua2.AccountVideoConfig_rateControlMethod_set
    __swig_getmethods__["rateControlMethod"] = _pjsua2.AccountVideoConfig_rateControlMethod_get
    if _newclass:
        rateControlMethod = _swig_property(_pjsua2.AccountVideoConfig_rateControlMethod_get, _pjsua2.AccountVideoConfig_rateControlMethod_set)
    __swig_setmethods__["rateControlBandwidth"] = _pjsua2.AccountVideoConfig_rateControlBandwidth_set
    __swig_getmethods__["rateControlBandwidth"] = _pjsua2.AccountVideoConfig_rateControlBandwidth_get
    if _newclass:
        rateControlBandwidth = _swig_property(_pjsua2.AccountVideoConfig_rateControlBandwidth_get, _pjsua2.AccountVideoConfig_rateControlBandwidth_set)
    __swig_setmethods__["startKeyframeCount"] = _pjsua2.AccountVideoConfig_startKeyframeCount_set
    __swig_getmethods__["startKeyframeCount"] = _pjsua2.AccountVideoConfig_startKeyframeCount_get
    if _newclass:
        startKeyframeCount = _swig_property(_pjsua2.AccountVideoConfig_startKeyframeCount_get, _pjsua2.AccountVideoConfig_startKeyframeCount_set)
    __swig_setmethods__["startKeyframeInterval"] = _pjsua2.AccountVideoConfig_startKeyframeInterval_set
    __swig_getmethods__["startKeyframeInterval"] = _pjsua2.AccountVideoConfig_startKeyframeInterval_get
    if _newclass:
        startKeyframeInterval = _swig_property(_pjsua2.AccountVideoConfig_startKeyframeInterval_get, _pjsua2.AccountVideoConfig_startKeyframeInterval_set)

    def __init__(self):
        this = _pjsua2.new_AccountVideoConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def readObject(self, node):
        return _pjsua2.AccountVideoConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.AccountVideoConfig_writeObject(self, node)
    __swig_destroy__ = _pjsua2.delete_AccountVideoConfig
    __del__ = lambda self: None
AccountVideoConfig_swigregister = _pjsua2.AccountVideoConfig_swigregister
AccountVideoConfig_swigregister(AccountVideoConfig)

class AccountIpChangeConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountIpChangeConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccountIpChangeConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["shutdownTp"] = _pjsua2.AccountIpChangeConfig_shutdownTp_set
    __swig_getmethods__["shutdownTp"] = _pjsua2.AccountIpChangeConfig_shutdownTp_get
    if _newclass:
        shutdownTp = _swig_property(_pjsua2.AccountIpChangeConfig_shutdownTp_get, _pjsua2.AccountIpChangeConfig_shutdownTp_set)
    __swig_setmethods__["hangupCalls"] = _pjsua2.AccountIpChangeConfig_hangupCalls_set
    __swig_getmethods__["hangupCalls"] = _pjsua2.AccountIpChangeConfig_hangupCalls_get
    if _newclass:
        hangupCalls = _swig_property(_pjsua2.AccountIpChangeConfig_hangupCalls_get, _pjsua2.AccountIpChangeConfig_hangupCalls_set)
    __swig_setmethods__["reinviteFlags"] = _pjsua2.AccountIpChangeConfig_reinviteFlags_set
    __swig_getmethods__["reinviteFlags"] = _pjsua2.AccountIpChangeConfig_reinviteFlags_get
    if _newclass:
        reinviteFlags = _swig_property(_pjsua2.AccountIpChangeConfig_reinviteFlags_get, _pjsua2.AccountIpChangeConfig_reinviteFlags_set)
    __swig_destroy__ = _pjsua2.delete_AccountIpChangeConfig
    __del__ = lambda self: None

    def readObject(self, node):
        return _pjsua2.AccountIpChangeConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.AccountIpChangeConfig_writeObject(self, node)

    def __init__(self):
        this = _pjsua2.new_AccountIpChangeConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
AccountIpChangeConfig_swigregister = _pjsua2.AccountIpChangeConfig_swigregister
AccountIpChangeConfig_swigregister(AccountIpChangeConfig)

class AccountConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccountConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["priority"] = _pjsua2.AccountConfig_priority_set
    __swig_getmethods__["priority"] = _pjsua2.AccountConfig_priority_get
    if _newclass:
        priority = _swig_property(_pjsua2.AccountConfig_priority_get, _pjsua2.AccountConfig_priority_set)
    __swig_setmethods__["idUri"] = _pjsua2.AccountConfig_idUri_set
    __swig_getmethods__["idUri"] = _pjsua2.AccountConfig_idUri_get
    if _newclass:
        idUri = _swig_property(_pjsua2.AccountConfig_idUri_get, _pjsua2.AccountConfig_idUri_set)
    __swig_setmethods__["regConfig"] = _pjsua2.AccountConfig_regConfig_set
    __swig_getmethods__["regConfig"] = _pjsua2.AccountConfig_regConfig_get
    if _newclass:
        regConfig = _swig_property(_pjsua2.AccountConfig_regConfig_get, _pjsua2.AccountConfig_regConfig_set)
    __swig_setmethods__["sipConfig"] = _pjsua2.AccountConfig_sipConfig_set
    __swig_getmethods__["sipConfig"] = _pjsua2.AccountConfig_sipConfig_get
    if _newclass:
        sipConfig = _swig_property(_pjsua2.AccountConfig_sipConfig_get, _pjsua2.AccountConfig_sipConfig_set)
    __swig_setmethods__["callConfig"] = _pjsua2.AccountConfig_callConfig_set
    __swig_getmethods__["callConfig"] = _pjsua2.AccountConfig_callConfig_get
    if _newclass:
        callConfig = _swig_property(_pjsua2.AccountConfig_callConfig_get, _pjsua2.AccountConfig_callConfig_set)
    __swig_setmethods__["presConfig"] = _pjsua2.AccountConfig_presConfig_set
    __swig_getmethods__["presConfig"] = _pjsua2.AccountConfig_presConfig_get
    if _newclass:
        presConfig = _swig_property(_pjsua2.AccountConfig_presConfig_get, _pjsua2.AccountConfig_presConfig_set)
    __swig_setmethods__["mwiConfig"] = _pjsua2.AccountConfig_mwiConfig_set
    __swig_getmethods__["mwiConfig"] = _pjsua2.AccountConfig_mwiConfig_get
    if _newclass:
        mwiConfig = _swig_property(_pjsua2.AccountConfig_mwiConfig_get, _pjsua2.AccountConfig_mwiConfig_set)
    __swig_setmethods__["natConfig"] = _pjsua2.AccountConfig_natConfig_set
    __swig_getmethods__["natConfig"] = _pjsua2.AccountConfig_natConfig_get
    if _newclass:
        natConfig = _swig_property(_pjsua2.AccountConfig_natConfig_get, _pjsua2.AccountConfig_natConfig_set)
    __swig_setmethods__["mediaConfig"] = _pjsua2.AccountConfig_mediaConfig_set
    __swig_getmethods__["mediaConfig"] = _pjsua2.AccountConfig_mediaConfig_get
    if _newclass:
        mediaConfig = _swig_property(_pjsua2.AccountConfig_mediaConfig_get, _pjsua2.AccountConfig_mediaConfig_set)
    __swig_setmethods__["videoConfig"] = _pjsua2.AccountConfig_videoConfig_set
    __swig_getmethods__["videoConfig"] = _pjsua2.AccountConfig_videoConfig_get
    if _newclass:
        videoConfig = _swig_property(_pjsua2.AccountConfig_videoConfig_get, _pjsua2.AccountConfig_videoConfig_set)
    __swig_setmethods__["ipChangeConfig"] = _pjsua2.AccountConfig_ipChangeConfig_set
    __swig_getmethods__["ipChangeConfig"] = _pjsua2.AccountConfig_ipChangeConfig_get
    if _newclass:
        ipChangeConfig = _swig_property(_pjsua2.AccountConfig_ipChangeConfig_get, _pjsua2.AccountConfig_ipChangeConfig_set)

    def __init__(self):
        this = _pjsua2.new_AccountConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def readObject(self, node):
        return _pjsua2.AccountConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.AccountConfig_writeObject(self, node)
    __swig_destroy__ = _pjsua2.delete_AccountConfig
    __del__ = lambda self: None
AccountConfig_swigregister = _pjsua2.AccountConfig_swigregister
AccountConfig_swigregister(AccountConfig)

class AccountInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccountInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _pjsua2.AccountInfo_id_set
    __swig_getmethods__["id"] = _pjsua2.AccountInfo_id_get
    if _newclass:
        id = _swig_property(_pjsua2.AccountInfo_id_get, _pjsua2.AccountInfo_id_set)
    __swig_setmethods__["isDefault"] = _pjsua2.AccountInfo_isDefault_set
    __swig_getmethods__["isDefault"] = _pjsua2.AccountInfo_isDefault_get
    if _newclass:
        isDefault = _swig_property(_pjsua2.AccountInfo_isDefault_get, _pjsua2.AccountInfo_isDefault_set)
    __swig_setmethods__["uri"] = _pjsua2.AccountInfo_uri_set
    __swig_getmethods__["uri"] = _pjsua2.AccountInfo_uri_get
    if _newclass:
        uri = _swig_property(_pjsua2.AccountInfo_uri_get, _pjsua2.AccountInfo_uri_set)
    __swig_setmethods__["regIsConfigured"] = _pjsua2.AccountInfo_regIsConfigured_set
    __swig_getmethods__["regIsConfigured"] = _pjsua2.AccountInfo_regIsConfigured_get
    if _newclass:
        regIsConfigured = _swig_property(_pjsua2.AccountInfo_regIsConfigured_get, _pjsua2.AccountInfo_regIsConfigured_set)
    __swig_setmethods__["regIsActive"] = _pjsua2.AccountInfo_regIsActive_set
    __swig_getmethods__["regIsActive"] = _pjsua2.AccountInfo_regIsActive_get
    if _newclass:
        regIsActive = _swig_property(_pjsua2.AccountInfo_regIsActive_get, _pjsua2.AccountInfo_regIsActive_set)
    __swig_setmethods__["regExpiresSec"] = _pjsua2.AccountInfo_regExpiresSec_set
    __swig_getmethods__["regExpiresSec"] = _pjsua2.AccountInfo_regExpiresSec_get
    if _newclass:
        regExpiresSec = _swig_property(_pjsua2.AccountInfo_regExpiresSec_get, _pjsua2.AccountInfo_regExpiresSec_set)
    __swig_setmethods__["regStatus"] = _pjsua2.AccountInfo_regStatus_set
    __swig_getmethods__["regStatus"] = _pjsua2.AccountInfo_regStatus_get
    if _newclass:
        regStatus = _swig_property(_pjsua2.AccountInfo_regStatus_get, _pjsua2.AccountInfo_regStatus_set)
    __swig_setmethods__["regStatusText"] = _pjsua2.AccountInfo_regStatusText_set
    __swig_getmethods__["regStatusText"] = _pjsua2.AccountInfo_regStatusText_get
    if _newclass:
        regStatusText = _swig_property(_pjsua2.AccountInfo_regStatusText_get, _pjsua2.AccountInfo_regStatusText_set)
    __swig_setmethods__["regLastErr"] = _pjsua2.AccountInfo_regLastErr_set
    __swig_getmethods__["regLastErr"] = _pjsua2.AccountInfo_regLastErr_get
    if _newclass:
        regLastErr = _swig_property(_pjsua2.AccountInfo_regLastErr_get, _pjsua2.AccountInfo_regLastErr_set)
    __swig_setmethods__["onlineStatus"] = _pjsua2.AccountInfo_onlineStatus_set
    __swig_getmethods__["onlineStatus"] = _pjsua2.AccountInfo_onlineStatus_get
    if _newclass:
        onlineStatus = _swig_property(_pjsua2.AccountInfo_onlineStatus_get, _pjsua2.AccountInfo_onlineStatus_set)
    __swig_setmethods__["onlineStatusText"] = _pjsua2.AccountInfo_onlineStatusText_set
    __swig_getmethods__["onlineStatusText"] = _pjsua2.AccountInfo_onlineStatusText_get
    if _newclass:
        onlineStatusText = _swig_property(_pjsua2.AccountInfo_onlineStatusText_get, _pjsua2.AccountInfo_onlineStatusText_set)

    def __init__(self):
        this = _pjsua2.new_AccountInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_AccountInfo
    __del__ = lambda self: None
AccountInfo_swigregister = _pjsua2.AccountInfo_swigregister
AccountInfo_swigregister(AccountInfo)

class OnIncomingCallParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnIncomingCallParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnIncomingCallParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["callId"] = _pjsua2.OnIncomingCallParam_callId_set
    __swig_getmethods__["callId"] = _pjsua2.OnIncomingCallParam_callId_get
    if _newclass:
        callId = _swig_property(_pjsua2.OnIncomingCallParam_callId_get, _pjsua2.OnIncomingCallParam_callId_set)
    __swig_setmethods__["rdata"] = _pjsua2.OnIncomingCallParam_rdata_set
    __swig_getmethods__["rdata"] = _pjsua2.OnIncomingCallParam_rdata_get
    if _newclass:
        rdata = _swig_property(_pjsua2.OnIncomingCallParam_rdata_get, _pjsua2.OnIncomingCallParam_rdata_set)

    def __init__(self):
        this = _pjsua2.new_OnIncomingCallParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnIncomingCallParam
    __del__ = lambda self: None
OnIncomingCallParam_swigregister = _pjsua2.OnIncomingCallParam_swigregister
OnIncomingCallParam_swigregister(OnIncomingCallParam)

class OnRegStartedParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnRegStartedParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnRegStartedParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["renew"] = _pjsua2.OnRegStartedParam_renew_set
    __swig_getmethods__["renew"] = _pjsua2.OnRegStartedParam_renew_get
    if _newclass:
        renew = _swig_property(_pjsua2.OnRegStartedParam_renew_get, _pjsua2.OnRegStartedParam_renew_set)

    def __init__(self):
        this = _pjsua2.new_OnRegStartedParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnRegStartedParam
    __del__ = lambda self: None
OnRegStartedParam_swigregister = _pjsua2.OnRegStartedParam_swigregister
OnRegStartedParam_swigregister(OnRegStartedParam)

class OnRegStateParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnRegStateParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnRegStateParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _pjsua2.OnRegStateParam_status_set
    __swig_getmethods__["status"] = _pjsua2.OnRegStateParam_status_get
    if _newclass:
        status = _swig_property(_pjsua2.OnRegStateParam_status_get, _pjsua2.OnRegStateParam_status_set)
    __swig_setmethods__["code"] = _pjsua2.OnRegStateParam_code_set
    __swig_getmethods__["code"] = _pjsua2.OnRegStateParam_code_get
    if _newclass:
        code = _swig_property(_pjsua2.OnRegStateParam_code_get, _pjsua2.OnRegStateParam_code_set)
    __swig_setmethods__["reason"] = _pjsua2.OnRegStateParam_reason_set
    __swig_getmethods__["reason"] = _pjsua2.OnRegStateParam_reason_get
    if _newclass:
        reason = _swig_property(_pjsua2.OnRegStateParam_reason_get, _pjsua2.OnRegStateParam_reason_set)
    __swig_setmethods__["rdata"] = _pjsua2.OnRegStateParam_rdata_set
    __swig_getmethods__["rdata"] = _pjsua2.OnRegStateParam_rdata_get
    if _newclass:
        rdata = _swig_property(_pjsua2.OnRegStateParam_rdata_get, _pjsua2.OnRegStateParam_rdata_set)
    __swig_setmethods__["expiration"] = _pjsua2.OnRegStateParam_expiration_set
    __swig_getmethods__["expiration"] = _pjsua2.OnRegStateParam_expiration_get
    if _newclass:
        expiration = _swig_property(_pjsua2.OnRegStateParam_expiration_get, _pjsua2.OnRegStateParam_expiration_set)

    def __init__(self):
        this = _pjsua2.new_OnRegStateParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnRegStateParam
    __del__ = lambda self: None
OnRegStateParam_swigregister = _pjsua2.OnRegStateParam_swigregister
OnRegStateParam_swigregister(OnRegStateParam)

class OnIncomingSubscribeParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnIncomingSubscribeParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnIncomingSubscribeParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["srvPres"] = _pjsua2.OnIncomingSubscribeParam_srvPres_set
    __swig_getmethods__["srvPres"] = _pjsua2.OnIncomingSubscribeParam_srvPres_get
    if _newclass:
        srvPres = _swig_property(_pjsua2.OnIncomingSubscribeParam_srvPres_get, _pjsua2.OnIncomingSubscribeParam_srvPres_set)
    __swig_setmethods__["fromUri"] = _pjsua2.OnIncomingSubscribeParam_fromUri_set
    __swig_getmethods__["fromUri"] = _pjsua2.OnIncomingSubscribeParam_fromUri_get
    if _newclass:
        fromUri = _swig_property(_pjsua2.OnIncomingSubscribeParam_fromUri_get, _pjsua2.OnIncomingSubscribeParam_fromUri_set)
    __swig_setmethods__["rdata"] = _pjsua2.OnIncomingSubscribeParam_rdata_set
    __swig_getmethods__["rdata"] = _pjsua2.OnIncomingSubscribeParam_rdata_get
    if _newclass:
        rdata = _swig_property(_pjsua2.OnIncomingSubscribeParam_rdata_get, _pjsua2.OnIncomingSubscribeParam_rdata_set)
    __swig_setmethods__["code"] = _pjsua2.OnIncomingSubscribeParam_code_set
    __swig_getmethods__["code"] = _pjsua2.OnIncomingSubscribeParam_code_get
    if _newclass:
        code = _swig_property(_pjsua2.OnIncomingSubscribeParam_code_get, _pjsua2.OnIncomingSubscribeParam_code_set)
    __swig_setmethods__["reason"] = _pjsua2.OnIncomingSubscribeParam_reason_set
    __swig_getmethods__["reason"] = _pjsua2.OnIncomingSubscribeParam_reason_get
    if _newclass:
        reason = _swig_property(_pjsua2.OnIncomingSubscribeParam_reason_get, _pjsua2.OnIncomingSubscribeParam_reason_set)
    __swig_setmethods__["txOption"] = _pjsua2.OnIncomingSubscribeParam_txOption_set
    __swig_getmethods__["txOption"] = _pjsua2.OnIncomingSubscribeParam_txOption_get
    if _newclass:
        txOption = _swig_property(_pjsua2.OnIncomingSubscribeParam_txOption_get, _pjsua2.OnIncomingSubscribeParam_txOption_set)

    def __init__(self):
        this = _pjsua2.new_OnIncomingSubscribeParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnIncomingSubscribeParam
    __del__ = lambda self: None
OnIncomingSubscribeParam_swigregister = _pjsua2.OnIncomingSubscribeParam_swigregister
OnIncomingSubscribeParam_swigregister(OnIncomingSubscribeParam)

class OnInstantMessageParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnInstantMessageParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnInstantMessageParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fromUri"] = _pjsua2.OnInstantMessageParam_fromUri_set
    __swig_getmethods__["fromUri"] = _pjsua2.OnInstantMessageParam_fromUri_get
    if _newclass:
        fromUri = _swig_property(_pjsua2.OnInstantMessageParam_fromUri_get, _pjsua2.OnInstantMessageParam_fromUri_set)
    __swig_setmethods__["toUri"] = _pjsua2.OnInstantMessageParam_toUri_set
    __swig_getmethods__["toUri"] = _pjsua2.OnInstantMessageParam_toUri_get
    if _newclass:
        toUri = _swig_property(_pjsua2.OnInstantMessageParam_toUri_get, _pjsua2.OnInstantMessageParam_toUri_set)
    __swig_setmethods__["contactUri"] = _pjsua2.OnInstantMessageParam_contactUri_set
    __swig_getmethods__["contactUri"] = _pjsua2.OnInstantMessageParam_contactUri_get
    if _newclass:
        contactUri = _swig_property(_pjsua2.OnInstantMessageParam_contactUri_get, _pjsua2.OnInstantMessageParam_contactUri_set)
    __swig_setmethods__["contentType"] = _pjsua2.OnInstantMessageParam_contentType_set
    __swig_getmethods__["contentType"] = _pjsua2.OnInstantMessageParam_contentType_get
    if _newclass:
        contentType = _swig_property(_pjsua2.OnInstantMessageParam_contentType_get, _pjsua2.OnInstantMessageParam_contentType_set)
    __swig_setmethods__["msgBody"] = _pjsua2.OnInstantMessageParam_msgBody_set
    __swig_getmethods__["msgBody"] = _pjsua2.OnInstantMessageParam_msgBody_get
    if _newclass:
        msgBody = _swig_property(_pjsua2.OnInstantMessageParam_msgBody_get, _pjsua2.OnInstantMessageParam_msgBody_set)
    __swig_setmethods__["rdata"] = _pjsua2.OnInstantMessageParam_rdata_set
    __swig_getmethods__["rdata"] = _pjsua2.OnInstantMessageParam_rdata_get
    if _newclass:
        rdata = _swig_property(_pjsua2.OnInstantMessageParam_rdata_get, _pjsua2.OnInstantMessageParam_rdata_set)

    def __init__(self):
        this = _pjsua2.new_OnInstantMessageParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnInstantMessageParam
    __del__ = lambda self: None
OnInstantMessageParam_swigregister = _pjsua2.OnInstantMessageParam_swigregister
OnInstantMessageParam_swigregister(OnInstantMessageParam)

class OnInstantMessageStatusParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnInstantMessageStatusParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnInstantMessageStatusParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["userData"] = _pjsua2.OnInstantMessageStatusParam_userData_set
    __swig_getmethods__["userData"] = _pjsua2.OnInstantMessageStatusParam_userData_get
    if _newclass:
        userData = _swig_property(_pjsua2.OnInstantMessageStatusParam_userData_get, _pjsua2.OnInstantMessageStatusParam_userData_set)
    __swig_setmethods__["toUri"] = _pjsua2.OnInstantMessageStatusParam_toUri_set
    __swig_getmethods__["toUri"] = _pjsua2.OnInstantMessageStatusParam_toUri_get
    if _newclass:
        toUri = _swig_property(_pjsua2.OnInstantMessageStatusParam_toUri_get, _pjsua2.OnInstantMessageStatusParam_toUri_set)
    __swig_setmethods__["msgBody"] = _pjsua2.OnInstantMessageStatusParam_msgBody_set
    __swig_getmethods__["msgBody"] = _pjsua2.OnInstantMessageStatusParam_msgBody_get
    if _newclass:
        msgBody = _swig_property(_pjsua2.OnInstantMessageStatusParam_msgBody_get, _pjsua2.OnInstantMessageStatusParam_msgBody_set)
    __swig_setmethods__["code"] = _pjsua2.OnInstantMessageStatusParam_code_set
    __swig_getmethods__["code"] = _pjsua2.OnInstantMessageStatusParam_code_get
    if _newclass:
        code = _swig_property(_pjsua2.OnInstantMessageStatusParam_code_get, _pjsua2.OnInstantMessageStatusParam_code_set)
    __swig_setmethods__["reason"] = _pjsua2.OnInstantMessageStatusParam_reason_set
    __swig_getmethods__["reason"] = _pjsua2.OnInstantMessageStatusParam_reason_get
    if _newclass:
        reason = _swig_property(_pjsua2.OnInstantMessageStatusParam_reason_get, _pjsua2.OnInstantMessageStatusParam_reason_set)
    __swig_setmethods__["rdata"] = _pjsua2.OnInstantMessageStatusParam_rdata_set
    __swig_getmethods__["rdata"] = _pjsua2.OnInstantMessageStatusParam_rdata_get
    if _newclass:
        rdata = _swig_property(_pjsua2.OnInstantMessageStatusParam_rdata_get, _pjsua2.OnInstantMessageStatusParam_rdata_set)

    def __init__(self):
        this = _pjsua2.new_OnInstantMessageStatusParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnInstantMessageStatusParam
    __del__ = lambda self: None
OnInstantMessageStatusParam_swigregister = _pjsua2.OnInstantMessageStatusParam_swigregister
OnInstantMessageStatusParam_swigregister(OnInstantMessageStatusParam)

class OnTypingIndicationParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnTypingIndicationParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnTypingIndicationParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fromUri"] = _pjsua2.OnTypingIndicationParam_fromUri_set
    __swig_getmethods__["fromUri"] = _pjsua2.OnTypingIndicationParam_fromUri_get
    if _newclass:
        fromUri = _swig_property(_pjsua2.OnTypingIndicationParam_fromUri_get, _pjsua2.OnTypingIndicationParam_fromUri_set)
    __swig_setmethods__["toUri"] = _pjsua2.OnTypingIndicationParam_toUri_set
    __swig_getmethods__["toUri"] = _pjsua2.OnTypingIndicationParam_toUri_get
    if _newclass:
        toUri = _swig_property(_pjsua2.OnTypingIndicationParam_toUri_get, _pjsua2.OnTypingIndicationParam_toUri_set)
    __swig_setmethods__["contactUri"] = _pjsua2.OnTypingIndicationParam_contactUri_set
    __swig_getmethods__["contactUri"] = _pjsua2.OnTypingIndicationParam_contactUri_get
    if _newclass:
        contactUri = _swig_property(_pjsua2.OnTypingIndicationParam_contactUri_get, _pjsua2.OnTypingIndicationParam_contactUri_set)
    __swig_setmethods__["isTyping"] = _pjsua2.OnTypingIndicationParam_isTyping_set
    __swig_getmethods__["isTyping"] = _pjsua2.OnTypingIndicationParam_isTyping_get
    if _newclass:
        isTyping = _swig_property(_pjsua2.OnTypingIndicationParam_isTyping_get, _pjsua2.OnTypingIndicationParam_isTyping_set)
    __swig_setmethods__["rdata"] = _pjsua2.OnTypingIndicationParam_rdata_set
    __swig_getmethods__["rdata"] = _pjsua2.OnTypingIndicationParam_rdata_get
    if _newclass:
        rdata = _swig_property(_pjsua2.OnTypingIndicationParam_rdata_get, _pjsua2.OnTypingIndicationParam_rdata_set)

    def __init__(self):
        this = _pjsua2.new_OnTypingIndicationParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnTypingIndicationParam
    __del__ = lambda self: None
OnTypingIndicationParam_swigregister = _pjsua2.OnTypingIndicationParam_swigregister
OnTypingIndicationParam_swigregister(OnTypingIndicationParam)

class OnMwiInfoParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnMwiInfoParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnMwiInfoParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _pjsua2.OnMwiInfoParam_state_set
    __swig_getmethods__["state"] = _pjsua2.OnMwiInfoParam_state_get
    if _newclass:
        state = _swig_property(_pjsua2.OnMwiInfoParam_state_get, _pjsua2.OnMwiInfoParam_state_set)
    __swig_setmethods__["rdata"] = _pjsua2.OnMwiInfoParam_rdata_set
    __swig_getmethods__["rdata"] = _pjsua2.OnMwiInfoParam_rdata_get
    if _newclass:
        rdata = _swig_property(_pjsua2.OnMwiInfoParam_rdata_get, _pjsua2.OnMwiInfoParam_rdata_set)

    def __init__(self):
        this = _pjsua2.new_OnMwiInfoParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnMwiInfoParam
    __del__ = lambda self: None
OnMwiInfoParam_swigregister = _pjsua2.OnMwiInfoParam_swigregister
OnMwiInfoParam_swigregister(OnMwiInfoParam)

class PresNotifyParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PresNotifyParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PresNotifyParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["srvPres"] = _pjsua2.PresNotifyParam_srvPres_set
    __swig_getmethods__["srvPres"] = _pjsua2.PresNotifyParam_srvPres_get
    if _newclass:
        srvPres = _swig_property(_pjsua2.PresNotifyParam_srvPres_get, _pjsua2.PresNotifyParam_srvPres_set)
    __swig_setmethods__["state"] = _pjsua2.PresNotifyParam_state_set
    __swig_getmethods__["state"] = _pjsua2.PresNotifyParam_state_get
    if _newclass:
        state = _swig_property(_pjsua2.PresNotifyParam_state_get, _pjsua2.PresNotifyParam_state_set)
    __swig_setmethods__["stateStr"] = _pjsua2.PresNotifyParam_stateStr_set
    __swig_getmethods__["stateStr"] = _pjsua2.PresNotifyParam_stateStr_get
    if _newclass:
        stateStr = _swig_property(_pjsua2.PresNotifyParam_stateStr_get, _pjsua2.PresNotifyParam_stateStr_set)
    __swig_setmethods__["reason"] = _pjsua2.PresNotifyParam_reason_set
    __swig_getmethods__["reason"] = _pjsua2.PresNotifyParam_reason_get
    if _newclass:
        reason = _swig_property(_pjsua2.PresNotifyParam_reason_get, _pjsua2.PresNotifyParam_reason_set)
    __swig_setmethods__["withBody"] = _pjsua2.PresNotifyParam_withBody_set
    __swig_getmethods__["withBody"] = _pjsua2.PresNotifyParam_withBody_get
    if _newclass:
        withBody = _swig_property(_pjsua2.PresNotifyParam_withBody_get, _pjsua2.PresNotifyParam_withBody_set)
    __swig_setmethods__["txOption"] = _pjsua2.PresNotifyParam_txOption_set
    __swig_getmethods__["txOption"] = _pjsua2.PresNotifyParam_txOption_get
    if _newclass:
        txOption = _swig_property(_pjsua2.PresNotifyParam_txOption_get, _pjsua2.PresNotifyParam_txOption_set)

    def __init__(self):
        this = _pjsua2.new_PresNotifyParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_PresNotifyParam
    __del__ = lambda self: None
PresNotifyParam_swigregister = _pjsua2.PresNotifyParam_swigregister
PresNotifyParam_swigregister(PresNotifyParam)

class FindBuddyMatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FindBuddyMatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FindBuddyMatch, name)
    __repr__ = _swig_repr

    def match(self, token, buddy):
        return _pjsua2.FindBuddyMatch_match(self, token, buddy)
    __swig_destroy__ = _pjsua2.delete_FindBuddyMatch
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == FindBuddyMatch:
            _self = None
        else:
            _self = self
        this = _pjsua2.new_FindBuddyMatch(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _pjsua2.disown_FindBuddyMatch(self)
        return weakref_proxy(self)
FindBuddyMatch_swigregister = _pjsua2.FindBuddyMatch_swigregister
FindBuddyMatch_swigregister(FindBuddyMatch)

class Account(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Account, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Account, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Account:
            _self = None
        else:
            _self = self
        this = _pjsua2.new_Account(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_Account
    __del__ = lambda self: None

    def create(self, cfg, make_default=False):
        return _pjsua2.Account_create(self, cfg, make_default)

    def shutdown(self):
        return _pjsua2.Account_shutdown(self)

    def modify(self, cfg):
        return _pjsua2.Account_modify(self, cfg)

    def isValid(self):
        return _pjsua2.Account_isValid(self)

    def setDefault(self):
        return _pjsua2.Account_setDefault(self)

    def isDefault(self):
        return _pjsua2.Account_isDefault(self)

    def getId(self):
        return _pjsua2.Account_getId(self)
    if _newclass:
        lookup = staticmethod(_pjsua2.Account_lookup)
    else:
        lookup = _pjsua2.Account_lookup

    def getInfo(self):
        return _pjsua2.Account_getInfo(self)

    def setRegistration(self, renew):
        return _pjsua2.Account_setRegistration(self, renew)

    def setOnlineStatus(self, pres_st):
        return _pjsua2.Account_setOnlineStatus(self, pres_st)

    def setTransport(self, tp_id):
        return _pjsua2.Account_setTransport(self, tp_id)

    def presNotify(self, prm):
        return _pjsua2.Account_presNotify(self, prm)

    def enumBuddies2(self):
        return _pjsua2.Account_enumBuddies2(self)

    def findBuddy2(self, uri):
        return _pjsua2.Account_findBuddy2(self, uri)

    def onIncomingCall(self, prm):
        return _pjsua2.Account_onIncomingCall(self, prm)

    def onRegStarted(self, prm):
        return _pjsua2.Account_onRegStarted(self, prm)

    def onRegState(self, prm):
        return _pjsua2.Account_onRegState(self, prm)

    def onIncomingSubscribe(self, prm):
        return _pjsua2.Account_onIncomingSubscribe(self, prm)

    def onInstantMessage(self, prm):
        return _pjsua2.Account_onInstantMessage(self, prm)

    def onInstantMessageStatus(self, prm):
        return _pjsua2.Account_onInstantMessageStatus(self, prm)

    def onTypingIndication(self, prm):
        return _pjsua2.Account_onTypingIndication(self, prm)

    def onMwiInfo(self, prm):
        return _pjsua2.Account_onMwiInfo(self, prm)
    def __disown__(self):
        self.this.disown()
        _pjsua2.disown_Account(self)
        return weakref_proxy(self)
Account_swigregister = _pjsua2.Account_swigregister
Account_swigregister(Account)

def Account_lookup(acc_id):
    return _pjsua2.Account_lookup(acc_id)
Account_lookup = _pjsua2.Account_lookup

class MathStat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MathStat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MathStat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _pjsua2.MathStat_n_set
    __swig_getmethods__["n"] = _pjsua2.MathStat_n_get
    if _newclass:
        n = _swig_property(_pjsua2.MathStat_n_get, _pjsua2.MathStat_n_set)
    __swig_setmethods__["max"] = _pjsua2.MathStat_max_set
    __swig_getmethods__["max"] = _pjsua2.MathStat_max_get
    if _newclass:
        max = _swig_property(_pjsua2.MathStat_max_get, _pjsua2.MathStat_max_set)
    __swig_setmethods__["min"] = _pjsua2.MathStat_min_set
    __swig_getmethods__["min"] = _pjsua2.MathStat_min_get
    if _newclass:
        min = _swig_property(_pjsua2.MathStat_min_get, _pjsua2.MathStat_min_set)
    __swig_setmethods__["last"] = _pjsua2.MathStat_last_set
    __swig_getmethods__["last"] = _pjsua2.MathStat_last_get
    if _newclass:
        last = _swig_property(_pjsua2.MathStat_last_get, _pjsua2.MathStat_last_set)
    __swig_setmethods__["mean"] = _pjsua2.MathStat_mean_set
    __swig_getmethods__["mean"] = _pjsua2.MathStat_mean_get
    if _newclass:
        mean = _swig_property(_pjsua2.MathStat_mean_get, _pjsua2.MathStat_mean_set)

    def __init__(self):
        this = _pjsua2.new_MathStat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_MathStat
    __del__ = lambda self: None
MathStat_swigregister = _pjsua2.MathStat_swigregister
MathStat_swigregister(MathStat)

class LossType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LossType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LossType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["burst"] = _pjsua2.LossType_burst_set
    __swig_getmethods__["burst"] = _pjsua2.LossType_burst_get
    if _newclass:
        burst = _swig_property(_pjsua2.LossType_burst_get, _pjsua2.LossType_burst_set)
    __swig_setmethods__["random"] = _pjsua2.LossType_random_set
    __swig_getmethods__["random"] = _pjsua2.LossType_random_get
    if _newclass:
        random = _swig_property(_pjsua2.LossType_random_get, _pjsua2.LossType_random_set)

    def __init__(self):
        this = _pjsua2.new_LossType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_LossType
    __del__ = lambda self: None
LossType_swigregister = _pjsua2.LossType_swigregister
LossType_swigregister(LossType)

class RtcpStreamStat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RtcpStreamStat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RtcpStreamStat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["update"] = _pjsua2.RtcpStreamStat_update_set
    __swig_getmethods__["update"] = _pjsua2.RtcpStreamStat_update_get
    if _newclass:
        update = _swig_property(_pjsua2.RtcpStreamStat_update_get, _pjsua2.RtcpStreamStat_update_set)
    __swig_setmethods__["updateCount"] = _pjsua2.RtcpStreamStat_updateCount_set
    __swig_getmethods__["updateCount"] = _pjsua2.RtcpStreamStat_updateCount_get
    if _newclass:
        updateCount = _swig_property(_pjsua2.RtcpStreamStat_updateCount_get, _pjsua2.RtcpStreamStat_updateCount_set)
    __swig_setmethods__["pkt"] = _pjsua2.RtcpStreamStat_pkt_set
    __swig_getmethods__["pkt"] = _pjsua2.RtcpStreamStat_pkt_get
    if _newclass:
        pkt = _swig_property(_pjsua2.RtcpStreamStat_pkt_get, _pjsua2.RtcpStreamStat_pkt_set)
    __swig_setmethods__["bytes"] = _pjsua2.RtcpStreamStat_bytes_set
    __swig_getmethods__["bytes"] = _pjsua2.RtcpStreamStat_bytes_get
    if _newclass:
        bytes = _swig_property(_pjsua2.RtcpStreamStat_bytes_get, _pjsua2.RtcpStreamStat_bytes_set)
    __swig_setmethods__["discard"] = _pjsua2.RtcpStreamStat_discard_set
    __swig_getmethods__["discard"] = _pjsua2.RtcpStreamStat_discard_get
    if _newclass:
        discard = _swig_property(_pjsua2.RtcpStreamStat_discard_get, _pjsua2.RtcpStreamStat_discard_set)
    __swig_setmethods__["loss"] = _pjsua2.RtcpStreamStat_loss_set
    __swig_getmethods__["loss"] = _pjsua2.RtcpStreamStat_loss_get
    if _newclass:
        loss = _swig_property(_pjsua2.RtcpStreamStat_loss_get, _pjsua2.RtcpStreamStat_loss_set)
    __swig_setmethods__["reorder"] = _pjsua2.RtcpStreamStat_reorder_set
    __swig_getmethods__["reorder"] = _pjsua2.RtcpStreamStat_reorder_get
    if _newclass:
        reorder = _swig_property(_pjsua2.RtcpStreamStat_reorder_get, _pjsua2.RtcpStreamStat_reorder_set)
    __swig_setmethods__["dup"] = _pjsua2.RtcpStreamStat_dup_set
    __swig_getmethods__["dup"] = _pjsua2.RtcpStreamStat_dup_get
    if _newclass:
        dup = _swig_property(_pjsua2.RtcpStreamStat_dup_get, _pjsua2.RtcpStreamStat_dup_set)
    __swig_setmethods__["lossPeriodUsec"] = _pjsua2.RtcpStreamStat_lossPeriodUsec_set
    __swig_getmethods__["lossPeriodUsec"] = _pjsua2.RtcpStreamStat_lossPeriodUsec_get
    if _newclass:
        lossPeriodUsec = _swig_property(_pjsua2.RtcpStreamStat_lossPeriodUsec_get, _pjsua2.RtcpStreamStat_lossPeriodUsec_set)
    __swig_setmethods__["lossType"] = _pjsua2.RtcpStreamStat_lossType_set
    __swig_getmethods__["lossType"] = _pjsua2.RtcpStreamStat_lossType_get
    if _newclass:
        lossType = _swig_property(_pjsua2.RtcpStreamStat_lossType_get, _pjsua2.RtcpStreamStat_lossType_set)
    __swig_setmethods__["jitterUsec"] = _pjsua2.RtcpStreamStat_jitterUsec_set
    __swig_getmethods__["jitterUsec"] = _pjsua2.RtcpStreamStat_jitterUsec_get
    if _newclass:
        jitterUsec = _swig_property(_pjsua2.RtcpStreamStat_jitterUsec_get, _pjsua2.RtcpStreamStat_jitterUsec_set)

    def __init__(self):
        this = _pjsua2.new_RtcpStreamStat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_RtcpStreamStat
    __del__ = lambda self: None
RtcpStreamStat_swigregister = _pjsua2.RtcpStreamStat_swigregister
RtcpStreamStat_swigregister(RtcpStreamStat)

class RtcpSdes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RtcpSdes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RtcpSdes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cname"] = _pjsua2.RtcpSdes_cname_set
    __swig_getmethods__["cname"] = _pjsua2.RtcpSdes_cname_get
    if _newclass:
        cname = _swig_property(_pjsua2.RtcpSdes_cname_get, _pjsua2.RtcpSdes_cname_set)
    __swig_setmethods__["name"] = _pjsua2.RtcpSdes_name_set
    __swig_getmethods__["name"] = _pjsua2.RtcpSdes_name_get
    if _newclass:
        name = _swig_property(_pjsua2.RtcpSdes_name_get, _pjsua2.RtcpSdes_name_set)
    __swig_setmethods__["email"] = _pjsua2.RtcpSdes_email_set
    __swig_getmethods__["email"] = _pjsua2.RtcpSdes_email_get
    if _newclass:
        email = _swig_property(_pjsua2.RtcpSdes_email_get, _pjsua2.RtcpSdes_email_set)
    __swig_setmethods__["phone"] = _pjsua2.RtcpSdes_phone_set
    __swig_getmethods__["phone"] = _pjsua2.RtcpSdes_phone_get
    if _newclass:
        phone = _swig_property(_pjsua2.RtcpSdes_phone_get, _pjsua2.RtcpSdes_phone_set)
    __swig_setmethods__["loc"] = _pjsua2.RtcpSdes_loc_set
    __swig_getmethods__["loc"] = _pjsua2.RtcpSdes_loc_get
    if _newclass:
        loc = _swig_property(_pjsua2.RtcpSdes_loc_get, _pjsua2.RtcpSdes_loc_set)
    __swig_setmethods__["tool"] = _pjsua2.RtcpSdes_tool_set
    __swig_getmethods__["tool"] = _pjsua2.RtcpSdes_tool_get
    if _newclass:
        tool = _swig_property(_pjsua2.RtcpSdes_tool_get, _pjsua2.RtcpSdes_tool_set)
    __swig_setmethods__["note"] = _pjsua2.RtcpSdes_note_set
    __swig_getmethods__["note"] = _pjsua2.RtcpSdes_note_get
    if _newclass:
        note = _swig_property(_pjsua2.RtcpSdes_note_get, _pjsua2.RtcpSdes_note_set)

    def __init__(self):
        this = _pjsua2.new_RtcpSdes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_RtcpSdes
    __del__ = lambda self: None
RtcpSdes_swigregister = _pjsua2.RtcpSdes_swigregister
RtcpSdes_swigregister(RtcpSdes)

class RtcpStat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RtcpStat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RtcpStat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start"] = _pjsua2.RtcpStat_start_set
    __swig_getmethods__["start"] = _pjsua2.RtcpStat_start_get
    if _newclass:
        start = _swig_property(_pjsua2.RtcpStat_start_get, _pjsua2.RtcpStat_start_set)
    __swig_setmethods__["txStat"] = _pjsua2.RtcpStat_txStat_set
    __swig_getmethods__["txStat"] = _pjsua2.RtcpStat_txStat_get
    if _newclass:
        txStat = _swig_property(_pjsua2.RtcpStat_txStat_get, _pjsua2.RtcpStat_txStat_set)
    __swig_setmethods__["rxStat"] = _pjsua2.RtcpStat_rxStat_set
    __swig_getmethods__["rxStat"] = _pjsua2.RtcpStat_rxStat_get
    if _newclass:
        rxStat = _swig_property(_pjsua2.RtcpStat_rxStat_get, _pjsua2.RtcpStat_rxStat_set)
    __swig_setmethods__["rttUsec"] = _pjsua2.RtcpStat_rttUsec_set
    __swig_getmethods__["rttUsec"] = _pjsua2.RtcpStat_rttUsec_get
    if _newclass:
        rttUsec = _swig_property(_pjsua2.RtcpStat_rttUsec_get, _pjsua2.RtcpStat_rttUsec_set)
    __swig_setmethods__["rtpTxLastTs"] = _pjsua2.RtcpStat_rtpTxLastTs_set
    __swig_getmethods__["rtpTxLastTs"] = _pjsua2.RtcpStat_rtpTxLastTs_get
    if _newclass:
        rtpTxLastTs = _swig_property(_pjsua2.RtcpStat_rtpTxLastTs_get, _pjsua2.RtcpStat_rtpTxLastTs_set)
    __swig_setmethods__["rtpTxLastSeq"] = _pjsua2.RtcpStat_rtpTxLastSeq_set
    __swig_getmethods__["rtpTxLastSeq"] = _pjsua2.RtcpStat_rtpTxLastSeq_get
    if _newclass:
        rtpTxLastSeq = _swig_property(_pjsua2.RtcpStat_rtpTxLastSeq_get, _pjsua2.RtcpStat_rtpTxLastSeq_set)
    __swig_setmethods__["rxIpdvUsec"] = _pjsua2.RtcpStat_rxIpdvUsec_set
    __swig_getmethods__["rxIpdvUsec"] = _pjsua2.RtcpStat_rxIpdvUsec_get
    if _newclass:
        rxIpdvUsec = _swig_property(_pjsua2.RtcpStat_rxIpdvUsec_get, _pjsua2.RtcpStat_rxIpdvUsec_set)
    __swig_setmethods__["rxRawJitterUsec"] = _pjsua2.RtcpStat_rxRawJitterUsec_set
    __swig_getmethods__["rxRawJitterUsec"] = _pjsua2.RtcpStat_rxRawJitterUsec_get
    if _newclass:
        rxRawJitterUsec = _swig_property(_pjsua2.RtcpStat_rxRawJitterUsec_get, _pjsua2.RtcpStat_rxRawJitterUsec_set)
    __swig_setmethods__["peerSdes"] = _pjsua2.RtcpStat_peerSdes_set
    __swig_getmethods__["peerSdes"] = _pjsua2.RtcpStat_peerSdes_get
    if _newclass:
        peerSdes = _swig_property(_pjsua2.RtcpStat_peerSdes_get, _pjsua2.RtcpStat_peerSdes_set)

    def __init__(self):
        this = _pjsua2.new_RtcpStat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_RtcpStat
    __del__ = lambda self: None
RtcpStat_swigregister = _pjsua2.RtcpStat_swigregister
RtcpStat_swigregister(RtcpStat)

class JbufState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JbufState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JbufState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["frameSize"] = _pjsua2.JbufState_frameSize_set
    __swig_getmethods__["frameSize"] = _pjsua2.JbufState_frameSize_get
    if _newclass:
        frameSize = _swig_property(_pjsua2.JbufState_frameSize_get, _pjsua2.JbufState_frameSize_set)
    __swig_setmethods__["minPrefetch"] = _pjsua2.JbufState_minPrefetch_set
    __swig_getmethods__["minPrefetch"] = _pjsua2.JbufState_minPrefetch_get
    if _newclass:
        minPrefetch = _swig_property(_pjsua2.JbufState_minPrefetch_get, _pjsua2.JbufState_minPrefetch_set)
    __swig_setmethods__["maxPrefetch"] = _pjsua2.JbufState_maxPrefetch_set
    __swig_getmethods__["maxPrefetch"] = _pjsua2.JbufState_maxPrefetch_get
    if _newclass:
        maxPrefetch = _swig_property(_pjsua2.JbufState_maxPrefetch_get, _pjsua2.JbufState_maxPrefetch_set)
    __swig_setmethods__["burst"] = _pjsua2.JbufState_burst_set
    __swig_getmethods__["burst"] = _pjsua2.JbufState_burst_get
    if _newclass:
        burst = _swig_property(_pjsua2.JbufState_burst_get, _pjsua2.JbufState_burst_set)
    __swig_setmethods__["prefetch"] = _pjsua2.JbufState_prefetch_set
    __swig_getmethods__["prefetch"] = _pjsua2.JbufState_prefetch_get
    if _newclass:
        prefetch = _swig_property(_pjsua2.JbufState_prefetch_get, _pjsua2.JbufState_prefetch_set)
    __swig_setmethods__["size"] = _pjsua2.JbufState_size_set
    __swig_getmethods__["size"] = _pjsua2.JbufState_size_get
    if _newclass:
        size = _swig_property(_pjsua2.JbufState_size_get, _pjsua2.JbufState_size_set)
    __swig_setmethods__["avgDelayMsec"] = _pjsua2.JbufState_avgDelayMsec_set
    __swig_getmethods__["avgDelayMsec"] = _pjsua2.JbufState_avgDelayMsec_get
    if _newclass:
        avgDelayMsec = _swig_property(_pjsua2.JbufState_avgDelayMsec_get, _pjsua2.JbufState_avgDelayMsec_set)
    __swig_setmethods__["minDelayMsec"] = _pjsua2.JbufState_minDelayMsec_set
    __swig_getmethods__["minDelayMsec"] = _pjsua2.JbufState_minDelayMsec_get
    if _newclass:
        minDelayMsec = _swig_property(_pjsua2.JbufState_minDelayMsec_get, _pjsua2.JbufState_minDelayMsec_set)
    __swig_setmethods__["maxDelayMsec"] = _pjsua2.JbufState_maxDelayMsec_set
    __swig_getmethods__["maxDelayMsec"] = _pjsua2.JbufState_maxDelayMsec_get
    if _newclass:
        maxDelayMsec = _swig_property(_pjsua2.JbufState_maxDelayMsec_get, _pjsua2.JbufState_maxDelayMsec_set)
    __swig_setmethods__["devDelayMsec"] = _pjsua2.JbufState_devDelayMsec_set
    __swig_getmethods__["devDelayMsec"] = _pjsua2.JbufState_devDelayMsec_get
    if _newclass:
        devDelayMsec = _swig_property(_pjsua2.JbufState_devDelayMsec_get, _pjsua2.JbufState_devDelayMsec_set)
    __swig_setmethods__["avgBurst"] = _pjsua2.JbufState_avgBurst_set
    __swig_getmethods__["avgBurst"] = _pjsua2.JbufState_avgBurst_get
    if _newclass:
        avgBurst = _swig_property(_pjsua2.JbufState_avgBurst_get, _pjsua2.JbufState_avgBurst_set)
    __swig_setmethods__["lost"] = _pjsua2.JbufState_lost_set
    __swig_getmethods__["lost"] = _pjsua2.JbufState_lost_get
    if _newclass:
        lost = _swig_property(_pjsua2.JbufState_lost_get, _pjsua2.JbufState_lost_set)
    __swig_setmethods__["discard"] = _pjsua2.JbufState_discard_set
    __swig_getmethods__["discard"] = _pjsua2.JbufState_discard_get
    if _newclass:
        discard = _swig_property(_pjsua2.JbufState_discard_get, _pjsua2.JbufState_discard_set)
    __swig_setmethods__["empty"] = _pjsua2.JbufState_empty_set
    __swig_getmethods__["empty"] = _pjsua2.JbufState_empty_get
    if _newclass:
        empty = _swig_property(_pjsua2.JbufState_empty_get, _pjsua2.JbufState_empty_set)

    def __init__(self):
        this = _pjsua2.new_JbufState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_JbufState
    __del__ = lambda self: None
JbufState_swigregister = _pjsua2.JbufState_swigregister
JbufState_swigregister(JbufState)

class SdpSession(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SdpSession, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SdpSession, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wholeSdp"] = _pjsua2.SdpSession_wholeSdp_set
    __swig_getmethods__["wholeSdp"] = _pjsua2.SdpSession_wholeSdp_get
    if _newclass:
        wholeSdp = _swig_property(_pjsua2.SdpSession_wholeSdp_get, _pjsua2.SdpSession_wholeSdp_set)
    __swig_setmethods__["pjSdpSession"] = _pjsua2.SdpSession_pjSdpSession_set
    __swig_getmethods__["pjSdpSession"] = _pjsua2.SdpSession_pjSdpSession_get
    if _newclass:
        pjSdpSession = _swig_property(_pjsua2.SdpSession_pjSdpSession_get, _pjsua2.SdpSession_pjSdpSession_set)

    def __init__(self):
        this = _pjsua2.new_SdpSession()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_SdpSession
    __del__ = lambda self: None
SdpSession_swigregister = _pjsua2.SdpSession_swigregister
SdpSession_swigregister(SdpSession)

class MediaTransportInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaTransportInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MediaTransportInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["localRtpName"] = _pjsua2.MediaTransportInfo_localRtpName_set
    __swig_getmethods__["localRtpName"] = _pjsua2.MediaTransportInfo_localRtpName_get
    if _newclass:
        localRtpName = _swig_property(_pjsua2.MediaTransportInfo_localRtpName_get, _pjsua2.MediaTransportInfo_localRtpName_set)
    __swig_setmethods__["localRtcpName"] = _pjsua2.MediaTransportInfo_localRtcpName_set
    __swig_getmethods__["localRtcpName"] = _pjsua2.MediaTransportInfo_localRtcpName_get
    if _newclass:
        localRtcpName = _swig_property(_pjsua2.MediaTransportInfo_localRtcpName_get, _pjsua2.MediaTransportInfo_localRtcpName_set)
    __swig_setmethods__["srcRtpName"] = _pjsua2.MediaTransportInfo_srcRtpName_set
    __swig_getmethods__["srcRtpName"] = _pjsua2.MediaTransportInfo_srcRtpName_get
    if _newclass:
        srcRtpName = _swig_property(_pjsua2.MediaTransportInfo_srcRtpName_get, _pjsua2.MediaTransportInfo_srcRtpName_set)
    __swig_setmethods__["srcRtcpName"] = _pjsua2.MediaTransportInfo_srcRtcpName_set
    __swig_getmethods__["srcRtcpName"] = _pjsua2.MediaTransportInfo_srcRtcpName_get
    if _newclass:
        srcRtcpName = _swig_property(_pjsua2.MediaTransportInfo_srcRtcpName_get, _pjsua2.MediaTransportInfo_srcRtcpName_set)

    def __init__(self):
        this = _pjsua2.new_MediaTransportInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_MediaTransportInfo
    __del__ = lambda self: None
MediaTransportInfo_swigregister = _pjsua2.MediaTransportInfo_swigregister
MediaTransportInfo_swigregister(MediaTransportInfo)

class CallSetting(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallSetting, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallSetting, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flag"] = _pjsua2.CallSetting_flag_set
    __swig_getmethods__["flag"] = _pjsua2.CallSetting_flag_get
    if _newclass:
        flag = _swig_property(_pjsua2.CallSetting_flag_get, _pjsua2.CallSetting_flag_set)
    __swig_setmethods__["reqKeyframeMethod"] = _pjsua2.CallSetting_reqKeyframeMethod_set
    __swig_getmethods__["reqKeyframeMethod"] = _pjsua2.CallSetting_reqKeyframeMethod_get
    if _newclass:
        reqKeyframeMethod = _swig_property(_pjsua2.CallSetting_reqKeyframeMethod_get, _pjsua2.CallSetting_reqKeyframeMethod_set)
    __swig_setmethods__["audioCount"] = _pjsua2.CallSetting_audioCount_set
    __swig_getmethods__["audioCount"] = _pjsua2.CallSetting_audioCount_get
    if _newclass:
        audioCount = _swig_property(_pjsua2.CallSetting_audioCount_get, _pjsua2.CallSetting_audioCount_set)
    __swig_setmethods__["videoCount"] = _pjsua2.CallSetting_videoCount_set
    __swig_getmethods__["videoCount"] = _pjsua2.CallSetting_videoCount_get
    if _newclass:
        videoCount = _swig_property(_pjsua2.CallSetting_videoCount_get, _pjsua2.CallSetting_videoCount_set)

    def __init__(self, useDefaultValues=False):
        this = _pjsua2.new_CallSetting(useDefaultValues)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isEmpty(self):
        return _pjsua2.CallSetting_isEmpty(self)
    __swig_destroy__ = _pjsua2.delete_CallSetting
    __del__ = lambda self: None
CallSetting_swigregister = _pjsua2.CallSetting_swigregister
CallSetting_swigregister(CallSetting)

class CallMediaInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallMediaInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallMediaInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["index"] = _pjsua2.CallMediaInfo_index_set
    __swig_getmethods__["index"] = _pjsua2.CallMediaInfo_index_get
    if _newclass:
        index = _swig_property(_pjsua2.CallMediaInfo_index_get, _pjsua2.CallMediaInfo_index_set)
    __swig_setmethods__["type"] = _pjsua2.CallMediaInfo_type_set
    __swig_getmethods__["type"] = _pjsua2.CallMediaInfo_type_get
    if _newclass:
        type = _swig_property(_pjsua2.CallMediaInfo_type_get, _pjsua2.CallMediaInfo_type_set)
    __swig_setmethods__["dir"] = _pjsua2.CallMediaInfo_dir_set
    __swig_getmethods__["dir"] = _pjsua2.CallMediaInfo_dir_get
    if _newclass:
        dir = _swig_property(_pjsua2.CallMediaInfo_dir_get, _pjsua2.CallMediaInfo_dir_set)
    __swig_setmethods__["status"] = _pjsua2.CallMediaInfo_status_set
    __swig_getmethods__["status"] = _pjsua2.CallMediaInfo_status_get
    if _newclass:
        status = _swig_property(_pjsua2.CallMediaInfo_status_get, _pjsua2.CallMediaInfo_status_set)
    __swig_setmethods__["audioConfSlot"] = _pjsua2.CallMediaInfo_audioConfSlot_set
    __swig_getmethods__["audioConfSlot"] = _pjsua2.CallMediaInfo_audioConfSlot_get
    if _newclass:
        audioConfSlot = _swig_property(_pjsua2.CallMediaInfo_audioConfSlot_get, _pjsua2.CallMediaInfo_audioConfSlot_set)
    __swig_setmethods__["videoIncomingWindowId"] = _pjsua2.CallMediaInfo_videoIncomingWindowId_set
    __swig_getmethods__["videoIncomingWindowId"] = _pjsua2.CallMediaInfo_videoIncomingWindowId_get
    if _newclass:
        videoIncomingWindowId = _swig_property(_pjsua2.CallMediaInfo_videoIncomingWindowId_get, _pjsua2.CallMediaInfo_videoIncomingWindowId_set)
    __swig_setmethods__["videoWindow"] = _pjsua2.CallMediaInfo_videoWindow_set
    __swig_getmethods__["videoWindow"] = _pjsua2.CallMediaInfo_videoWindow_get
    if _newclass:
        videoWindow = _swig_property(_pjsua2.CallMediaInfo_videoWindow_get, _pjsua2.CallMediaInfo_videoWindow_set)
    __swig_setmethods__["videoCapDev"] = _pjsua2.CallMediaInfo_videoCapDev_set
    __swig_getmethods__["videoCapDev"] = _pjsua2.CallMediaInfo_videoCapDev_get
    if _newclass:
        videoCapDev = _swig_property(_pjsua2.CallMediaInfo_videoCapDev_get, _pjsua2.CallMediaInfo_videoCapDev_set)

    def __init__(self):
        this = _pjsua2.new_CallMediaInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_CallMediaInfo
    __del__ = lambda self: None
CallMediaInfo_swigregister = _pjsua2.CallMediaInfo_swigregister
CallMediaInfo_swigregister(CallMediaInfo)

class CallInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _pjsua2.CallInfo_id_set
    __swig_getmethods__["id"] = _pjsua2.CallInfo_id_get
    if _newclass:
        id = _swig_property(_pjsua2.CallInfo_id_get, _pjsua2.CallInfo_id_set)
    __swig_setmethods__["role"] = _pjsua2.CallInfo_role_set
    __swig_getmethods__["role"] = _pjsua2.CallInfo_role_get
    if _newclass:
        role = _swig_property(_pjsua2.CallInfo_role_get, _pjsua2.CallInfo_role_set)
    __swig_setmethods__["accId"] = _pjsua2.CallInfo_accId_set
    __swig_getmethods__["accId"] = _pjsua2.CallInfo_accId_get
    if _newclass:
        accId = _swig_property(_pjsua2.CallInfo_accId_get, _pjsua2.CallInfo_accId_set)
    __swig_setmethods__["localUri"] = _pjsua2.CallInfo_localUri_set
    __swig_getmethods__["localUri"] = _pjsua2.CallInfo_localUri_get
    if _newclass:
        localUri = _swig_property(_pjsua2.CallInfo_localUri_get, _pjsua2.CallInfo_localUri_set)
    __swig_setmethods__["localContact"] = _pjsua2.CallInfo_localContact_set
    __swig_getmethods__["localContact"] = _pjsua2.CallInfo_localContact_get
    if _newclass:
        localContact = _swig_property(_pjsua2.CallInfo_localContact_get, _pjsua2.CallInfo_localContact_set)
    __swig_setmethods__["remoteUri"] = _pjsua2.CallInfo_remoteUri_set
    __swig_getmethods__["remoteUri"] = _pjsua2.CallInfo_remoteUri_get
    if _newclass:
        remoteUri = _swig_property(_pjsua2.CallInfo_remoteUri_get, _pjsua2.CallInfo_remoteUri_set)
    __swig_setmethods__["remoteContact"] = _pjsua2.CallInfo_remoteContact_set
    __swig_getmethods__["remoteContact"] = _pjsua2.CallInfo_remoteContact_get
    if _newclass:
        remoteContact = _swig_property(_pjsua2.CallInfo_remoteContact_get, _pjsua2.CallInfo_remoteContact_set)
    __swig_setmethods__["callIdString"] = _pjsua2.CallInfo_callIdString_set
    __swig_getmethods__["callIdString"] = _pjsua2.CallInfo_callIdString_get
    if _newclass:
        callIdString = _swig_property(_pjsua2.CallInfo_callIdString_get, _pjsua2.CallInfo_callIdString_set)
    __swig_setmethods__["setting"] = _pjsua2.CallInfo_setting_set
    __swig_getmethods__["setting"] = _pjsua2.CallInfo_setting_get
    if _newclass:
        setting = _swig_property(_pjsua2.CallInfo_setting_get, _pjsua2.CallInfo_setting_set)
    __swig_setmethods__["state"] = _pjsua2.CallInfo_state_set
    __swig_getmethods__["state"] = _pjsua2.CallInfo_state_get
    if _newclass:
        state = _swig_property(_pjsua2.CallInfo_state_get, _pjsua2.CallInfo_state_set)
    __swig_setmethods__["stateText"] = _pjsua2.CallInfo_stateText_set
    __swig_getmethods__["stateText"] = _pjsua2.CallInfo_stateText_get
    if _newclass:
        stateText = _swig_property(_pjsua2.CallInfo_stateText_get, _pjsua2.CallInfo_stateText_set)
    __swig_setmethods__["lastStatusCode"] = _pjsua2.CallInfo_lastStatusCode_set
    __swig_getmethods__["lastStatusCode"] = _pjsua2.CallInfo_lastStatusCode_get
    if _newclass:
        lastStatusCode = _swig_property(_pjsua2.CallInfo_lastStatusCode_get, _pjsua2.CallInfo_lastStatusCode_set)
    __swig_setmethods__["lastReason"] = _pjsua2.CallInfo_lastReason_set
    __swig_getmethods__["lastReason"] = _pjsua2.CallInfo_lastReason_get
    if _newclass:
        lastReason = _swig_property(_pjsua2.CallInfo_lastReason_get, _pjsua2.CallInfo_lastReason_set)
    __swig_setmethods__["media"] = _pjsua2.CallInfo_media_set
    __swig_getmethods__["media"] = _pjsua2.CallInfo_media_get
    if _newclass:
        media = _swig_property(_pjsua2.CallInfo_media_get, _pjsua2.CallInfo_media_set)
    __swig_setmethods__["provMedia"] = _pjsua2.CallInfo_provMedia_set
    __swig_getmethods__["provMedia"] = _pjsua2.CallInfo_provMedia_get
    if _newclass:
        provMedia = _swig_property(_pjsua2.CallInfo_provMedia_get, _pjsua2.CallInfo_provMedia_set)
    __swig_setmethods__["connectDuration"] = _pjsua2.CallInfo_connectDuration_set
    __swig_getmethods__["connectDuration"] = _pjsua2.CallInfo_connectDuration_get
    if _newclass:
        connectDuration = _swig_property(_pjsua2.CallInfo_connectDuration_get, _pjsua2.CallInfo_connectDuration_set)
    __swig_setmethods__["totalDuration"] = _pjsua2.CallInfo_totalDuration_set
    __swig_getmethods__["totalDuration"] = _pjsua2.CallInfo_totalDuration_get
    if _newclass:
        totalDuration = _swig_property(_pjsua2.CallInfo_totalDuration_get, _pjsua2.CallInfo_totalDuration_set)
    __swig_setmethods__["remOfferer"] = _pjsua2.CallInfo_remOfferer_set
    __swig_getmethods__["remOfferer"] = _pjsua2.CallInfo_remOfferer_get
    if _newclass:
        remOfferer = _swig_property(_pjsua2.CallInfo_remOfferer_get, _pjsua2.CallInfo_remOfferer_set)
    __swig_setmethods__["remAudioCount"] = _pjsua2.CallInfo_remAudioCount_set
    __swig_getmethods__["remAudioCount"] = _pjsua2.CallInfo_remAudioCount_get
    if _newclass:
        remAudioCount = _swig_property(_pjsua2.CallInfo_remAudioCount_get, _pjsua2.CallInfo_remAudioCount_set)
    __swig_setmethods__["remVideoCount"] = _pjsua2.CallInfo_remVideoCount_set
    __swig_getmethods__["remVideoCount"] = _pjsua2.CallInfo_remVideoCount_get
    if _newclass:
        remVideoCount = _swig_property(_pjsua2.CallInfo_remVideoCount_get, _pjsua2.CallInfo_remVideoCount_set)

    def __init__(self):
        this = _pjsua2.new_CallInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_CallInfo
    __del__ = lambda self: None
CallInfo_swigregister = _pjsua2.CallInfo_swigregister
CallInfo_swigregister(CallInfo)

class StreamInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pjsua2.StreamInfo_type_set
    __swig_getmethods__["type"] = _pjsua2.StreamInfo_type_get
    if _newclass:
        type = _swig_property(_pjsua2.StreamInfo_type_get, _pjsua2.StreamInfo_type_set)
    __swig_setmethods__["proto"] = _pjsua2.StreamInfo_proto_set
    __swig_getmethods__["proto"] = _pjsua2.StreamInfo_proto_get
    if _newclass:
        proto = _swig_property(_pjsua2.StreamInfo_proto_get, _pjsua2.StreamInfo_proto_set)
    __swig_setmethods__["dir"] = _pjsua2.StreamInfo_dir_set
    __swig_getmethods__["dir"] = _pjsua2.StreamInfo_dir_get
    if _newclass:
        dir = _swig_property(_pjsua2.StreamInfo_dir_get, _pjsua2.StreamInfo_dir_set)
    __swig_setmethods__["remoteRtpAddress"] = _pjsua2.StreamInfo_remoteRtpAddress_set
    __swig_getmethods__["remoteRtpAddress"] = _pjsua2.StreamInfo_remoteRtpAddress_get
    if _newclass:
        remoteRtpAddress = _swig_property(_pjsua2.StreamInfo_remoteRtpAddress_get, _pjsua2.StreamInfo_remoteRtpAddress_set)
    __swig_setmethods__["remoteRtcpAddress"] = _pjsua2.StreamInfo_remoteRtcpAddress_set
    __swig_getmethods__["remoteRtcpAddress"] = _pjsua2.StreamInfo_remoteRtcpAddress_get
    if _newclass:
        remoteRtcpAddress = _swig_property(_pjsua2.StreamInfo_remoteRtcpAddress_get, _pjsua2.StreamInfo_remoteRtcpAddress_set)
    __swig_setmethods__["txPt"] = _pjsua2.StreamInfo_txPt_set
    __swig_getmethods__["txPt"] = _pjsua2.StreamInfo_txPt_get
    if _newclass:
        txPt = _swig_property(_pjsua2.StreamInfo_txPt_get, _pjsua2.StreamInfo_txPt_set)
    __swig_setmethods__["rxPt"] = _pjsua2.StreamInfo_rxPt_set
    __swig_getmethods__["rxPt"] = _pjsua2.StreamInfo_rxPt_get
    if _newclass:
        rxPt = _swig_property(_pjsua2.StreamInfo_rxPt_get, _pjsua2.StreamInfo_rxPt_set)
    __swig_setmethods__["codecName"] = _pjsua2.StreamInfo_codecName_set
    __swig_getmethods__["codecName"] = _pjsua2.StreamInfo_codecName_get
    if _newclass:
        codecName = _swig_property(_pjsua2.StreamInfo_codecName_get, _pjsua2.StreamInfo_codecName_set)
    __swig_setmethods__["codecClockRate"] = _pjsua2.StreamInfo_codecClockRate_set
    __swig_getmethods__["codecClockRate"] = _pjsua2.StreamInfo_codecClockRate_get
    if _newclass:
        codecClockRate = _swig_property(_pjsua2.StreamInfo_codecClockRate_get, _pjsua2.StreamInfo_codecClockRate_set)
    __swig_setmethods__["audCodecParam"] = _pjsua2.StreamInfo_audCodecParam_set
    __swig_getmethods__["audCodecParam"] = _pjsua2.StreamInfo_audCodecParam_get
    if _newclass:
        audCodecParam = _swig_property(_pjsua2.StreamInfo_audCodecParam_get, _pjsua2.StreamInfo_audCodecParam_set)
    __swig_setmethods__["vidCodecParam"] = _pjsua2.StreamInfo_vidCodecParam_set
    __swig_getmethods__["vidCodecParam"] = _pjsua2.StreamInfo_vidCodecParam_get
    if _newclass:
        vidCodecParam = _swig_property(_pjsua2.StreamInfo_vidCodecParam_get, _pjsua2.StreamInfo_vidCodecParam_set)

    def __init__(self):
        this = _pjsua2.new_StreamInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_StreamInfo
    __del__ = lambda self: None
StreamInfo_swigregister = _pjsua2.StreamInfo_swigregister
StreamInfo_swigregister(StreamInfo)

class StreamStat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamStat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamStat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rtcp"] = _pjsua2.StreamStat_rtcp_set
    __swig_getmethods__["rtcp"] = _pjsua2.StreamStat_rtcp_get
    if _newclass:
        rtcp = _swig_property(_pjsua2.StreamStat_rtcp_get, _pjsua2.StreamStat_rtcp_set)
    __swig_setmethods__["jbuf"] = _pjsua2.StreamStat_jbuf_set
    __swig_getmethods__["jbuf"] = _pjsua2.StreamStat_jbuf_get
    if _newclass:
        jbuf = _swig_property(_pjsua2.StreamStat_jbuf_get, _pjsua2.StreamStat_jbuf_set)

    def __init__(self):
        this = _pjsua2.new_StreamStat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_StreamStat
    __del__ = lambda self: None
StreamStat_swigregister = _pjsua2.StreamStat_swigregister
StreamStat_swigregister(StreamStat)

class OnCallStateParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCallStateParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCallStateParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["e"] = _pjsua2.OnCallStateParam_e_set
    __swig_getmethods__["e"] = _pjsua2.OnCallStateParam_e_get
    if _newclass:
        e = _swig_property(_pjsua2.OnCallStateParam_e_get, _pjsua2.OnCallStateParam_e_set)

    def __init__(self):
        this = _pjsua2.new_OnCallStateParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCallStateParam
    __del__ = lambda self: None
OnCallStateParam_swigregister = _pjsua2.OnCallStateParam_swigregister
OnCallStateParam_swigregister(OnCallStateParam)

class OnCallTsxStateParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCallTsxStateParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCallTsxStateParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["e"] = _pjsua2.OnCallTsxStateParam_e_set
    __swig_getmethods__["e"] = _pjsua2.OnCallTsxStateParam_e_get
    if _newclass:
        e = _swig_property(_pjsua2.OnCallTsxStateParam_e_get, _pjsua2.OnCallTsxStateParam_e_set)

    def __init__(self):
        this = _pjsua2.new_OnCallTsxStateParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCallTsxStateParam
    __del__ = lambda self: None
OnCallTsxStateParam_swigregister = _pjsua2.OnCallTsxStateParam_swigregister
OnCallTsxStateParam_swigregister(OnCallTsxStateParam)

class OnCallMediaStateParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCallMediaStateParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCallMediaStateParam, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pjsua2.new_OnCallMediaStateParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCallMediaStateParam
    __del__ = lambda self: None
OnCallMediaStateParam_swigregister = _pjsua2.OnCallMediaStateParam_swigregister
OnCallMediaStateParam_swigregister(OnCallMediaStateParam)

class OnCallSdpCreatedParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCallSdpCreatedParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCallSdpCreatedParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sdp"] = _pjsua2.OnCallSdpCreatedParam_sdp_set
    __swig_getmethods__["sdp"] = _pjsua2.OnCallSdpCreatedParam_sdp_get
    if _newclass:
        sdp = _swig_property(_pjsua2.OnCallSdpCreatedParam_sdp_get, _pjsua2.OnCallSdpCreatedParam_sdp_set)
    __swig_setmethods__["remSdp"] = _pjsua2.OnCallSdpCreatedParam_remSdp_set
    __swig_getmethods__["remSdp"] = _pjsua2.OnCallSdpCreatedParam_remSdp_get
    if _newclass:
        remSdp = _swig_property(_pjsua2.OnCallSdpCreatedParam_remSdp_get, _pjsua2.OnCallSdpCreatedParam_remSdp_set)

    def __init__(self):
        this = _pjsua2.new_OnCallSdpCreatedParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCallSdpCreatedParam
    __del__ = lambda self: None
OnCallSdpCreatedParam_swigregister = _pjsua2.OnCallSdpCreatedParam_swigregister
OnCallSdpCreatedParam_swigregister(OnCallSdpCreatedParam)

class OnStreamCreatedParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnStreamCreatedParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnStreamCreatedParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stream"] = _pjsua2.OnStreamCreatedParam_stream_set
    __swig_getmethods__["stream"] = _pjsua2.OnStreamCreatedParam_stream_get
    if _newclass:
        stream = _swig_property(_pjsua2.OnStreamCreatedParam_stream_get, _pjsua2.OnStreamCreatedParam_stream_set)
    __swig_setmethods__["streamIdx"] = _pjsua2.OnStreamCreatedParam_streamIdx_set
    __swig_getmethods__["streamIdx"] = _pjsua2.OnStreamCreatedParam_streamIdx_get
    if _newclass:
        streamIdx = _swig_property(_pjsua2.OnStreamCreatedParam_streamIdx_get, _pjsua2.OnStreamCreatedParam_streamIdx_set)
    __swig_setmethods__["destroyPort"] = _pjsua2.OnStreamCreatedParam_destroyPort_set
    __swig_getmethods__["destroyPort"] = _pjsua2.OnStreamCreatedParam_destroyPort_get
    if _newclass:
        destroyPort = _swig_property(_pjsua2.OnStreamCreatedParam_destroyPort_get, _pjsua2.OnStreamCreatedParam_destroyPort_set)
    __swig_setmethods__["pPort"] = _pjsua2.OnStreamCreatedParam_pPort_set
    __swig_getmethods__["pPort"] = _pjsua2.OnStreamCreatedParam_pPort_get
    if _newclass:
        pPort = _swig_property(_pjsua2.OnStreamCreatedParam_pPort_get, _pjsua2.OnStreamCreatedParam_pPort_set)

    def __init__(self):
        this = _pjsua2.new_OnStreamCreatedParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnStreamCreatedParam
    __del__ = lambda self: None
OnStreamCreatedParam_swigregister = _pjsua2.OnStreamCreatedParam_swigregister
OnStreamCreatedParam_swigregister(OnStreamCreatedParam)

class OnStreamDestroyedParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnStreamDestroyedParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnStreamDestroyedParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stream"] = _pjsua2.OnStreamDestroyedParam_stream_set
    __swig_getmethods__["stream"] = _pjsua2.OnStreamDestroyedParam_stream_get
    if _newclass:
        stream = _swig_property(_pjsua2.OnStreamDestroyedParam_stream_get, _pjsua2.OnStreamDestroyedParam_stream_set)
    __swig_setmethods__["streamIdx"] = _pjsua2.OnStreamDestroyedParam_streamIdx_set
    __swig_getmethods__["streamIdx"] = _pjsua2.OnStreamDestroyedParam_streamIdx_get
    if _newclass:
        streamIdx = _swig_property(_pjsua2.OnStreamDestroyedParam_streamIdx_get, _pjsua2.OnStreamDestroyedParam_streamIdx_set)

    def __init__(self):
        this = _pjsua2.new_OnStreamDestroyedParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnStreamDestroyedParam
    __del__ = lambda self: None
OnStreamDestroyedParam_swigregister = _pjsua2.OnStreamDestroyedParam_swigregister
OnStreamDestroyedParam_swigregister(OnStreamDestroyedParam)

class OnDtmfDigitParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnDtmfDigitParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnDtmfDigitParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["method"] = _pjsua2.OnDtmfDigitParam_method_set
    __swig_getmethods__["method"] = _pjsua2.OnDtmfDigitParam_method_get
    if _newclass:
        method = _swig_property(_pjsua2.OnDtmfDigitParam_method_get, _pjsua2.OnDtmfDigitParam_method_set)
    __swig_setmethods__["digit"] = _pjsua2.OnDtmfDigitParam_digit_set
    __swig_getmethods__["digit"] = _pjsua2.OnDtmfDigitParam_digit_get
    if _newclass:
        digit = _swig_property(_pjsua2.OnDtmfDigitParam_digit_get, _pjsua2.OnDtmfDigitParam_digit_set)
    __swig_setmethods__["duration"] = _pjsua2.OnDtmfDigitParam_duration_set
    __swig_getmethods__["duration"] = _pjsua2.OnDtmfDigitParam_duration_get
    if _newclass:
        duration = _swig_property(_pjsua2.OnDtmfDigitParam_duration_get, _pjsua2.OnDtmfDigitParam_duration_set)

    def __init__(self):
        this = _pjsua2.new_OnDtmfDigitParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnDtmfDigitParam
    __del__ = lambda self: None
OnDtmfDigitParam_swigregister = _pjsua2.OnDtmfDigitParam_swigregister
OnDtmfDigitParam_swigregister(OnDtmfDigitParam)

class OnCallTransferRequestParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCallTransferRequestParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCallTransferRequestParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dstUri"] = _pjsua2.OnCallTransferRequestParam_dstUri_set
    __swig_getmethods__["dstUri"] = _pjsua2.OnCallTransferRequestParam_dstUri_get
    if _newclass:
        dstUri = _swig_property(_pjsua2.OnCallTransferRequestParam_dstUri_get, _pjsua2.OnCallTransferRequestParam_dstUri_set)
    __swig_setmethods__["statusCode"] = _pjsua2.OnCallTransferRequestParam_statusCode_set
    __swig_getmethods__["statusCode"] = _pjsua2.OnCallTransferRequestParam_statusCode_get
    if _newclass:
        statusCode = _swig_property(_pjsua2.OnCallTransferRequestParam_statusCode_get, _pjsua2.OnCallTransferRequestParam_statusCode_set)
    __swig_setmethods__["opt"] = _pjsua2.OnCallTransferRequestParam_opt_set
    __swig_getmethods__["opt"] = _pjsua2.OnCallTransferRequestParam_opt_get
    if _newclass:
        opt = _swig_property(_pjsua2.OnCallTransferRequestParam_opt_get, _pjsua2.OnCallTransferRequestParam_opt_set)
    __swig_setmethods__["newCall"] = _pjsua2.OnCallTransferRequestParam_newCall_set
    __swig_getmethods__["newCall"] = _pjsua2.OnCallTransferRequestParam_newCall_get
    if _newclass:
        newCall = _swig_property(_pjsua2.OnCallTransferRequestParam_newCall_get, _pjsua2.OnCallTransferRequestParam_newCall_set)

    def __init__(self):
        this = _pjsua2.new_OnCallTransferRequestParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCallTransferRequestParam
    __del__ = lambda self: None
OnCallTransferRequestParam_swigregister = _pjsua2.OnCallTransferRequestParam_swigregister
OnCallTransferRequestParam_swigregister(OnCallTransferRequestParam)

class OnCallTransferStatusParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCallTransferStatusParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCallTransferStatusParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["statusCode"] = _pjsua2.OnCallTransferStatusParam_statusCode_set
    __swig_getmethods__["statusCode"] = _pjsua2.OnCallTransferStatusParam_statusCode_get
    if _newclass:
        statusCode = _swig_property(_pjsua2.OnCallTransferStatusParam_statusCode_get, _pjsua2.OnCallTransferStatusParam_statusCode_set)
    __swig_setmethods__["reason"] = _pjsua2.OnCallTransferStatusParam_reason_set
    __swig_getmethods__["reason"] = _pjsua2.OnCallTransferStatusParam_reason_get
    if _newclass:
        reason = _swig_property(_pjsua2.OnCallTransferStatusParam_reason_get, _pjsua2.OnCallTransferStatusParam_reason_set)
    __swig_setmethods__["finalNotify"] = _pjsua2.OnCallTransferStatusParam_finalNotify_set
    __swig_getmethods__["finalNotify"] = _pjsua2.OnCallTransferStatusParam_finalNotify_get
    if _newclass:
        finalNotify = _swig_property(_pjsua2.OnCallTransferStatusParam_finalNotify_get, _pjsua2.OnCallTransferStatusParam_finalNotify_set)
    __swig_setmethods__["cont"] = _pjsua2.OnCallTransferStatusParam_cont_set
    __swig_getmethods__["cont"] = _pjsua2.OnCallTransferStatusParam_cont_get
    if _newclass:
        cont = _swig_property(_pjsua2.OnCallTransferStatusParam_cont_get, _pjsua2.OnCallTransferStatusParam_cont_set)

    def __init__(self):
        this = _pjsua2.new_OnCallTransferStatusParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCallTransferStatusParam
    __del__ = lambda self: None
OnCallTransferStatusParam_swigregister = _pjsua2.OnCallTransferStatusParam_swigregister
OnCallTransferStatusParam_swigregister(OnCallTransferStatusParam)

class OnCallReplaceRequestParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCallReplaceRequestParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCallReplaceRequestParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rdata"] = _pjsua2.OnCallReplaceRequestParam_rdata_set
    __swig_getmethods__["rdata"] = _pjsua2.OnCallReplaceRequestParam_rdata_get
    if _newclass:
        rdata = _swig_property(_pjsua2.OnCallReplaceRequestParam_rdata_get, _pjsua2.OnCallReplaceRequestParam_rdata_set)
    __swig_setmethods__["statusCode"] = _pjsua2.OnCallReplaceRequestParam_statusCode_set
    __swig_getmethods__["statusCode"] = _pjsua2.OnCallReplaceRequestParam_statusCode_get
    if _newclass:
        statusCode = _swig_property(_pjsua2.OnCallReplaceRequestParam_statusCode_get, _pjsua2.OnCallReplaceRequestParam_statusCode_set)
    __swig_setmethods__["reason"] = _pjsua2.OnCallReplaceRequestParam_reason_set
    __swig_getmethods__["reason"] = _pjsua2.OnCallReplaceRequestParam_reason_get
    if _newclass:
        reason = _swig_property(_pjsua2.OnCallReplaceRequestParam_reason_get, _pjsua2.OnCallReplaceRequestParam_reason_set)
    __swig_setmethods__["opt"] = _pjsua2.OnCallReplaceRequestParam_opt_set
    __swig_getmethods__["opt"] = _pjsua2.OnCallReplaceRequestParam_opt_get
    if _newclass:
        opt = _swig_property(_pjsua2.OnCallReplaceRequestParam_opt_get, _pjsua2.OnCallReplaceRequestParam_opt_set)

    def __init__(self):
        this = _pjsua2.new_OnCallReplaceRequestParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCallReplaceRequestParam
    __del__ = lambda self: None
OnCallReplaceRequestParam_swigregister = _pjsua2.OnCallReplaceRequestParam_swigregister
OnCallReplaceRequestParam_swigregister(OnCallReplaceRequestParam)

class OnCallReplacedParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCallReplacedParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCallReplacedParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["newCallId"] = _pjsua2.OnCallReplacedParam_newCallId_set
    __swig_getmethods__["newCallId"] = _pjsua2.OnCallReplacedParam_newCallId_get
    if _newclass:
        newCallId = _swig_property(_pjsua2.OnCallReplacedParam_newCallId_get, _pjsua2.OnCallReplacedParam_newCallId_set)
    __swig_setmethods__["newCall"] = _pjsua2.OnCallReplacedParam_newCall_set
    __swig_getmethods__["newCall"] = _pjsua2.OnCallReplacedParam_newCall_get
    if _newclass:
        newCall = _swig_property(_pjsua2.OnCallReplacedParam_newCall_get, _pjsua2.OnCallReplacedParam_newCall_set)

    def __init__(self):
        this = _pjsua2.new_OnCallReplacedParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCallReplacedParam
    __del__ = lambda self: None
OnCallReplacedParam_swigregister = _pjsua2.OnCallReplacedParam_swigregister
OnCallReplacedParam_swigregister(OnCallReplacedParam)

class OnCallRxOfferParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCallRxOfferParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCallRxOfferParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["offer"] = _pjsua2.OnCallRxOfferParam_offer_set
    __swig_getmethods__["offer"] = _pjsua2.OnCallRxOfferParam_offer_get
    if _newclass:
        offer = _swig_property(_pjsua2.OnCallRxOfferParam_offer_get, _pjsua2.OnCallRxOfferParam_offer_set)
    __swig_setmethods__["statusCode"] = _pjsua2.OnCallRxOfferParam_statusCode_set
    __swig_getmethods__["statusCode"] = _pjsua2.OnCallRxOfferParam_statusCode_get
    if _newclass:
        statusCode = _swig_property(_pjsua2.OnCallRxOfferParam_statusCode_get, _pjsua2.OnCallRxOfferParam_statusCode_set)
    __swig_setmethods__["opt"] = _pjsua2.OnCallRxOfferParam_opt_set
    __swig_getmethods__["opt"] = _pjsua2.OnCallRxOfferParam_opt_get
    if _newclass:
        opt = _swig_property(_pjsua2.OnCallRxOfferParam_opt_get, _pjsua2.OnCallRxOfferParam_opt_set)

    def __init__(self):
        this = _pjsua2.new_OnCallRxOfferParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCallRxOfferParam
    __del__ = lambda self: None
OnCallRxOfferParam_swigregister = _pjsua2.OnCallRxOfferParam_swigregister
OnCallRxOfferParam_swigregister(OnCallRxOfferParam)

class OnCallRxReinviteParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCallRxReinviteParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCallRxReinviteParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["offer"] = _pjsua2.OnCallRxReinviteParam_offer_set
    __swig_getmethods__["offer"] = _pjsua2.OnCallRxReinviteParam_offer_get
    if _newclass:
        offer = _swig_property(_pjsua2.OnCallRxReinviteParam_offer_get, _pjsua2.OnCallRxReinviteParam_offer_set)
    __swig_setmethods__["rdata"] = _pjsua2.OnCallRxReinviteParam_rdata_set
    __swig_getmethods__["rdata"] = _pjsua2.OnCallRxReinviteParam_rdata_get
    if _newclass:
        rdata = _swig_property(_pjsua2.OnCallRxReinviteParam_rdata_get, _pjsua2.OnCallRxReinviteParam_rdata_set)
    __swig_setmethods__["isAsync"] = _pjsua2.OnCallRxReinviteParam_isAsync_set
    __swig_getmethods__["isAsync"] = _pjsua2.OnCallRxReinviteParam_isAsync_get
    if _newclass:
        isAsync = _swig_property(_pjsua2.OnCallRxReinviteParam_isAsync_get, _pjsua2.OnCallRxReinviteParam_isAsync_set)
    __swig_setmethods__["statusCode"] = _pjsua2.OnCallRxReinviteParam_statusCode_set
    __swig_getmethods__["statusCode"] = _pjsua2.OnCallRxReinviteParam_statusCode_get
    if _newclass:
        statusCode = _swig_property(_pjsua2.OnCallRxReinviteParam_statusCode_get, _pjsua2.OnCallRxReinviteParam_statusCode_set)
    __swig_setmethods__["opt"] = _pjsua2.OnCallRxReinviteParam_opt_set
    __swig_getmethods__["opt"] = _pjsua2.OnCallRxReinviteParam_opt_get
    if _newclass:
        opt = _swig_property(_pjsua2.OnCallRxReinviteParam_opt_get, _pjsua2.OnCallRxReinviteParam_opt_set)

    def __init__(self):
        this = _pjsua2.new_OnCallRxReinviteParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCallRxReinviteParam
    __del__ = lambda self: None
OnCallRxReinviteParam_swigregister = _pjsua2.OnCallRxReinviteParam_swigregister
OnCallRxReinviteParam_swigregister(OnCallRxReinviteParam)

class OnCallTxOfferParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCallTxOfferParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCallTxOfferParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opt"] = _pjsua2.OnCallTxOfferParam_opt_set
    __swig_getmethods__["opt"] = _pjsua2.OnCallTxOfferParam_opt_get
    if _newclass:
        opt = _swig_property(_pjsua2.OnCallTxOfferParam_opt_get, _pjsua2.OnCallTxOfferParam_opt_set)

    def __init__(self):
        this = _pjsua2.new_OnCallTxOfferParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCallTxOfferParam
    __del__ = lambda self: None
OnCallTxOfferParam_swigregister = _pjsua2.OnCallTxOfferParam_swigregister
OnCallTxOfferParam_swigregister(OnCallTxOfferParam)

class OnCallRedirectedParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCallRedirectedParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCallRedirectedParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["targetUri"] = _pjsua2.OnCallRedirectedParam_targetUri_set
    __swig_getmethods__["targetUri"] = _pjsua2.OnCallRedirectedParam_targetUri_get
    if _newclass:
        targetUri = _swig_property(_pjsua2.OnCallRedirectedParam_targetUri_get, _pjsua2.OnCallRedirectedParam_targetUri_set)
    __swig_setmethods__["e"] = _pjsua2.OnCallRedirectedParam_e_set
    __swig_getmethods__["e"] = _pjsua2.OnCallRedirectedParam_e_get
    if _newclass:
        e = _swig_property(_pjsua2.OnCallRedirectedParam_e_get, _pjsua2.OnCallRedirectedParam_e_set)

    def __init__(self):
        this = _pjsua2.new_OnCallRedirectedParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCallRedirectedParam
    __del__ = lambda self: None
OnCallRedirectedParam_swigregister = _pjsua2.OnCallRedirectedParam_swigregister
OnCallRedirectedParam_swigregister(OnCallRedirectedParam)

class OnCallMediaEventParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCallMediaEventParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCallMediaEventParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["medIdx"] = _pjsua2.OnCallMediaEventParam_medIdx_set
    __swig_getmethods__["medIdx"] = _pjsua2.OnCallMediaEventParam_medIdx_get
    if _newclass:
        medIdx = _swig_property(_pjsua2.OnCallMediaEventParam_medIdx_get, _pjsua2.OnCallMediaEventParam_medIdx_set)
    __swig_setmethods__["ev"] = _pjsua2.OnCallMediaEventParam_ev_set
    __swig_getmethods__["ev"] = _pjsua2.OnCallMediaEventParam_ev_get
    if _newclass:
        ev = _swig_property(_pjsua2.OnCallMediaEventParam_ev_get, _pjsua2.OnCallMediaEventParam_ev_set)

    def __init__(self):
        this = _pjsua2.new_OnCallMediaEventParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCallMediaEventParam
    __del__ = lambda self: None
OnCallMediaEventParam_swigregister = _pjsua2.OnCallMediaEventParam_swigregister
OnCallMediaEventParam_swigregister(OnCallMediaEventParam)

class OnCallMediaTransportStateParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCallMediaTransportStateParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCallMediaTransportStateParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["medIdx"] = _pjsua2.OnCallMediaTransportStateParam_medIdx_set
    __swig_getmethods__["medIdx"] = _pjsua2.OnCallMediaTransportStateParam_medIdx_get
    if _newclass:
        medIdx = _swig_property(_pjsua2.OnCallMediaTransportStateParam_medIdx_get, _pjsua2.OnCallMediaTransportStateParam_medIdx_set)
    __swig_setmethods__["state"] = _pjsua2.OnCallMediaTransportStateParam_state_set
    __swig_getmethods__["state"] = _pjsua2.OnCallMediaTransportStateParam_state_get
    if _newclass:
        state = _swig_property(_pjsua2.OnCallMediaTransportStateParam_state_get, _pjsua2.OnCallMediaTransportStateParam_state_set)
    __swig_setmethods__["status"] = _pjsua2.OnCallMediaTransportStateParam_status_set
    __swig_getmethods__["status"] = _pjsua2.OnCallMediaTransportStateParam_status_get
    if _newclass:
        status = _swig_property(_pjsua2.OnCallMediaTransportStateParam_status_get, _pjsua2.OnCallMediaTransportStateParam_status_set)
    __swig_setmethods__["sipErrorCode"] = _pjsua2.OnCallMediaTransportStateParam_sipErrorCode_set
    __swig_getmethods__["sipErrorCode"] = _pjsua2.OnCallMediaTransportStateParam_sipErrorCode_get
    if _newclass:
        sipErrorCode = _swig_property(_pjsua2.OnCallMediaTransportStateParam_sipErrorCode_get, _pjsua2.OnCallMediaTransportStateParam_sipErrorCode_set)

    def __init__(self):
        this = _pjsua2.new_OnCallMediaTransportStateParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCallMediaTransportStateParam
    __del__ = lambda self: None
OnCallMediaTransportStateParam_swigregister = _pjsua2.OnCallMediaTransportStateParam_swigregister
OnCallMediaTransportStateParam_swigregister(OnCallMediaTransportStateParam)

class OnCreateMediaTransportParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCreateMediaTransportParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCreateMediaTransportParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mediaIdx"] = _pjsua2.OnCreateMediaTransportParam_mediaIdx_set
    __swig_getmethods__["mediaIdx"] = _pjsua2.OnCreateMediaTransportParam_mediaIdx_get
    if _newclass:
        mediaIdx = _swig_property(_pjsua2.OnCreateMediaTransportParam_mediaIdx_get, _pjsua2.OnCreateMediaTransportParam_mediaIdx_set)
    __swig_setmethods__["mediaTp"] = _pjsua2.OnCreateMediaTransportParam_mediaTp_set
    __swig_getmethods__["mediaTp"] = _pjsua2.OnCreateMediaTransportParam_mediaTp_get
    if _newclass:
        mediaTp = _swig_property(_pjsua2.OnCreateMediaTransportParam_mediaTp_get, _pjsua2.OnCreateMediaTransportParam_mediaTp_set)
    __swig_setmethods__["flags"] = _pjsua2.OnCreateMediaTransportParam_flags_set
    __swig_getmethods__["flags"] = _pjsua2.OnCreateMediaTransportParam_flags_get
    if _newclass:
        flags = _swig_property(_pjsua2.OnCreateMediaTransportParam_flags_get, _pjsua2.OnCreateMediaTransportParam_flags_set)

    def __init__(self):
        this = _pjsua2.new_OnCreateMediaTransportParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCreateMediaTransportParam
    __del__ = lambda self: None
OnCreateMediaTransportParam_swigregister = _pjsua2.OnCreateMediaTransportParam_swigregister
OnCreateMediaTransportParam_swigregister(OnCreateMediaTransportParam)

class OnCreateMediaTransportSrtpParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnCreateMediaTransportSrtpParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnCreateMediaTransportSrtpParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mediaIdx"] = _pjsua2.OnCreateMediaTransportSrtpParam_mediaIdx_set
    __swig_getmethods__["mediaIdx"] = _pjsua2.OnCreateMediaTransportSrtpParam_mediaIdx_get
    if _newclass:
        mediaIdx = _swig_property(_pjsua2.OnCreateMediaTransportSrtpParam_mediaIdx_get, _pjsua2.OnCreateMediaTransportSrtpParam_mediaIdx_set)
    __swig_setmethods__["srtpUse"] = _pjsua2.OnCreateMediaTransportSrtpParam_srtpUse_set
    __swig_getmethods__["srtpUse"] = _pjsua2.OnCreateMediaTransportSrtpParam_srtpUse_get
    if _newclass:
        srtpUse = _swig_property(_pjsua2.OnCreateMediaTransportSrtpParam_srtpUse_get, _pjsua2.OnCreateMediaTransportSrtpParam_srtpUse_set)
    __swig_setmethods__["cryptos"] = _pjsua2.OnCreateMediaTransportSrtpParam_cryptos_set
    __swig_getmethods__["cryptos"] = _pjsua2.OnCreateMediaTransportSrtpParam_cryptos_get
    if _newclass:
        cryptos = _swig_property(_pjsua2.OnCreateMediaTransportSrtpParam_cryptos_get, _pjsua2.OnCreateMediaTransportSrtpParam_cryptos_set)

    def __init__(self):
        this = _pjsua2.new_OnCreateMediaTransportSrtpParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnCreateMediaTransportSrtpParam
    __del__ = lambda self: None
OnCreateMediaTransportSrtpParam_swigregister = _pjsua2.OnCreateMediaTransportSrtpParam_swigregister
OnCreateMediaTransportSrtpParam_swigregister(OnCreateMediaTransportSrtpParam)

class CallOpParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallOpParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallOpParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opt"] = _pjsua2.CallOpParam_opt_set
    __swig_getmethods__["opt"] = _pjsua2.CallOpParam_opt_get
    if _newclass:
        opt = _swig_property(_pjsua2.CallOpParam_opt_get, _pjsua2.CallOpParam_opt_set)
    __swig_setmethods__["statusCode"] = _pjsua2.CallOpParam_statusCode_set
    __swig_getmethods__["statusCode"] = _pjsua2.CallOpParam_statusCode_get
    if _newclass:
        statusCode = _swig_property(_pjsua2.CallOpParam_statusCode_get, _pjsua2.CallOpParam_statusCode_set)
    __swig_setmethods__["reason"] = _pjsua2.CallOpParam_reason_set
    __swig_getmethods__["reason"] = _pjsua2.CallOpParam_reason_get
    if _newclass:
        reason = _swig_property(_pjsua2.CallOpParam_reason_get, _pjsua2.CallOpParam_reason_set)
    __swig_setmethods__["options"] = _pjsua2.CallOpParam_options_set
    __swig_getmethods__["options"] = _pjsua2.CallOpParam_options_get
    if _newclass:
        options = _swig_property(_pjsua2.CallOpParam_options_get, _pjsua2.CallOpParam_options_set)
    __swig_setmethods__["txOption"] = _pjsua2.CallOpParam_txOption_set
    __swig_getmethods__["txOption"] = _pjsua2.CallOpParam_txOption_get
    if _newclass:
        txOption = _swig_property(_pjsua2.CallOpParam_txOption_get, _pjsua2.CallOpParam_txOption_set)
    __swig_setmethods__["sdp"] = _pjsua2.CallOpParam_sdp_set
    __swig_getmethods__["sdp"] = _pjsua2.CallOpParam_sdp_get
    if _newclass:
        sdp = _swig_property(_pjsua2.CallOpParam_sdp_get, _pjsua2.CallOpParam_sdp_set)

    def __init__(self, useDefaultCallSetting=False):
        this = _pjsua2.new_CallOpParam(useDefaultCallSetting)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_CallOpParam
    __del__ = lambda self: None
CallOpParam_swigregister = _pjsua2.CallOpParam_swigregister
CallOpParam_swigregister(CallOpParam)

class CallSendRequestParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallSendRequestParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallSendRequestParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["method"] = _pjsua2.CallSendRequestParam_method_set
    __swig_getmethods__["method"] = _pjsua2.CallSendRequestParam_method_get
    if _newclass:
        method = _swig_property(_pjsua2.CallSendRequestParam_method_get, _pjsua2.CallSendRequestParam_method_set)
    __swig_setmethods__["txOption"] = _pjsua2.CallSendRequestParam_txOption_set
    __swig_getmethods__["txOption"] = _pjsua2.CallSendRequestParam_txOption_get
    if _newclass:
        txOption = _swig_property(_pjsua2.CallSendRequestParam_txOption_get, _pjsua2.CallSendRequestParam_txOption_set)

    def __init__(self):
        this = _pjsua2.new_CallSendRequestParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_CallSendRequestParam
    __del__ = lambda self: None
CallSendRequestParam_swigregister = _pjsua2.CallSendRequestParam_swigregister
CallSendRequestParam_swigregister(CallSendRequestParam)

class CallVidSetStreamParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallVidSetStreamParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallVidSetStreamParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["medIdx"] = _pjsua2.CallVidSetStreamParam_medIdx_set
    __swig_getmethods__["medIdx"] = _pjsua2.CallVidSetStreamParam_medIdx_get
    if _newclass:
        medIdx = _swig_property(_pjsua2.CallVidSetStreamParam_medIdx_get, _pjsua2.CallVidSetStreamParam_medIdx_set)
    __swig_setmethods__["dir"] = _pjsua2.CallVidSetStreamParam_dir_set
    __swig_getmethods__["dir"] = _pjsua2.CallVidSetStreamParam_dir_get
    if _newclass:
        dir = _swig_property(_pjsua2.CallVidSetStreamParam_dir_get, _pjsua2.CallVidSetStreamParam_dir_set)
    __swig_setmethods__["capDev"] = _pjsua2.CallVidSetStreamParam_capDev_set
    __swig_getmethods__["capDev"] = _pjsua2.CallVidSetStreamParam_capDev_get
    if _newclass:
        capDev = _swig_property(_pjsua2.CallVidSetStreamParam_capDev_get, _pjsua2.CallVidSetStreamParam_capDev_set)

    def __init__(self):
        this = _pjsua2.new_CallVidSetStreamParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_CallVidSetStreamParam
    __del__ = lambda self: None
CallVidSetStreamParam_swigregister = _pjsua2.CallVidSetStreamParam_swigregister
CallVidSetStreamParam_swigregister(CallVidSetStreamParam)

class CallSendDtmfParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallSendDtmfParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallSendDtmfParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["method"] = _pjsua2.CallSendDtmfParam_method_set
    __swig_getmethods__["method"] = _pjsua2.CallSendDtmfParam_method_get
    if _newclass:
        method = _swig_property(_pjsua2.CallSendDtmfParam_method_get, _pjsua2.CallSendDtmfParam_method_set)
    __swig_setmethods__["duration"] = _pjsua2.CallSendDtmfParam_duration_set
    __swig_getmethods__["duration"] = _pjsua2.CallSendDtmfParam_duration_get
    if _newclass:
        duration = _swig_property(_pjsua2.CallSendDtmfParam_duration_get, _pjsua2.CallSendDtmfParam_duration_set)
    __swig_setmethods__["digits"] = _pjsua2.CallSendDtmfParam_digits_set
    __swig_getmethods__["digits"] = _pjsua2.CallSendDtmfParam_digits_get
    if _newclass:
        digits = _swig_property(_pjsua2.CallSendDtmfParam_digits_get, _pjsua2.CallSendDtmfParam_digits_set)

    def __init__(self):
        this = _pjsua2.new_CallSendDtmfParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_CallSendDtmfParam
    __del__ = lambda self: None
CallSendDtmfParam_swigregister = _pjsua2.CallSendDtmfParam_swigregister
CallSendDtmfParam_swigregister(CallSendDtmfParam)

class Call(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Call, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Call, name)
    __repr__ = _swig_repr

    def __init__(self, acc, call_id=PJSUA_INVALID_ID):
        if self.__class__ == Call:
            _self = None
        else:
            _self = self
        this = _pjsua2.new_Call(_self, acc, call_id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_Call
    __del__ = lambda self: None

    def getInfo(self):
        return _pjsua2.Call_getInfo(self)

    def isActive(self):
        return _pjsua2.Call_isActive(self)

    def getId(self):
        return _pjsua2.Call_getId(self)
    if _newclass:
        lookup = staticmethod(_pjsua2.Call_lookup)
    else:
        lookup = _pjsua2.Call_lookup

    def hasMedia(self):
        return _pjsua2.Call_hasMedia(self)

    def getMedia(self, med_idx):
        return _pjsua2.Call_getMedia(self, med_idx)

    def getAudioMedia(self, med_idx):
        return _pjsua2.Call_getAudioMedia(self, med_idx)

    def getEncodingVideoMedia(self, med_idx):
        return _pjsua2.Call_getEncodingVideoMedia(self, med_idx)

    def getDecodingVideoMedia(self, med_idx):
        return _pjsua2.Call_getDecodingVideoMedia(self, med_idx)

    def remoteHasCap(self, htype, hname, token):
        return _pjsua2.Call_remoteHasCap(self, htype, hname, token)

    def setUserData(self, user_data):
        return _pjsua2.Call_setUserData(self, user_data)

    def getUserData(self):
        return _pjsua2.Call_getUserData(self)

    def getRemNatType(self):
        return _pjsua2.Call_getRemNatType(self)

    def makeCall(self, dst_uri, prm):
        return _pjsua2.Call_makeCall(self, dst_uri, prm)

    def answer(self, prm):
        return _pjsua2.Call_answer(self, prm)

    def hangup(self, prm):
        return _pjsua2.Call_hangup(self, prm)

    def setHold(self, prm):
        return _pjsua2.Call_setHold(self, prm)

    def reinvite(self, prm):
        return _pjsua2.Call_reinvite(self, prm)

    def update(self, prm):
        return _pjsua2.Call_update(self, prm)

    def xfer(self, dest, prm):
        return _pjsua2.Call_xfer(self, dest, prm)

    def xferReplaces(self, dest_call, prm):
        return _pjsua2.Call_xferReplaces(self, dest_call, prm)

    def processRedirect(self, cmd):
        return _pjsua2.Call_processRedirect(self, cmd)

    def dialDtmf(self, digits):
        return _pjsua2.Call_dialDtmf(self, digits)

    def sendDtmf(self, param):
        return _pjsua2.Call_sendDtmf(self, param)

    def sendInstantMessage(self, prm):
        return _pjsua2.Call_sendInstantMessage(self, prm)

    def sendTypingIndication(self, prm):
        return _pjsua2.Call_sendTypingIndication(self, prm)

    def sendRequest(self, prm):
        return _pjsua2.Call_sendRequest(self, prm)

    def dump(self, with_media, indent):
        return _pjsua2.Call_dump(self, with_media, indent)

    def vidGetStreamIdx(self):
        return _pjsua2.Call_vidGetStreamIdx(self)

    def vidStreamIsRunning(self, med_idx, dir):
        return _pjsua2.Call_vidStreamIsRunning(self, med_idx, dir)

    def vidSetStream(self, op, param):
        return _pjsua2.Call_vidSetStream(self, op, param)

    def getStreamInfo(self, med_idx):
        return _pjsua2.Call_getStreamInfo(self, med_idx)

    def getStreamStat(self, med_idx):
        return _pjsua2.Call_getStreamStat(self, med_idx)

    def getMedTransportInfo(self, med_idx):
        return _pjsua2.Call_getMedTransportInfo(self, med_idx)

    def processMediaUpdate(self, prm):
        return _pjsua2.Call_processMediaUpdate(self, prm)

    def processStateChange(self, prm):
        return _pjsua2.Call_processStateChange(self, prm)

    def onCallState(self, prm):
        return _pjsua2.Call_onCallState(self, prm)

    def onCallTsxState(self, prm):
        return _pjsua2.Call_onCallTsxState(self, prm)

    def onCallMediaState(self, prm):
        return _pjsua2.Call_onCallMediaState(self, prm)

    def onCallSdpCreated(self, prm):
        return _pjsua2.Call_onCallSdpCreated(self, prm)

    def onStreamCreated(self, prm):
        return _pjsua2.Call_onStreamCreated(self, prm)

    def onStreamDestroyed(self, prm):
        return _pjsua2.Call_onStreamDestroyed(self, prm)

    def onDtmfDigit(self, prm):
        return _pjsua2.Call_onDtmfDigit(self, prm)

    def onCallTransferRequest(self, prm):
        return _pjsua2.Call_onCallTransferRequest(self, prm)

    def onCallTransferStatus(self, prm):
        return _pjsua2.Call_onCallTransferStatus(self, prm)

    def onCallReplaceRequest(self, prm):
        return _pjsua2.Call_onCallReplaceRequest(self, prm)

    def onCallReplaced(self, prm):
        return _pjsua2.Call_onCallReplaced(self, prm)

    def onCallRxOffer(self, prm):
        return _pjsua2.Call_onCallRxOffer(self, prm)

    def onCallRxReinvite(self, prm):
        return _pjsua2.Call_onCallRxReinvite(self, prm)

    def onCallTxOffer(self, prm):
        return _pjsua2.Call_onCallTxOffer(self, prm)

    def onInstantMessage(self, prm):
        return _pjsua2.Call_onInstantMessage(self, prm)

    def onInstantMessageStatus(self, prm):
        return _pjsua2.Call_onInstantMessageStatus(self, prm)

    def onTypingIndication(self, prm):
        return _pjsua2.Call_onTypingIndication(self, prm)

    def onCallRedirected(self, prm):
        return _pjsua2.Call_onCallRedirected(self, prm)

    def onCallMediaTransportState(self, prm):
        return _pjsua2.Call_onCallMediaTransportState(self, prm)

    def onCallMediaEvent(self, prm):
        return _pjsua2.Call_onCallMediaEvent(self, prm)

    def onCreateMediaTransport(self, prm):
        return _pjsua2.Call_onCreateMediaTransport(self, prm)

    def onCreateMediaTransportSrtp(self, prm):
        return _pjsua2.Call_onCreateMediaTransportSrtp(self, prm)
    def __disown__(self):
        self.this.disown()
        _pjsua2.disown_Call(self)
        return weakref_proxy(self)
Call_swigregister = _pjsua2.Call_swigregister
Call_swigregister(Call)

def Call_lookup(call_id):
    return _pjsua2.Call_lookup(call_id)
Call_lookup = _pjsua2.Call_lookup

class JsonDocument(PersistentDocument):
    __swig_setmethods__ = {}
    for _s in [PersistentDocument]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JsonDocument, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentDocument]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JsonDocument, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pjsua2.new_JsonDocument()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_JsonDocument
    __del__ = lambda self: None

    def loadFile(self, filename):
        return _pjsua2.JsonDocument_loadFile(self, filename)

    def loadString(self, input):
        return _pjsua2.JsonDocument_loadString(self, input)

    def saveFile(self, filename):
        return _pjsua2.JsonDocument_saveFile(self, filename)

    def saveString(self):
        return _pjsua2.JsonDocument_saveString(self)

    def getRootContainer(self):
        return _pjsua2.JsonDocument_getRootContainer(self)
JsonDocument_swigregister = _pjsua2.JsonDocument_swigregister
JsonDocument_swigregister(JsonDocument)

class OnNatDetectionCompleteParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnNatDetectionCompleteParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnNatDetectionCompleteParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _pjsua2.OnNatDetectionCompleteParam_status_set
    __swig_getmethods__["status"] = _pjsua2.OnNatDetectionCompleteParam_status_get
    if _newclass:
        status = _swig_property(_pjsua2.OnNatDetectionCompleteParam_status_get, _pjsua2.OnNatDetectionCompleteParam_status_set)
    __swig_setmethods__["reason"] = _pjsua2.OnNatDetectionCompleteParam_reason_set
    __swig_getmethods__["reason"] = _pjsua2.OnNatDetectionCompleteParam_reason_get
    if _newclass:
        reason = _swig_property(_pjsua2.OnNatDetectionCompleteParam_reason_get, _pjsua2.OnNatDetectionCompleteParam_reason_set)
    __swig_setmethods__["natType"] = _pjsua2.OnNatDetectionCompleteParam_natType_set
    __swig_getmethods__["natType"] = _pjsua2.OnNatDetectionCompleteParam_natType_get
    if _newclass:
        natType = _swig_property(_pjsua2.OnNatDetectionCompleteParam_natType_get, _pjsua2.OnNatDetectionCompleteParam_natType_set)
    __swig_setmethods__["natTypeName"] = _pjsua2.OnNatDetectionCompleteParam_natTypeName_set
    __swig_getmethods__["natTypeName"] = _pjsua2.OnNatDetectionCompleteParam_natTypeName_get
    if _newclass:
        natTypeName = _swig_property(_pjsua2.OnNatDetectionCompleteParam_natTypeName_get, _pjsua2.OnNatDetectionCompleteParam_natTypeName_set)

    def __init__(self):
        this = _pjsua2.new_OnNatDetectionCompleteParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnNatDetectionCompleteParam
    __del__ = lambda self: None
OnNatDetectionCompleteParam_swigregister = _pjsua2.OnNatDetectionCompleteParam_swigregister
OnNatDetectionCompleteParam_swigregister(OnNatDetectionCompleteParam)

class OnNatCheckStunServersCompleteParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnNatCheckStunServersCompleteParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnNatCheckStunServersCompleteParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["userData"] = _pjsua2.OnNatCheckStunServersCompleteParam_userData_set
    __swig_getmethods__["userData"] = _pjsua2.OnNatCheckStunServersCompleteParam_userData_get
    if _newclass:
        userData = _swig_property(_pjsua2.OnNatCheckStunServersCompleteParam_userData_get, _pjsua2.OnNatCheckStunServersCompleteParam_userData_set)
    __swig_setmethods__["status"] = _pjsua2.OnNatCheckStunServersCompleteParam_status_set
    __swig_getmethods__["status"] = _pjsua2.OnNatCheckStunServersCompleteParam_status_get
    if _newclass:
        status = _swig_property(_pjsua2.OnNatCheckStunServersCompleteParam_status_get, _pjsua2.OnNatCheckStunServersCompleteParam_status_set)
    __swig_setmethods__["name"] = _pjsua2.OnNatCheckStunServersCompleteParam_name_set
    __swig_getmethods__["name"] = _pjsua2.OnNatCheckStunServersCompleteParam_name_get
    if _newclass:
        name = _swig_property(_pjsua2.OnNatCheckStunServersCompleteParam_name_get, _pjsua2.OnNatCheckStunServersCompleteParam_name_set)
    __swig_setmethods__["addr"] = _pjsua2.OnNatCheckStunServersCompleteParam_addr_set
    __swig_getmethods__["addr"] = _pjsua2.OnNatCheckStunServersCompleteParam_addr_get
    if _newclass:
        addr = _swig_property(_pjsua2.OnNatCheckStunServersCompleteParam_addr_get, _pjsua2.OnNatCheckStunServersCompleteParam_addr_set)

    def __init__(self):
        this = _pjsua2.new_OnNatCheckStunServersCompleteParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnNatCheckStunServersCompleteParam
    __del__ = lambda self: None
OnNatCheckStunServersCompleteParam_swigregister = _pjsua2.OnNatCheckStunServersCompleteParam_swigregister
OnNatCheckStunServersCompleteParam_swigregister(OnNatCheckStunServersCompleteParam)

class OnTimerParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnTimerParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnTimerParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["userData"] = _pjsua2.OnTimerParam_userData_set
    __swig_getmethods__["userData"] = _pjsua2.OnTimerParam_userData_get
    if _newclass:
        userData = _swig_property(_pjsua2.OnTimerParam_userData_get, _pjsua2.OnTimerParam_userData_set)
    __swig_setmethods__["msecDelay"] = _pjsua2.OnTimerParam_msecDelay_set
    __swig_getmethods__["msecDelay"] = _pjsua2.OnTimerParam_msecDelay_get
    if _newclass:
        msecDelay = _swig_property(_pjsua2.OnTimerParam_msecDelay_get, _pjsua2.OnTimerParam_msecDelay_set)

    def __init__(self):
        this = _pjsua2.new_OnTimerParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnTimerParam
    __del__ = lambda self: None
OnTimerParam_swigregister = _pjsua2.OnTimerParam_swigregister
OnTimerParam_swigregister(OnTimerParam)

class SslCertName(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SslCertName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SslCertName, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _pjsua2.SslCertName_type_set
    __swig_getmethods__["type"] = _pjsua2.SslCertName_type_get
    if _newclass:
        type = _swig_property(_pjsua2.SslCertName_type_get, _pjsua2.SslCertName_type_set)
    __swig_setmethods__["name"] = _pjsua2.SslCertName_name_set
    __swig_getmethods__["name"] = _pjsua2.SslCertName_name_get
    if _newclass:
        name = _swig_property(_pjsua2.SslCertName_name_get, _pjsua2.SslCertName_name_set)

    def __init__(self):
        this = _pjsua2.new_SslCertName()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_SslCertName
    __del__ = lambda self: None
SslCertName_swigregister = _pjsua2.SslCertName_swigregister
SslCertName_swigregister(SslCertName)

class SslCertInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SslCertInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SslCertInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _pjsua2.SslCertInfo_version_set
    __swig_getmethods__["version"] = _pjsua2.SslCertInfo_version_get
    if _newclass:
        version = _swig_property(_pjsua2.SslCertInfo_version_get, _pjsua2.SslCertInfo_version_set)
    __swig_setmethods__["serialNo"] = _pjsua2.SslCertInfo_serialNo_set
    __swig_getmethods__["serialNo"] = _pjsua2.SslCertInfo_serialNo_get
    if _newclass:
        serialNo = _swig_property(_pjsua2.SslCertInfo_serialNo_get, _pjsua2.SslCertInfo_serialNo_set)
    __swig_setmethods__["subjectCn"] = _pjsua2.SslCertInfo_subjectCn_set
    __swig_getmethods__["subjectCn"] = _pjsua2.SslCertInfo_subjectCn_get
    if _newclass:
        subjectCn = _swig_property(_pjsua2.SslCertInfo_subjectCn_get, _pjsua2.SslCertInfo_subjectCn_set)
    __swig_setmethods__["subjectInfo"] = _pjsua2.SslCertInfo_subjectInfo_set
    __swig_getmethods__["subjectInfo"] = _pjsua2.SslCertInfo_subjectInfo_get
    if _newclass:
        subjectInfo = _swig_property(_pjsua2.SslCertInfo_subjectInfo_get, _pjsua2.SslCertInfo_subjectInfo_set)
    __swig_setmethods__["issuerCn"] = _pjsua2.SslCertInfo_issuerCn_set
    __swig_getmethods__["issuerCn"] = _pjsua2.SslCertInfo_issuerCn_get
    if _newclass:
        issuerCn = _swig_property(_pjsua2.SslCertInfo_issuerCn_get, _pjsua2.SslCertInfo_issuerCn_set)
    __swig_setmethods__["issuerInfo"] = _pjsua2.SslCertInfo_issuerInfo_set
    __swig_getmethods__["issuerInfo"] = _pjsua2.SslCertInfo_issuerInfo_get
    if _newclass:
        issuerInfo = _swig_property(_pjsua2.SslCertInfo_issuerInfo_get, _pjsua2.SslCertInfo_issuerInfo_set)
    __swig_setmethods__["validityStart"] = _pjsua2.SslCertInfo_validityStart_set
    __swig_getmethods__["validityStart"] = _pjsua2.SslCertInfo_validityStart_get
    if _newclass:
        validityStart = _swig_property(_pjsua2.SslCertInfo_validityStart_get, _pjsua2.SslCertInfo_validityStart_set)
    __swig_setmethods__["validityEnd"] = _pjsua2.SslCertInfo_validityEnd_set
    __swig_getmethods__["validityEnd"] = _pjsua2.SslCertInfo_validityEnd_get
    if _newclass:
        validityEnd = _swig_property(_pjsua2.SslCertInfo_validityEnd_get, _pjsua2.SslCertInfo_validityEnd_set)
    __swig_setmethods__["validityGmt"] = _pjsua2.SslCertInfo_validityGmt_set
    __swig_getmethods__["validityGmt"] = _pjsua2.SslCertInfo_validityGmt_get
    if _newclass:
        validityGmt = _swig_property(_pjsua2.SslCertInfo_validityGmt_get, _pjsua2.SslCertInfo_validityGmt_set)
    __swig_setmethods__["subjectAltName"] = _pjsua2.SslCertInfo_subjectAltName_set
    __swig_getmethods__["subjectAltName"] = _pjsua2.SslCertInfo_subjectAltName_get
    if _newclass:
        subjectAltName = _swig_property(_pjsua2.SslCertInfo_subjectAltName_get, _pjsua2.SslCertInfo_subjectAltName_set)
    __swig_setmethods__["raw"] = _pjsua2.SslCertInfo_raw_set
    __swig_getmethods__["raw"] = _pjsua2.SslCertInfo_raw_get
    if _newclass:
        raw = _swig_property(_pjsua2.SslCertInfo_raw_get, _pjsua2.SslCertInfo_raw_set)

    def __init__(self):
        this = _pjsua2.new_SslCertInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isEmpty(self):
        return _pjsua2.SslCertInfo_isEmpty(self)
    __swig_destroy__ = _pjsua2.delete_SslCertInfo
    __del__ = lambda self: None
SslCertInfo_swigregister = _pjsua2.SslCertInfo_swigregister
SslCertInfo_swigregister(SslCertInfo)

class TlsInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TlsInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TlsInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["established"] = _pjsua2.TlsInfo_established_set
    __swig_getmethods__["established"] = _pjsua2.TlsInfo_established_get
    if _newclass:
        established = _swig_property(_pjsua2.TlsInfo_established_get, _pjsua2.TlsInfo_established_set)
    __swig_setmethods__["protocol"] = _pjsua2.TlsInfo_protocol_set
    __swig_getmethods__["protocol"] = _pjsua2.TlsInfo_protocol_get
    if _newclass:
        protocol = _swig_property(_pjsua2.TlsInfo_protocol_get, _pjsua2.TlsInfo_protocol_set)
    __swig_setmethods__["cipher"] = _pjsua2.TlsInfo_cipher_set
    __swig_getmethods__["cipher"] = _pjsua2.TlsInfo_cipher_get
    if _newclass:
        cipher = _swig_property(_pjsua2.TlsInfo_cipher_get, _pjsua2.TlsInfo_cipher_set)
    __swig_setmethods__["cipherName"] = _pjsua2.TlsInfo_cipherName_set
    __swig_getmethods__["cipherName"] = _pjsua2.TlsInfo_cipherName_get
    if _newclass:
        cipherName = _swig_property(_pjsua2.TlsInfo_cipherName_get, _pjsua2.TlsInfo_cipherName_set)
    __swig_setmethods__["localAddr"] = _pjsua2.TlsInfo_localAddr_set
    __swig_getmethods__["localAddr"] = _pjsua2.TlsInfo_localAddr_get
    if _newclass:
        localAddr = _swig_property(_pjsua2.TlsInfo_localAddr_get, _pjsua2.TlsInfo_localAddr_set)
    __swig_setmethods__["remoteAddr"] = _pjsua2.TlsInfo_remoteAddr_set
    __swig_getmethods__["remoteAddr"] = _pjsua2.TlsInfo_remoteAddr_get
    if _newclass:
        remoteAddr = _swig_property(_pjsua2.TlsInfo_remoteAddr_get, _pjsua2.TlsInfo_remoteAddr_set)
    __swig_setmethods__["localCertInfo"] = _pjsua2.TlsInfo_localCertInfo_set
    __swig_getmethods__["localCertInfo"] = _pjsua2.TlsInfo_localCertInfo_get
    if _newclass:
        localCertInfo = _swig_property(_pjsua2.TlsInfo_localCertInfo_get, _pjsua2.TlsInfo_localCertInfo_set)
    __swig_setmethods__["remoteCertInfo"] = _pjsua2.TlsInfo_remoteCertInfo_set
    __swig_getmethods__["remoteCertInfo"] = _pjsua2.TlsInfo_remoteCertInfo_get
    if _newclass:
        remoteCertInfo = _swig_property(_pjsua2.TlsInfo_remoteCertInfo_get, _pjsua2.TlsInfo_remoteCertInfo_set)
    __swig_setmethods__["verifyStatus"] = _pjsua2.TlsInfo_verifyStatus_set
    __swig_getmethods__["verifyStatus"] = _pjsua2.TlsInfo_verifyStatus_get
    if _newclass:
        verifyStatus = _swig_property(_pjsua2.TlsInfo_verifyStatus_get, _pjsua2.TlsInfo_verifyStatus_set)
    __swig_setmethods__["verifyMsgs"] = _pjsua2.TlsInfo_verifyMsgs_set
    __swig_getmethods__["verifyMsgs"] = _pjsua2.TlsInfo_verifyMsgs_get
    if _newclass:
        verifyMsgs = _swig_property(_pjsua2.TlsInfo_verifyMsgs_get, _pjsua2.TlsInfo_verifyMsgs_set)

    def __init__(self):
        this = _pjsua2.new_TlsInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isEmpty(self):
        return _pjsua2.TlsInfo_isEmpty(self)
    __swig_destroy__ = _pjsua2.delete_TlsInfo
    __del__ = lambda self: None
TlsInfo_swigregister = _pjsua2.TlsInfo_swigregister
TlsInfo_swigregister(TlsInfo)

class OnTransportStateParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnTransportStateParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnTransportStateParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hnd"] = _pjsua2.OnTransportStateParam_hnd_set
    __swig_getmethods__["hnd"] = _pjsua2.OnTransportStateParam_hnd_get
    if _newclass:
        hnd = _swig_property(_pjsua2.OnTransportStateParam_hnd_get, _pjsua2.OnTransportStateParam_hnd_set)
    __swig_setmethods__["type"] = _pjsua2.OnTransportStateParam_type_set
    __swig_getmethods__["type"] = _pjsua2.OnTransportStateParam_type_get
    if _newclass:
        type = _swig_property(_pjsua2.OnTransportStateParam_type_get, _pjsua2.OnTransportStateParam_type_set)
    __swig_setmethods__["state"] = _pjsua2.OnTransportStateParam_state_set
    __swig_getmethods__["state"] = _pjsua2.OnTransportStateParam_state_get
    if _newclass:
        state = _swig_property(_pjsua2.OnTransportStateParam_state_get, _pjsua2.OnTransportStateParam_state_set)
    __swig_setmethods__["lastError"] = _pjsua2.OnTransportStateParam_lastError_set
    __swig_getmethods__["lastError"] = _pjsua2.OnTransportStateParam_lastError_get
    if _newclass:
        lastError = _swig_property(_pjsua2.OnTransportStateParam_lastError_get, _pjsua2.OnTransportStateParam_lastError_set)
    __swig_setmethods__["tlsInfo"] = _pjsua2.OnTransportStateParam_tlsInfo_set
    __swig_getmethods__["tlsInfo"] = _pjsua2.OnTransportStateParam_tlsInfo_get
    if _newclass:
        tlsInfo = _swig_property(_pjsua2.OnTransportStateParam_tlsInfo_get, _pjsua2.OnTransportStateParam_tlsInfo_set)

    def __init__(self):
        this = _pjsua2.new_OnTransportStateParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnTransportStateParam
    __del__ = lambda self: None
OnTransportStateParam_swigregister = _pjsua2.OnTransportStateParam_swigregister
OnTransportStateParam_swigregister(OnTransportStateParam)

class OnSelectAccountParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnSelectAccountParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnSelectAccountParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rdata"] = _pjsua2.OnSelectAccountParam_rdata_set
    __swig_getmethods__["rdata"] = _pjsua2.OnSelectAccountParam_rdata_get
    if _newclass:
        rdata = _swig_property(_pjsua2.OnSelectAccountParam_rdata_get, _pjsua2.OnSelectAccountParam_rdata_set)
    __swig_setmethods__["accountIndex"] = _pjsua2.OnSelectAccountParam_accountIndex_set
    __swig_getmethods__["accountIndex"] = _pjsua2.OnSelectAccountParam_accountIndex_get
    if _newclass:
        accountIndex = _swig_property(_pjsua2.OnSelectAccountParam_accountIndex_get, _pjsua2.OnSelectAccountParam_accountIndex_set)

    def __init__(self):
        this = _pjsua2.new_OnSelectAccountParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnSelectAccountParam
    __del__ = lambda self: None
OnSelectAccountParam_swigregister = _pjsua2.OnSelectAccountParam_swigregister
OnSelectAccountParam_swigregister(OnSelectAccountParam)

class IpChangeParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IpChangeParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IpChangeParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["restartListener"] = _pjsua2.IpChangeParam_restartListener_set
    __swig_getmethods__["restartListener"] = _pjsua2.IpChangeParam_restartListener_get
    if _newclass:
        restartListener = _swig_property(_pjsua2.IpChangeParam_restartListener_get, _pjsua2.IpChangeParam_restartListener_set)
    __swig_setmethods__["restartLisDelay"] = _pjsua2.IpChangeParam_restartLisDelay_set
    __swig_getmethods__["restartLisDelay"] = _pjsua2.IpChangeParam_restartLisDelay_get
    if _newclass:
        restartLisDelay = _swig_property(_pjsua2.IpChangeParam_restartLisDelay_get, _pjsua2.IpChangeParam_restartLisDelay_set)

    def __init__(self):
        this = _pjsua2.new_IpChangeParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_IpChangeParam
    __del__ = lambda self: None
IpChangeParam_swigregister = _pjsua2.IpChangeParam_swigregister
IpChangeParam_swigregister(IpChangeParam)

class RegProgressParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegProgressParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegProgressParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["isRegister"] = _pjsua2.RegProgressParam_isRegister_set
    __swig_getmethods__["isRegister"] = _pjsua2.RegProgressParam_isRegister_get
    if _newclass:
        isRegister = _swig_property(_pjsua2.RegProgressParam_isRegister_get, _pjsua2.RegProgressParam_isRegister_set)
    __swig_setmethods__["code"] = _pjsua2.RegProgressParam_code_set
    __swig_getmethods__["code"] = _pjsua2.RegProgressParam_code_get
    if _newclass:
        code = _swig_property(_pjsua2.RegProgressParam_code_get, _pjsua2.RegProgressParam_code_set)

    def __init__(self):
        this = _pjsua2.new_RegProgressParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_RegProgressParam
    __del__ = lambda self: None
RegProgressParam_swigregister = _pjsua2.RegProgressParam_swigregister
RegProgressParam_swigregister(RegProgressParam)

class OnIpChangeProgressParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnIpChangeProgressParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnIpChangeProgressParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["op"] = _pjsua2.OnIpChangeProgressParam_op_set
    __swig_getmethods__["op"] = _pjsua2.OnIpChangeProgressParam_op_get
    if _newclass:
        op = _swig_property(_pjsua2.OnIpChangeProgressParam_op_get, _pjsua2.OnIpChangeProgressParam_op_set)
    __swig_setmethods__["status"] = _pjsua2.OnIpChangeProgressParam_status_set
    __swig_getmethods__["status"] = _pjsua2.OnIpChangeProgressParam_status_get
    if _newclass:
        status = _swig_property(_pjsua2.OnIpChangeProgressParam_status_get, _pjsua2.OnIpChangeProgressParam_status_set)
    __swig_setmethods__["transportId"] = _pjsua2.OnIpChangeProgressParam_transportId_set
    __swig_getmethods__["transportId"] = _pjsua2.OnIpChangeProgressParam_transportId_get
    if _newclass:
        transportId = _swig_property(_pjsua2.OnIpChangeProgressParam_transportId_get, _pjsua2.OnIpChangeProgressParam_transportId_set)
    __swig_setmethods__["accId"] = _pjsua2.OnIpChangeProgressParam_accId_set
    __swig_getmethods__["accId"] = _pjsua2.OnIpChangeProgressParam_accId_get
    if _newclass:
        accId = _swig_property(_pjsua2.OnIpChangeProgressParam_accId_get, _pjsua2.OnIpChangeProgressParam_accId_set)
    __swig_setmethods__["callId"] = _pjsua2.OnIpChangeProgressParam_callId_set
    __swig_getmethods__["callId"] = _pjsua2.OnIpChangeProgressParam_callId_get
    if _newclass:
        callId = _swig_property(_pjsua2.OnIpChangeProgressParam_callId_get, _pjsua2.OnIpChangeProgressParam_callId_set)
    __swig_setmethods__["regInfo"] = _pjsua2.OnIpChangeProgressParam_regInfo_set
    __swig_getmethods__["regInfo"] = _pjsua2.OnIpChangeProgressParam_regInfo_get
    if _newclass:
        regInfo = _swig_property(_pjsua2.OnIpChangeProgressParam_regInfo_get, _pjsua2.OnIpChangeProgressParam_regInfo_set)

    def __init__(self):
        this = _pjsua2.new_OnIpChangeProgressParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnIpChangeProgressParam
    __del__ = lambda self: None
OnIpChangeProgressParam_swigregister = _pjsua2.OnIpChangeProgressParam_swigregister
OnIpChangeProgressParam_swigregister(OnIpChangeProgressParam)

class OnMediaEventParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnMediaEventParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OnMediaEventParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ev"] = _pjsua2.OnMediaEventParam_ev_set
    __swig_getmethods__["ev"] = _pjsua2.OnMediaEventParam_ev_get
    if _newclass:
        ev = _swig_property(_pjsua2.OnMediaEventParam_ev_get, _pjsua2.OnMediaEventParam_ev_set)

    def __init__(self):
        this = _pjsua2.new_OnMediaEventParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_OnMediaEventParam
    __del__ = lambda self: None
OnMediaEventParam_swigregister = _pjsua2.OnMediaEventParam_swigregister
OnMediaEventParam_swigregister(OnMediaEventParam)

class UaConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UaConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UaConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["maxCalls"] = _pjsua2.UaConfig_maxCalls_set
    __swig_getmethods__["maxCalls"] = _pjsua2.UaConfig_maxCalls_get
    if _newclass:
        maxCalls = _swig_property(_pjsua2.UaConfig_maxCalls_get, _pjsua2.UaConfig_maxCalls_set)
    __swig_setmethods__["threadCnt"] = _pjsua2.UaConfig_threadCnt_set
    __swig_getmethods__["threadCnt"] = _pjsua2.UaConfig_threadCnt_get
    if _newclass:
        threadCnt = _swig_property(_pjsua2.UaConfig_threadCnt_get, _pjsua2.UaConfig_threadCnt_set)
    __swig_setmethods__["mainThreadOnly"] = _pjsua2.UaConfig_mainThreadOnly_set
    __swig_getmethods__["mainThreadOnly"] = _pjsua2.UaConfig_mainThreadOnly_get
    if _newclass:
        mainThreadOnly = _swig_property(_pjsua2.UaConfig_mainThreadOnly_get, _pjsua2.UaConfig_mainThreadOnly_set)
    __swig_setmethods__["nameserver"] = _pjsua2.UaConfig_nameserver_set
    __swig_getmethods__["nameserver"] = _pjsua2.UaConfig_nameserver_get
    if _newclass:
        nameserver = _swig_property(_pjsua2.UaConfig_nameserver_get, _pjsua2.UaConfig_nameserver_set)
    __swig_setmethods__["outboundProxies"] = _pjsua2.UaConfig_outboundProxies_set
    __swig_getmethods__["outboundProxies"] = _pjsua2.UaConfig_outboundProxies_get
    if _newclass:
        outboundProxies = _swig_property(_pjsua2.UaConfig_outboundProxies_get, _pjsua2.UaConfig_outboundProxies_set)
    __swig_setmethods__["userAgent"] = _pjsua2.UaConfig_userAgent_set
    __swig_getmethods__["userAgent"] = _pjsua2.UaConfig_userAgent_get
    if _newclass:
        userAgent = _swig_property(_pjsua2.UaConfig_userAgent_get, _pjsua2.UaConfig_userAgent_set)
    __swig_setmethods__["stunServer"] = _pjsua2.UaConfig_stunServer_set
    __swig_getmethods__["stunServer"] = _pjsua2.UaConfig_stunServer_get
    if _newclass:
        stunServer = _swig_property(_pjsua2.UaConfig_stunServer_get, _pjsua2.UaConfig_stunServer_set)
    __swig_setmethods__["stunTryIpv6"] = _pjsua2.UaConfig_stunTryIpv6_set
    __swig_getmethods__["stunTryIpv6"] = _pjsua2.UaConfig_stunTryIpv6_get
    if _newclass:
        stunTryIpv6 = _swig_property(_pjsua2.UaConfig_stunTryIpv6_get, _pjsua2.UaConfig_stunTryIpv6_set)
    __swig_setmethods__["stunIgnoreFailure"] = _pjsua2.UaConfig_stunIgnoreFailure_set
    __swig_getmethods__["stunIgnoreFailure"] = _pjsua2.UaConfig_stunIgnoreFailure_get
    if _newclass:
        stunIgnoreFailure = _swig_property(_pjsua2.UaConfig_stunIgnoreFailure_get, _pjsua2.UaConfig_stunIgnoreFailure_set)
    __swig_setmethods__["natTypeInSdp"] = _pjsua2.UaConfig_natTypeInSdp_set
    __swig_getmethods__["natTypeInSdp"] = _pjsua2.UaConfig_natTypeInSdp_get
    if _newclass:
        natTypeInSdp = _swig_property(_pjsua2.UaConfig_natTypeInSdp_get, _pjsua2.UaConfig_natTypeInSdp_set)
    __swig_setmethods__["mwiUnsolicitedEnabled"] = _pjsua2.UaConfig_mwiUnsolicitedEnabled_set
    __swig_getmethods__["mwiUnsolicitedEnabled"] = _pjsua2.UaConfig_mwiUnsolicitedEnabled_get
    if _newclass:
        mwiUnsolicitedEnabled = _swig_property(_pjsua2.UaConfig_mwiUnsolicitedEnabled_get, _pjsua2.UaConfig_mwiUnsolicitedEnabled_set)

    def __init__(self):
        this = _pjsua2.new_UaConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def readObject(self, node):
        return _pjsua2.UaConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.UaConfig_writeObject(self, node)
    __swig_destroy__ = _pjsua2.delete_UaConfig
    __del__ = lambda self: None
UaConfig_swigregister = _pjsua2.UaConfig_swigregister
UaConfig_swigregister(UaConfig)

class LogEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["level"] = _pjsua2.LogEntry_level_set
    __swig_getmethods__["level"] = _pjsua2.LogEntry_level_get
    if _newclass:
        level = _swig_property(_pjsua2.LogEntry_level_get, _pjsua2.LogEntry_level_set)
    __swig_setmethods__["msg"] = _pjsua2.LogEntry_msg_set
    __swig_getmethods__["msg"] = _pjsua2.LogEntry_msg_get
    if _newclass:
        msg = _swig_property(_pjsua2.LogEntry_msg_get, _pjsua2.LogEntry_msg_set)
    __swig_setmethods__["threadId"] = _pjsua2.LogEntry_threadId_set
    __swig_getmethods__["threadId"] = _pjsua2.LogEntry_threadId_get
    if _newclass:
        threadId = _swig_property(_pjsua2.LogEntry_threadId_get, _pjsua2.LogEntry_threadId_set)
    __swig_setmethods__["threadName"] = _pjsua2.LogEntry_threadName_set
    __swig_getmethods__["threadName"] = _pjsua2.LogEntry_threadName_get
    if _newclass:
        threadName = _swig_property(_pjsua2.LogEntry_threadName_get, _pjsua2.LogEntry_threadName_set)

    def __init__(self):
        this = _pjsua2.new_LogEntry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_LogEntry
    __del__ = lambda self: None
LogEntry_swigregister = _pjsua2.LogEntry_swigregister
LogEntry_swigregister(LogEntry)

class LogWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogWriter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pjsua2.delete_LogWriter
    __del__ = lambda self: None

    def write(self, entry):
        return _pjsua2.LogWriter_write(self, entry)

    def __init__(self):
        if self.__class__ == LogWriter:
            _self = None
        else:
            _self = self
        this = _pjsua2.new_LogWriter(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _pjsua2.disown_LogWriter(self)
        return weakref_proxy(self)
LogWriter_swigregister = _pjsua2.LogWriter_swigregister
LogWriter_swigregister(LogWriter)

class LogConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgLogging"] = _pjsua2.LogConfig_msgLogging_set
    __swig_getmethods__["msgLogging"] = _pjsua2.LogConfig_msgLogging_get
    if _newclass:
        msgLogging = _swig_property(_pjsua2.LogConfig_msgLogging_get, _pjsua2.LogConfig_msgLogging_set)
    __swig_setmethods__["level"] = _pjsua2.LogConfig_level_set
    __swig_getmethods__["level"] = _pjsua2.LogConfig_level_get
    if _newclass:
        level = _swig_property(_pjsua2.LogConfig_level_get, _pjsua2.LogConfig_level_set)
    __swig_setmethods__["consoleLevel"] = _pjsua2.LogConfig_consoleLevel_set
    __swig_getmethods__["consoleLevel"] = _pjsua2.LogConfig_consoleLevel_get
    if _newclass:
        consoleLevel = _swig_property(_pjsua2.LogConfig_consoleLevel_get, _pjsua2.LogConfig_consoleLevel_set)
    __swig_setmethods__["decor"] = _pjsua2.LogConfig_decor_set
    __swig_getmethods__["decor"] = _pjsua2.LogConfig_decor_get
    if _newclass:
        decor = _swig_property(_pjsua2.LogConfig_decor_get, _pjsua2.LogConfig_decor_set)
    __swig_setmethods__["filename"] = _pjsua2.LogConfig_filename_set
    __swig_getmethods__["filename"] = _pjsua2.LogConfig_filename_get
    if _newclass:
        filename = _swig_property(_pjsua2.LogConfig_filename_get, _pjsua2.LogConfig_filename_set)
    __swig_setmethods__["fileFlags"] = _pjsua2.LogConfig_fileFlags_set
    __swig_getmethods__["fileFlags"] = _pjsua2.LogConfig_fileFlags_get
    if _newclass:
        fileFlags = _swig_property(_pjsua2.LogConfig_fileFlags_get, _pjsua2.LogConfig_fileFlags_set)
    __swig_setmethods__["writer"] = _pjsua2.LogConfig_writer_set
    __swig_getmethods__["writer"] = _pjsua2.LogConfig_writer_get
    if _newclass:
        writer = _swig_property(_pjsua2.LogConfig_writer_get, _pjsua2.LogConfig_writer_set)

    def __init__(self):
        this = _pjsua2.new_LogConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def readObject(self, node):
        return _pjsua2.LogConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.LogConfig_writeObject(self, node)
    __swig_destroy__ = _pjsua2.delete_LogConfig
    __del__ = lambda self: None
LogConfig_swigregister = _pjsua2.LogConfig_swigregister
LogConfig_swigregister(LogConfig)

class MediaConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MediaConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MediaConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["clockRate"] = _pjsua2.MediaConfig_clockRate_set
    __swig_getmethods__["clockRate"] = _pjsua2.MediaConfig_clockRate_get
    if _newclass:
        clockRate = _swig_property(_pjsua2.MediaConfig_clockRate_get, _pjsua2.MediaConfig_clockRate_set)
    __swig_setmethods__["sndClockRate"] = _pjsua2.MediaConfig_sndClockRate_set
    __swig_getmethods__["sndClockRate"] = _pjsua2.MediaConfig_sndClockRate_get
    if _newclass:
        sndClockRate = _swig_property(_pjsua2.MediaConfig_sndClockRate_get, _pjsua2.MediaConfig_sndClockRate_set)
    __swig_setmethods__["channelCount"] = _pjsua2.MediaConfig_channelCount_set
    __swig_getmethods__["channelCount"] = _pjsua2.MediaConfig_channelCount_get
    if _newclass:
        channelCount = _swig_property(_pjsua2.MediaConfig_channelCount_get, _pjsua2.MediaConfig_channelCount_set)
    __swig_setmethods__["audioFramePtime"] = _pjsua2.MediaConfig_audioFramePtime_set
    __swig_getmethods__["audioFramePtime"] = _pjsua2.MediaConfig_audioFramePtime_get
    if _newclass:
        audioFramePtime = _swig_property(_pjsua2.MediaConfig_audioFramePtime_get, _pjsua2.MediaConfig_audioFramePtime_set)
    __swig_setmethods__["maxMediaPorts"] = _pjsua2.MediaConfig_maxMediaPorts_set
    __swig_getmethods__["maxMediaPorts"] = _pjsua2.MediaConfig_maxMediaPorts_get
    if _newclass:
        maxMediaPorts = _swig_property(_pjsua2.MediaConfig_maxMediaPorts_get, _pjsua2.MediaConfig_maxMediaPorts_set)
    __swig_setmethods__["hasIoqueue"] = _pjsua2.MediaConfig_hasIoqueue_set
    __swig_getmethods__["hasIoqueue"] = _pjsua2.MediaConfig_hasIoqueue_get
    if _newclass:
        hasIoqueue = _swig_property(_pjsua2.MediaConfig_hasIoqueue_get, _pjsua2.MediaConfig_hasIoqueue_set)
    __swig_setmethods__["threadCnt"] = _pjsua2.MediaConfig_threadCnt_set
    __swig_getmethods__["threadCnt"] = _pjsua2.MediaConfig_threadCnt_get
    if _newclass:
        threadCnt = _swig_property(_pjsua2.MediaConfig_threadCnt_get, _pjsua2.MediaConfig_threadCnt_set)
    __swig_setmethods__["quality"] = _pjsua2.MediaConfig_quality_set
    __swig_getmethods__["quality"] = _pjsua2.MediaConfig_quality_get
    if _newclass:
        quality = _swig_property(_pjsua2.MediaConfig_quality_get, _pjsua2.MediaConfig_quality_set)
    __swig_setmethods__["ptime"] = _pjsua2.MediaConfig_ptime_set
    __swig_getmethods__["ptime"] = _pjsua2.MediaConfig_ptime_get
    if _newclass:
        ptime = _swig_property(_pjsua2.MediaConfig_ptime_get, _pjsua2.MediaConfig_ptime_set)
    __swig_setmethods__["noVad"] = _pjsua2.MediaConfig_noVad_set
    __swig_getmethods__["noVad"] = _pjsua2.MediaConfig_noVad_get
    if _newclass:
        noVad = _swig_property(_pjsua2.MediaConfig_noVad_get, _pjsua2.MediaConfig_noVad_set)
    __swig_setmethods__["ilbcMode"] = _pjsua2.MediaConfig_ilbcMode_set
    __swig_getmethods__["ilbcMode"] = _pjsua2.MediaConfig_ilbcMode_get
    if _newclass:
        ilbcMode = _swig_property(_pjsua2.MediaConfig_ilbcMode_get, _pjsua2.MediaConfig_ilbcMode_set)
    __swig_setmethods__["txDropPct"] = _pjsua2.MediaConfig_txDropPct_set
    __swig_getmethods__["txDropPct"] = _pjsua2.MediaConfig_txDropPct_get
    if _newclass:
        txDropPct = _swig_property(_pjsua2.MediaConfig_txDropPct_get, _pjsua2.MediaConfig_txDropPct_set)
    __swig_setmethods__["rxDropPct"] = _pjsua2.MediaConfig_rxDropPct_set
    __swig_getmethods__["rxDropPct"] = _pjsua2.MediaConfig_rxDropPct_get
    if _newclass:
        rxDropPct = _swig_property(_pjsua2.MediaConfig_rxDropPct_get, _pjsua2.MediaConfig_rxDropPct_set)
    __swig_setmethods__["ecOptions"] = _pjsua2.MediaConfig_ecOptions_set
    __swig_getmethods__["ecOptions"] = _pjsua2.MediaConfig_ecOptions_get
    if _newclass:
        ecOptions = _swig_property(_pjsua2.MediaConfig_ecOptions_get, _pjsua2.MediaConfig_ecOptions_set)
    __swig_setmethods__["ecTailLen"] = _pjsua2.MediaConfig_ecTailLen_set
    __swig_getmethods__["ecTailLen"] = _pjsua2.MediaConfig_ecTailLen_get
    if _newclass:
        ecTailLen = _swig_property(_pjsua2.MediaConfig_ecTailLen_get, _pjsua2.MediaConfig_ecTailLen_set)
    __swig_setmethods__["sndRecLatency"] = _pjsua2.MediaConfig_sndRecLatency_set
    __swig_getmethods__["sndRecLatency"] = _pjsua2.MediaConfig_sndRecLatency_get
    if _newclass:
        sndRecLatency = _swig_property(_pjsua2.MediaConfig_sndRecLatency_get, _pjsua2.MediaConfig_sndRecLatency_set)
    __swig_setmethods__["sndPlayLatency"] = _pjsua2.MediaConfig_sndPlayLatency_set
    __swig_getmethods__["sndPlayLatency"] = _pjsua2.MediaConfig_sndPlayLatency_get
    if _newclass:
        sndPlayLatency = _swig_property(_pjsua2.MediaConfig_sndPlayLatency_get, _pjsua2.MediaConfig_sndPlayLatency_set)
    __swig_setmethods__["jbInit"] = _pjsua2.MediaConfig_jbInit_set
    __swig_getmethods__["jbInit"] = _pjsua2.MediaConfig_jbInit_get
    if _newclass:
        jbInit = _swig_property(_pjsua2.MediaConfig_jbInit_get, _pjsua2.MediaConfig_jbInit_set)
    __swig_setmethods__["jbMinPre"] = _pjsua2.MediaConfig_jbMinPre_set
    __swig_getmethods__["jbMinPre"] = _pjsua2.MediaConfig_jbMinPre_get
    if _newclass:
        jbMinPre = _swig_property(_pjsua2.MediaConfig_jbMinPre_get, _pjsua2.MediaConfig_jbMinPre_set)
    __swig_setmethods__["jbMaxPre"] = _pjsua2.MediaConfig_jbMaxPre_set
    __swig_getmethods__["jbMaxPre"] = _pjsua2.MediaConfig_jbMaxPre_get
    if _newclass:
        jbMaxPre = _swig_property(_pjsua2.MediaConfig_jbMaxPre_get, _pjsua2.MediaConfig_jbMaxPre_set)
    __swig_setmethods__["jbMax"] = _pjsua2.MediaConfig_jbMax_set
    __swig_getmethods__["jbMax"] = _pjsua2.MediaConfig_jbMax_get
    if _newclass:
        jbMax = _swig_property(_pjsua2.MediaConfig_jbMax_get, _pjsua2.MediaConfig_jbMax_set)
    __swig_setmethods__["sndAutoCloseTime"] = _pjsua2.MediaConfig_sndAutoCloseTime_set
    __swig_getmethods__["sndAutoCloseTime"] = _pjsua2.MediaConfig_sndAutoCloseTime_get
    if _newclass:
        sndAutoCloseTime = _swig_property(_pjsua2.MediaConfig_sndAutoCloseTime_get, _pjsua2.MediaConfig_sndAutoCloseTime_set)
    __swig_setmethods__["vidPreviewEnableNative"] = _pjsua2.MediaConfig_vidPreviewEnableNative_set
    __swig_getmethods__["vidPreviewEnableNative"] = _pjsua2.MediaConfig_vidPreviewEnableNative_get
    if _newclass:
        vidPreviewEnableNative = _swig_property(_pjsua2.MediaConfig_vidPreviewEnableNative_get, _pjsua2.MediaConfig_vidPreviewEnableNative_set)

    def __init__(self):
        this = _pjsua2.new_MediaConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def readObject(self, node):
        return _pjsua2.MediaConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.MediaConfig_writeObject(self, node)
    __swig_destroy__ = _pjsua2.delete_MediaConfig
    __del__ = lambda self: None
MediaConfig_swigregister = _pjsua2.MediaConfig_swigregister
MediaConfig_swigregister(MediaConfig)

class EpConfig(PersistentObject):
    __swig_setmethods__ = {}
    for _s in [PersistentObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PersistentObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EpConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["uaConfig"] = _pjsua2.EpConfig_uaConfig_set
    __swig_getmethods__["uaConfig"] = _pjsua2.EpConfig_uaConfig_get
    if _newclass:
        uaConfig = _swig_property(_pjsua2.EpConfig_uaConfig_get, _pjsua2.EpConfig_uaConfig_set)
    __swig_setmethods__["logConfig"] = _pjsua2.EpConfig_logConfig_set
    __swig_getmethods__["logConfig"] = _pjsua2.EpConfig_logConfig_get
    if _newclass:
        logConfig = _swig_property(_pjsua2.EpConfig_logConfig_get, _pjsua2.EpConfig_logConfig_set)
    __swig_setmethods__["medConfig"] = _pjsua2.EpConfig_medConfig_set
    __swig_getmethods__["medConfig"] = _pjsua2.EpConfig_medConfig_get
    if _newclass:
        medConfig = _swig_property(_pjsua2.EpConfig_medConfig_get, _pjsua2.EpConfig_medConfig_set)

    def readObject(self, node):
        return _pjsua2.EpConfig_readObject(self, node)

    def writeObject(self, node):
        return _pjsua2.EpConfig_writeObject(self, node)

    def __init__(self):
        this = _pjsua2.new_EpConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_EpConfig
    __del__ = lambda self: None
EpConfig_swigregister = _pjsua2.EpConfig_swigregister
EpConfig_swigregister(EpConfig)

class PendingJob(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PendingJob, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PendingJob, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def execute(self, is_pending):
        return _pjsua2.PendingJob_execute(self, is_pending)
    __swig_destroy__ = _pjsua2.delete_PendingJob
    __del__ = lambda self: None
PendingJob_swigregister = _pjsua2.PendingJob_swigregister
PendingJob_swigregister(PendingJob)

class Endpoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Endpoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Endpoint, name)
    __repr__ = _swig_repr
    if _newclass:
        instance = staticmethod(_pjsua2.Endpoint_instance)
    else:
        instance = _pjsua2.Endpoint_instance

    def __init__(self):
        if self.__class__ == Endpoint:
            _self = None
        else:
            _self = self
        this = _pjsua2.new_Endpoint(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pjsua2.delete_Endpoint
    __del__ = lambda self: None

    def libVersion(self):
        return _pjsua2.Endpoint_libVersion(self)

    def libCreate(self):
        return _pjsua2.Endpoint_libCreate(self)

    def libGetState(self):
        return _pjsua2.Endpoint_libGetState(self)

    def libInit(self, prmEpConfig):
        return _pjsua2.Endpoint_libInit(self, prmEpConfig)

    def libStart(self):
        return _pjsua2.Endpoint_libStart(self)

    def libRegisterThread(self, name):
        return _pjsua2.Endpoint_libRegisterThread(self, name)

    def libIsThreadRegistered(self):
        return _pjsua2.Endpoint_libIsThreadRegistered(self)

    def libStopWorkerThreads(self):
        return _pjsua2.Endpoint_libStopWorkerThreads(self)

    def libHandleEvents(self, msec_timeout):
        return _pjsua2.Endpoint_libHandleEvents(self, msec_timeout)

    def libDestroy(self, prmFlags=0):
        return _pjsua2.Endpoint_libDestroy(self, prmFlags)

    def utilStrError(self, prmErr):
        return _pjsua2.Endpoint_utilStrError(self, prmErr)

    def utilLogWrite(self, *args):
        return _pjsua2.Endpoint_utilLogWrite(self, *args)

    def utilVerifySipUri(self, prmUri):
        return _pjsua2.Endpoint_utilVerifySipUri(self, prmUri)

    def utilVerifyUri(self, prmUri):
        return _pjsua2.Endpoint_utilVerifyUri(self, prmUri)

    def utilTimerSchedule(self, prmMsecDelay, prmUserData):
        return _pjsua2.Endpoint_utilTimerSchedule(self, prmMsecDelay, prmUserData)

    def utilTimerCancel(self, prmToken):
        return _pjsua2.Endpoint_utilTimerCancel(self, prmToken)

    def utilAddPendingJob(self, job):
        return _pjsua2.Endpoint_utilAddPendingJob(self, job)

    def utilSslGetAvailableCiphers(self):
        return _pjsua2.Endpoint_utilSslGetAvailableCiphers(self)

    def natDetectType(self):
        return _pjsua2.Endpoint_natDetectType(self)

    def natGetType(self):
        return _pjsua2.Endpoint_natGetType(self)

    def natUpdateStunServers(self, prmServers, prmWait):
        return _pjsua2.Endpoint_natUpdateStunServers(self, prmServers, prmWait)

    def natCheckStunServers(self, prmServers, prmWait, prmUserData):
        return _pjsua2.Endpoint_natCheckStunServers(self, prmServers, prmWait, prmUserData)

    def natCancelCheckStunServers(self, token, notify_cb=False):
        return _pjsua2.Endpoint_natCancelCheckStunServers(self, token, notify_cb)

    def transportCreate(self, type, cfg):
        return _pjsua2.Endpoint_transportCreate(self, type, cfg)

    def transportEnum(self):
        return _pjsua2.Endpoint_transportEnum(self)

    def transportGetInfo(self, id):
        return _pjsua2.Endpoint_transportGetInfo(self, id)

    def transportSetEnable(self, id, enabled):
        return _pjsua2.Endpoint_transportSetEnable(self, id, enabled)

    def transportClose(self, id):
        return _pjsua2.Endpoint_transportClose(self, id)

    def transportShutdown(self, tp):
        return _pjsua2.Endpoint_transportShutdown(self, tp)

    def hangupAllCalls(self):
        return _pjsua2.Endpoint_hangupAllCalls(self)

    def mediaAdd(self, media):
        return _pjsua2.Endpoint_mediaAdd(self, media)

    def mediaRemove(self, media):
        return _pjsua2.Endpoint_mediaRemove(self, media)

    def mediaExists(self, media):
        return _pjsua2.Endpoint_mediaExists(self, media)

    def mediaMaxPorts(self):
        return _pjsua2.Endpoint_mediaMaxPorts(self)

    def mediaActivePorts(self):
        return _pjsua2.Endpoint_mediaActivePorts(self)

    def mediaEnumPorts2(self):
        return _pjsua2.Endpoint_mediaEnumPorts2(self)

    def mediaEnumVidPorts(self):
        return _pjsua2.Endpoint_mediaEnumVidPorts(self)

    def audDevManager(self):
        return _pjsua2.Endpoint_audDevManager(self)

    def vidDevManager(self):
        return _pjsua2.Endpoint_vidDevManager(self)

    def codecEnum2(self):
        return _pjsua2.Endpoint_codecEnum2(self)

    def codecSetPriority(self, codec_id, priority):
        return _pjsua2.Endpoint_codecSetPriority(self, codec_id, priority)

    def codecGetParam(self, codec_id):
        return _pjsua2.Endpoint_codecGetParam(self, codec_id)

    def codecSetParam(self, codec_id, param):
        return _pjsua2.Endpoint_codecSetParam(self, codec_id, param)

    def videoCodecEnum2(self):
        return _pjsua2.Endpoint_videoCodecEnum2(self)

    def videoCodecSetPriority(self, codec_id, priority):
        return _pjsua2.Endpoint_videoCodecSetPriority(self, codec_id, priority)

    def getVideoCodecParam(self, codec_id):
        return _pjsua2.Endpoint_getVideoCodecParam(self, codec_id)

    def setVideoCodecParam(self, codec_id, param):
        return _pjsua2.Endpoint_setVideoCodecParam(self, codec_id, param)

    def resetVideoCodecParam(self, codec_id):
        return _pjsua2.Endpoint_resetVideoCodecParam(self, codec_id)

    def srtpCryptoEnum(self):
        return _pjsua2.Endpoint_srtpCryptoEnum(self)

    def handleIpChange(self, param):
        return _pjsua2.Endpoint_handleIpChange(self, param)

    def onNatDetectionComplete(self, prm):
        return _pjsua2.Endpoint_onNatDetectionComplete(self, prm)

    def onNatCheckStunServersComplete(self, prm):
        return _pjsua2.Endpoint_onNatCheckStunServersComplete(self, prm)

    def onTransportState(self, prm):
        return _pjsua2.Endpoint_onTransportState(self, prm)

    def onTimer(self, prm):
        return _pjsua2.Endpoint_onTimer(self, prm)

    def onSelectAccount(self, prm):
        return _pjsua2.Endpoint_onSelectAccount(self, prm)

    def onIpChangeProgress(self, prm):
        return _pjsua2.Endpoint_onIpChangeProgress(self, prm)

    def onMediaEvent(self, prm):
        return _pjsua2.Endpoint_onMediaEvent(self, prm)
    def __disown__(self):
        self.this.disown()
        _pjsua2.disown_Endpoint(self)
        return weakref_proxy(self)
Endpoint_swigregister = _pjsua2.Endpoint_swigregister
Endpoint_swigregister(Endpoint)

def Endpoint_instance():
    return _pjsua2.Endpoint_instance()
Endpoint_instance = _pjsua2.Endpoint_instance

# This file is compatible with both classic and new-style classes.


